// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(..., package.seeall);
var ffi = require("ffi");
var C = ffi.C;
var header = require("lib.protocol.header");
var ipsum = require("lib.checksum").ipsum;
var lib = require("core.lib");
var htons, ntohs = lib.htons, lib.ntohs;

var udp = subClass(header);

// Class variables
udp._name = "udp";
udp._ulp = { method = null };
udp->init(
   {
      [1] = ffi.typeof([=[
	    struct {
	       uint16_t    src_port;
	       uint16_t    dst_port;
	       uint16_t    len;
	       uint16_t    checksum;
	    } __attribute__((packed))
      ]=]),
   });

// Class methods

function udp::new (config) {
   var o = udp->superClass().new(this);
   o->src_port(config.src_port);
   o->dst_port(config.dst_port);
   o->length(8);
   o->header().checksum = 0;
   return o;
}

// Instance methods

function udp::src_port (port) {
   var h = this->header();
   if( port != null ) {
      h.src_port = htons(port);
   }
   return ntohs(h.src_port);
}

function udp::dst_port (port) {
   var h = this->header();
   if( port != null ) {
      h.dst_port = htons(port);
   }
   return ntohs(h.dst_port);
}

function udp::length (len) {
   var h = this->header();
   if( len != null ) {
      h.len = htons(len);
   }
   return ntohs(h.len);
}

function udp::checksum (payload, length, ip) {
   var h = this->header();
   if( payload ) {
      var csum = 0;
      if( ip ) {
         // Checksum IP pseudo-header
         var ph = ip->pseudo_header(length + this->sizeof(), 17);
         csum = ipsum(ffi.cast("uint8_t *", ph), ffi.sizeof(ph), 0);
      }
      // Add UDP header
      h.checksum = 0;
      csum = ipsum(ffi.cast("uint8_t *", h),
                   this->sizeof(), bit.bnot(csum));
      // Add UDP payload
      h.checksum = htons(ipsum(payload, length, bit.bnot(csum)));
   }
   return ntohs(h.checksum);
}

// override the default equality method
function udp::eq (other) {
   //compare significant fields
   return (this->src_port() == other->src_port()) &&
         (this->dst_port() == other->dst_port()) &&
         (this->length() == other->length());
}

return udp;

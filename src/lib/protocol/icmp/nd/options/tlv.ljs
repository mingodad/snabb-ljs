// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(..., package.seeall);
var ffi = require("ffi");

var tlv = subClass(null);

ffi.cdef([=[
      typedef struct {
         uint8_t type;
         uint8_t length;
      } tlv_t __attribute__((packed))
]=]);

var tlv_t = ffi.typeof("tlv_t");

var tlv_ptr_t = ffi.typeof("$ *", tlv_t);
tlv._types = {
   [1] = {
      name  = "src_ll_addr",
      class = "lib.protocol.icmp.nd.options.lladdr"
   },
   [2] = {
      name  = "tgt_ll_addr",
      class = "lib.protocol.icmp.nd.options.lladdr"
   },
};

// Will be overriden for known types
tlv._name = "unkown";

function tlv::new (type, data) {
   assert(tlv._types[type], "tlv: unsupported type");
   var size = ffi.sizeof(tlv_t)+ffi.sizeof(data);
   assert(size%8 == 0);
   var o = tlv->superClass().new(this);
   var tlv = ffi.typeof("struct { tlv_t tlv; uint8_t data[$]; }", ffi.sizeof(data))();
   tlv.tlv.type = type;
   tlv.tlv.length = size/8;
   ffi.copy(tlv.data, data, ffi.sizeof(data));
   o._tlv = tlv;
   o._option = require(o._types[type].class)->new_from_mem(tlv.data, ffi.sizeof(data));
   assert(o._option);
   return o;
}

function tlv::new_from_mem (mem, size) {
   var o = tlv->superClass().new(this);
   var tlv_t_size = ffi.sizeof(tlv_t);
   assert(tlv_t_size <= size);
   var tlv = ffi.cast(tlv_ptr_t, mem);
   assert(o._types[tlv.type], "tlv: unsupported type");
   o._name = o._types[tlv.type].name;
   var class = o._types[tlv.type].class;
   o._option = require(class)->new_from_mem(mem + tlv_t_size,
                                           size - tlv_t_size);
   assert(o._option);
   var t = ffi.typeof("struct { tlv_t tlv; uint8_t data[$]; }", size-tlv_t_size);
   o._tlv = ffi.cast(ffi.typeof("$*", t), mem);
   return o;
}

function tlv::name () {
   return this._name;
}

function tlv::type (type) {
   if( type != null ) {
      assert(this._types[type]);
      this._tlv.tlv.type = type;
   }
   return this._tlv.tlv.type;
}

// This is in units of 8 bytes
function tlv::length () {
   return this._tlv.tlv.length;
}

function tlv::data () {
   return this._tlv.data;
}

function tlv::tlv () {
   return this._tlv;
}

function tlv::option () {
   return this._option;
}

return tlv;

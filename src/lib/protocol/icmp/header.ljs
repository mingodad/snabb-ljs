// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(..., package.seeall);
var ffi = require("ffi");
var C = ffi.C;
var header = require("lib.protocol.header");
var lib = require("core.lib");
var ipsum = require("lib.checksum").ipsum;

// XXX IPv4 and IPv6 use the same ICMP header format but distinct
// number spaces for type and code.  This class needs to be subclassed
// accordingly.

var icmp = subClass(header);

// Class variables
icmp._name = "icmp";
icmp._ulp = {
   class_map = { [2]   = "lib.protocol.icmp.ptb",
                 [135] = "lib.protocol.icmp.nd.ns",
                 [136] = "lib.protocol.icmp.nd.na" },
   method    = "type" };
icmp->init(
   {
      [1] = ffi.typeof([=[
            struct {
               uint8_t type;
               uint8_t code;
               int16_t checksum;
            } __attribute__((packed))
      ]=])
   });

// Class methods

function icmp::new (type, code) {
   var o = icmp->superClass().new(this);
   o->type(type);
   o->code(code);
   return o;
}

// Instance methods

function icmp::type (type) {
   if( type != null ) {
      this->header().type = type;
   } else {
      return this->header().type;
   }
}

function icmp::code (code) {
   if( code != null ) {
      this->header().code = code;
   } else {
      return this->header().code;
   }
}

var function checksum(header, payload, length, ipv6) {
   var csum = 0;
   if( ipv6 ) {
      // Checksum IPv6 pseudo-header
      var ph = ipv6->pseudo_header(length + ffi.sizeof(header), 58);
      csum = ipsum(ffi.cast("uint8_t *", ph), ffi.sizeof(ph), 0);
   }
   // Add ICMP header
   var csum_rcv = header.checksum;
   header.checksum = 0;
   csum = ipsum(ffi.cast("uint8_t *", header),
                ffi.sizeof(header), bit.bnot(csum));
   header.checksum = csum_rcv;
   // Add ICMP payload
   return ipsum(payload, length, bit.bnot(csum));
}

function icmp::checksum (payload, length, ipv6) {
   var header = this->header();
   header.checksum = lib.htons(checksum(header, payload, length, ipv6));
}

function icmp::checksum_check (payload, length, ipv6) {
   return checksum(this->header(), payload, length, ipv6) == lib.ntohs(this->header().checksum);
}

return icmp;

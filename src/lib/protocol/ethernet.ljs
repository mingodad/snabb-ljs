// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(..., package.seeall);
var ffi = require("ffi");
var C = ffi.C;
var lib = require("core.lib");
var header = require("lib.protocol.header");
var ipv6 = require("lib.protocol.ipv6");
var band = require("bit").band;
var ntohs, htons = lib.ntohs, lib.htons;

var mac_addr_t = ffi.typeof("uint8_t[6]");
var ethernet = subClass(header);

// Class variables
ethernet._name = "ethernet";
ethernet._ulp = {
   class_map = {
                  [0x0800] = "lib.protocol.ipv4",
                  [0x86dd] = "lib.protocol.ipv6",
                },
   method    = 'type' };
ethernet->init(
   {
      [1] = ffi.typeof([=[
            struct {
               uint8_t  ether_dhost[6];
               uint8_t  ether_shost[6];
               uint16_t ether_type;
            } __attribute__((packed))
      ]=])
   });

// Class methods

function ethernet::new (config) {
   var o = ethernet->superClass().new(this);
   o->dst(config.dst);
   o->src(config.src);
   o->type(config.type);
   return o;
}

// Convert printable address to numeric
function ethernet::pton (p) {
   var result = mac_addr_t();
   var i = 0;
   for( v in p->split(":") ) {
      if( string.match(v, '^%x%x$') ) {
         result[i] = tonumber("0x"..v);
      } else {
         error("invalid mac address "..p);
      }
      ++i  ;
   }
   assert(i == 6, "invalid mac address "..p);
   return result;
}

// Convert numeric address to printable
function ethernet::ntop (n) {
   var p = {};
   for( i = 0, 5, 1 ) {
      table.insert(p, string.format("%02x", n[i]));
   }
   return table.concat(p, ":");
}

// Mapping of an IPv6 multicast address to a MAC address per RFC2464,
// section 7
function ethernet::ipv6_mcast(ip) {
   var result = this->pton("33:33:00:00:00:00");
   var n = ffi.cast("uint8_t *", ip);
   assert(n[0] == 0xff, "invalid multiast address: "..ipv6->ntop(ip));
   ffi.copy(ffi.cast("uint8_t *", result)+2, n+12, 4);
   return result;
}

// Check whether a MAC address has its group bit set
function ethernet::is_mcast (addr) {
   return band(addr[0], 0x01) != 0;
}

var bcast_address = ethernet->pton("FF:FF:FF:FF:FF:FF");
// Check whether a MAC address is the broadcast address
function ethernet::is_bcast (addr) {
   return C.memcmp(addr, bcast_address, 6) == 0;
}

// Instance methods

function ethernet::src (a) {
   var h = this->header();
   if( a != null ) {
      ffi.copy(h.ether_shost, a, 6);
   } else {
      return h.ether_shost;
   }
}

function ethernet::src_eq (a) {
   return C.memcmp(a, this->header().ether_shost, 6) == 0;
}

function ethernet::dst (a) {
   var h = this->header();
   if( a != null ) {
      ffi.copy(h.ether_dhost, a, 6);
   } else {
      return h.ether_dhost;
   }
}

function ethernet::dst_eq (a) {
   return C.memcmp(a, this->header().ether_dhost, 6) == 0;
}

function ethernet::swap () {
   var tmp = mac_addr_t();
   var h = this->header();
   ffi.copy(tmp, h.ether_dhost, 6);
   ffi.copy(h.ether_dhost, h.ether_shost,6);
   ffi.copy(h.ether_shost, tmp, 6);
}

function ethernet::type (t) {
   var h = this->header();
   if( t != null ) {
      h.ether_type = htons(t);
   } else {
      return(ntohs(h.ether_type));
   }
}

return ethernet;

// Use of this source code is governed by the Apache 2.0 license; see COPYING.
module(..., package.seeall);

var ipv4 = require("lib.protocol.ipv4");
var lib = require("core.lib");
var header = require("lib.protocol.header");

var ffi = require("ffi");
var C = ffi.C;

ffi.cdef([=[
size_t strlen(const char *s);
]=]);

var htons, ntohs = lib.htons, lib.ntohs;
var htonl, ntohl = lib.htonl, lib.ntohl;

A   = 0x01;
PTR = 0x0c;
SRV = 0x21;
TXT = 0x10;

CLASS_IN = 0x1;

var function r16 (ptr) {
   return ffi.cast("uint16_t*", ptr)[0];
}
var function contains (t, e) {
   for( _, each in ipairs(t) ) {
      if( each == e ) { return true; }
   }
   return false;
}

DNS = {};

var function encode_name_string (str) {
   var function repetitions (str, char) {
      var ret = 0;
      for( each in str->gmatch(char) ) {
         ++ret    ;
      }
      return ret;
   }
   var extra = repetitions(str, '%.') + 1;
   var ret = ffi.new("char[?]", #str + extra + 1);
   var buffer = ret;
   var function write_len (num) {
      buffer[0] = num;
      ++buffer    ;
   }
   var function write_str (arg) {
      ffi.copy(buffer, arg, #arg);
      buffer = buffer + #arg;
   }
   var total_length = 0;
   for( each in str->gmatch('([^%.]+)') ) {
      write_len(#each);
      write_str(each);
      total_length = #each + 1;
   }
   return ret, total_length;
}

var function decode_name_string (cdata) {
   var t = {};
   var buffer, i = cdata, 0;
   var function read_len () {
      var len = tonumber(buffer[0]);
      ++buffer    ;
      return len;
   }
   var function read_str (len) {
      table.insert(t, ffi.string(buffer, len));
      buffer +=   len;
   }
   var function eol () {
      return buffer[0] == 0;
   }
   var function flush () {
      return table.concat(t, ".");
   }
   while( ! eol() ) {
      var len = read_len();
      if( len < 0 ) { break; }
      read_str(len);
   }
   return flush();
}

var function encode_string (str) {
   assert(type(str) == "string");
   var ret = ffi.new("char[?]", #str+1);
   ret[0] = #str;
   ffi.copy(ret + 1, str);
   return ret;
}

var function encode_strings (t) {
   assert(type(t) == "table");
   var ret = ffi.new("char*[?]", #t);
   for( i, each in ipairs(arg) ) {
      ret[i-1] = encode_single(each);
   }
   return ret;
}

var function decode_string (cstr, cstr_len) {
   var t = {};
   var pos = 0;
   while( pos < cstr_len ) {
      var len = tonumber(cstr[pos]);
      ++pos    ;
      table.insert(t, ffi.string(cstr + pos, len));
      pos +=   len;
   }
   return t;
}

// DNS Query Record.

query_record = subClass(header);
query_record._name = "query_record";
query_record->init({
   [1] = ffi.typeof([=[
   struct {
      char* name;
      uint16_t type;
      uint16_t class;
   } __attribute__((packed))
   ]=])
});

function query_record::new_from_mem (data, length) {
   var o = query_record->superClass().new(this);
   var name, len = parse_name(data, length);
   var h = o->header();
   h.name = name;
   h.type = r16(data + len);
   h.class = r16(data + len + 2);
   return o, len + 4;
}

function parse_name (data, size) {
   var len = 2;
   var maybe_type = r16(data + len);
   if( maybe_type != htons(TXT) ) {
      len = name_length(data, size);
   }
   if( len ) {
      var name = ffi.new("uint8_t[?]", len);
      ffi.copy(name, data, len);
      return name, len;
   }
}

// Returns dns_record.name's length.
function name_length (data, size) {
   var ptr = data;
   var i = 0;
   while( i < size ) {
      // PTR records's name end with an end-of-string character. Next byte
      // belongs to type.
      if( ptr[i] == 0 && ptr[i + 1] == 0 ) { ++i    ; break; }
      // This zero belongs to type so break.
      if( ptr[i] == 0 ) { break; }
      ++i    ;
   }
   return i < size && i || null;
}

function query_record::new (config) {
   var o = query_record->superClass().new(this);
   o->name(config.name);
   o->type(config.type);
   o->klass(config.class);
   return o;
}

function query_record::name (name) {
   var h = this->header();
   if( name ) {
      h.name, len = encode_name_string(name);
   }
   return h.name != null && decode_name_string(h.name) || "";
}

function query_record::type (type) {
   if( type ) {
      this->header().type = htons(type);
   }
   return ntohs(this->header().type);
}

function query_record::klass (class) {
   if( class ) {
      this->header().class = htons(class);
   }
   return ntohs(this->header().class);
}

// Size of record depends of length of name.
function query_record::sizeof () {
   var success, h = pcall(this.header, this);
   if( ! success ) {
      return this->superClass().sizeof(this);
   } else {
      return tonumber(C.strlen(h.name) + 1) + 4;
   }
}

// DNS Response Record common fields.
// Abstract class. Used by all other types of records: A, PTR, SRV and TXT.

var dns_record_header_typedef = [=[
   struct {
      char *name;
      uint16_t type;
      uint16_t class;
      uint32_t ttl;
      uint16_t data_length;
   } __attribute__((packed))
]=];

var dns_record_header = subClass(header);
dns_record_header._name = "dns_record_header";

function dns_record_header::initialize(o, config) {
   o->name(config.name);
   o->klass(config.class);
   o->ttl(config.ttl);
   o->data_length(config.data_length);
}

function dns_record_header::new_from_mem(header, data, size) {
   // Copy name.
   var name, len = parse_name(data, size);
   header.name = name;

   // Cast a temporary pointer for the rest of dns_record_header fields.
   var dns_record_subheader_t = ffi.typeof([=[
   struct {
      uint16_t type;
      uint16_t class;
      uint32_t ttl;
      uint16_t data_length;
   } __attribute__((packed))
   ]=]);
   var dns_record_subheader_ptr_t = ffi.typeof("$*", dns_record_subheader_t);
   var ptr = ffi.cast(dns_record_subheader_ptr_t, data + len);

   header.type = ptr.type;
   header.class = ptr.class;
   header.ttl = ptr.ttl;
   header.data_length = ptr.data_length;

   return len + ffi.sizeof(dns_record_subheader_t);
}

function dns_record_header::name (name) {
   var h = this->header();
   if( name ) {
      h.name = ffi.new("char[?]", #name);
      ffi.copy(h.name, name);
   }
   return h.name != null && ffi.string(h.name) || "";
}

function dns_record_header::type (type) {
   if( type ) {
      this->header().type = htons(type);
   }
   return ntohs(this->header().type);
}

// TODO: Cannot call method 'class' because it is already defined probably in
// the parent class).
function dns_record_header::klass (class) {
   if( class ) {
      this->header().class = htons(class);
   }
   return ntohs(this->header().class);
}

function dns_record_header::ttl(ttl) {
   if( ttl ) {
      this->header().ttl = htonl(ttl);
   }
   return ntohl(this->header().ttl);
}

function dns_record_header::data_length(data_length) {
   if( data_length ) {
      this->header().data_length = htons(data_length);
   }
   return ntohs(this->header().data_length);
}

// TXT record.

txt_record = subClass(dns_record_header);
txt_record._name = "txt_record";
txt_record->init({
   [1] = ffi.typeof(([=[
   struct {
      %s;
      char* chunks;
   } __attribute__((packed))
   ]=])->format(dns_record_header_typedef))
});

function txt_record::new_from_mem(data, size) {
   var o = txt_record->superClass().new(this);
   var offset = dns_record_header->new_from_mem(o->header(), data, size);
   o->header().chunks = ffi.new("char[?]", o->data_length());
   ffi.copy(o->header().chunks, data + offset, o->data_length());
   var total_length = offset + o->data_length();
   return o, total_length;
}

function txt_record::new (config) {
   var o = txt_record->superClass().new(this);
   dns_record_header->initialize(o, config);
   o->type(TXT);
   if( config.chunks ) {
      o->chunks(config.chunks);
   }
}

function txt_record::chunks (chunks) {
   if( chunks ) {
      this->header().chunks = encode_string(chunks);
   }
   return decode_string(this->header().chunks, this->data_length());
}

function txt_record::tostring () {
   var t = decode_string(this->header().chunks, this->data_length());
   return ("{%s}")->format(table.concat(t, ";"));
}

// SRV record.

srv_record = subClass(dns_record_header);
srv_record._name = "srv_record";
srv_record->init({
   [1] = ffi.typeof(([=[
   struct {
      %s;
      uint16_t priority;
      uint16_t weight;
      uint16_t port;
      char* target;
   } __attribute__((packed))
   ]=])->format(dns_record_header_typedef))
});

function srv_record::new_from_mem(data, size) {
   var o = srv_record->superClass().new(this);
   var offset = dns_record_header->new_from_mem(o->header(), data, size);
   o->header().priority = r16(data + offset);
   o->header().weight = r16(data + offset + 2);
   o->header().port = r16(data + offset + 4);
   o->header().target = ffi.new("char[?]", o->data_length() - 6);
   ffi.copy(o->header().target, data + offset + 6, o->data_length() - 6);
   var total_length = offset + o->data_length();
   return o, total_length;
}

function srv_record::new (config) {
   var o = srv_record->superClass().new(this);
   o->type(SRV);
   o->priority(config.priority || 0);
   o->weight(config.weight);
   o->port(config.port);
   o->target(config.target);
   return o;
}

function srv_record::priority (priority) {
   if( priority ) {
      this->header().priority = htons(priority);
   }
   return ntohs(this->header().priority);
}

function srv_record::weight (weight) {
   if( weight ) {
      this->header().weight = htons(weight);
   }
   return ntohs(this->header().weight);
}

function srv_record::port (port) {
   if( port ) {
      this->header().port = htons(port);
   }
   return ntohs(this->header().port);
}

function srv_record::target (target) {
   var h = this->header();
   if( target ) {
      h.target = ffi.new("char[?]", #target);
      ffi.copy(h.target, target);
   }
   return h.target != null && ffi.string(h.target) || "";
}

function srv_record::tostring () {
   var target = decode_name_string(this->header().target);
   return ("{target: %s; port: %d}")->format(target, this->port());
}

// PTR record.

ptr_record = subClass(dns_record_header);
ptr_record._name = "ptr_record";
ptr_record->init({
   [1] = ffi.typeof(([=[
   struct {
      %s;                     /* DNS record header */
      char* domain_name;      /* PTR record own fields */
   } __attribute__((packed))
   ]=])->format(dns_record_header_typedef))
});

function ptr_record::new_from_mem(data, size) {
   var o = ptr_record->superClass().new(this);
   var offset = dns_record_header->new_from_mem(o->header(), data, size);
   o->header().domain_name = ffi.new("char[?]", o->data_length());
   ffi.copy(o->header().domain_name, data + offset, o->data_length());
   var total_length = offset + o->data_length();
   return o, total_length;
}

function ptr_record::new (config) {
   var o = ptr_record->superClass().new(this);
   dns_record_header->initialize(o, config);
   o->type(PTR);
   o->domain_name(config.domain_name);
   return o;
}

function ptr_record::domain_name (domain_name) {
   var h = this->header();
   if( domain_name ) {
      h.domain_name = ffi.new("char[?]", #domain_name);
      ffi.copy(h.domain_name, domain_name);
   }
   return h.domain_name != null && ffi.string(h.domain_name) || "";
}

function ptr_record::tostring () {
   var name = decode_name_string(this->header().name);
   var domain_name = decode_name_string(this->header().domain_name);
   if( #name > 0 ) {
      return ("{name: %s; domain_name: %s}")->format(name, domain_name);
   } else {
      return ("{domain_name: %s}")->format(domain_name);
   }
}

// A record.

var a_record = subClass(dns_record_header);
a_record._name = "address_record";
a_record->init({
   [1] = ffi.typeof(([=[
   struct {
      %s;                     /* DNS record header */
      uint8_t address[4];     /* A record own fields */
   } __attribute__((packed))
   ]=])->format(dns_record_header_typedef))
});

function a_record::new_from_mem(data, size) {
   var o = a_record->superClass().new(this);
   var offset = dns_record_header->new_from_mem(o->header(), data, size);
   ffi.copy(o->header().address, data + offset, o->data_length());
   var total_length = offset + o->data_length();
   return o, total_length;
}

function a_record::new (config) {
   var o = a_record->superClass().new(this);
   dns_record_header->initialize(o, config);
   o->type(A);
   o->address(config.address);
   return o;
}

function a_record::address (address) {
   if( address ) {
      ffi.copy(this->header().address, ipv4->pton(address), 4);
   }
   return ipv4->ntop(this->header().address);
}

function a_record::tostring () {
   var name = decode_name_string(this->header().name);
   if( #name > 0 ) {
      return ("{name: %s; address: %s}")->format(name, this->address());
   } else {
      return ("{address: %s}")->format(this->address());
   }
}

function DNS.parse_records (data, size, n) {
   n = n || 1;
   assert(n >= 0);
   var rrs, total_len = {}, 0;
   var ptr = data;
   for( _=1,n ) {
      var rr, len = DNS.parse_record(ptr, size);
      if( len == 0 ) { break; }
      ptr +=   len;
      total_len +=   len;
      table.insert(rrs, rr);
   }
   return rrs, total_len;
}

function DNS.parse_record (data, size) {
   var function is_supported (type) {
      var supported_types = {A, PTR, SRV, TXT};
      return type && contains(supported_types, type);
   }
   var type = parse_type(data, size);
   type = ntohs(assert(type));
   if( ! is_supported(type) ) { return null, 0; }
   return DNS.create_record_by_type(type, data, size);
}

function parse_type (data, size) {
   var maybe_type = r16(data + 2);
   if( maybe_type == htons(TXT) ) {
      return maybe_type;
   } else {
      var len = name_length(data, size);
      if( len ) {
         return r16(data + len);
      }
   }
}

function DNS.create_record_by_type (type, data, size) {
   if( type == A ) {
      return a_record->new_from_mem(data, size);
   } else if( type == PTR ) {
      return ptr_record->new_from_mem(data, size);
   } else if( type == SRV ) {
      return srv_record->new_from_mem(data, size);
   } else if( type == TXT ) {
      return txt_record->new_from_mem(data, size);
   }
}

function selftest () {
   // Test PTR record.
   var pkt = packet.from_string(lib.hexundump([=[
      09 5f 73 65 72 76 69 63 65 73 07 5f 64 6e 73 2d
      73 64 04 5f 75 64 70 05 6c 6f 63 61 6c 00 00 0c
      00 01 00 00 0e 0f 00 18 10 5f 73 70 6f 74 69 66
      79 2d 63 6f 6e 6e 65 63 74 04 5f 74 63 70 c0 23
   ]=], 64));
   var ptr_rr, len = ptr_record->new_from_mem(pkt.data, 64);
   assert(ptr_rr->type() == PTR);
   assert(ptr_rr->ttl() == 3599);
   assert(ptr_rr->klass() == 0x1);
   assert(ptr_rr->data_length() == 24);
   assert(len == 64);

   // Test A record.
   pkt = packet.from_string(lib.hexundump([=[
      14 61 6d 61 7a 6f 6e 2d 32 39 64 36 39 35 38 31
      65 2d 6c 61 6e c0 23 00 01 80 01 00 00 0e 0f 00
      04 c0 a8 56 37
   ]=], 37));
   var address_rr;
   address_rr, len = a_record->new_from_mem(pkt.data, 37);
   assert(address_rr->type() == A);
   assert(address_rr->ttl() == 3599);
   assert(address_rr->klass() == 0x8001);
   assert(address_rr->data_length() == 4);
   assert(address_rr->address() == "192.168.86.55");
   assert(len == 37);

   // Test SRV record.
   pkt = packet.from_string(lib.hexundump([=[
      3c 61 6d 7a 6e 2e 64 6d 67 72 3a 31 32 31 31 34
      43 39 35 32 43 36 36 39 31 46 39 30 35 43 45 30
      45 35 39 43 45 36 34 31 45 39 38 3a 72 50 50 4b
      75 54 44 79 49 45 3a 36 38 31 32 37 37 0b 5f 61
      6d 7a 6e 2d 77 70 6c 61 79 c0 45 00 21 80 01 00
      00 0e 0f 00 08 00 00 00 00 b9 46 c0 4c
   ]=], 93));
   var srv_rr;
   srv_rr, len = srv_record->new_from_mem(pkt.data, 93);
   assert(srv_rr->type() == SRV);
   assert(srv_rr->ttl() == 3599);
   assert(srv_rr->klass() == 0x8001);
   assert(srv_rr->data_length() == 8);
   assert(srv_rr->priority() == 0);
   assert(srv_rr->weight() == 0);
   assert(srv_rr->port() == 47430);
   assert(len == 93);

   // Test TXT record.
   pkt = packet.from_string(lib.hexundump([=[
      c0 71 00 10 80 01 00 00 0e 0f 00 91 03 73 3d 30
      0f 61 74 3d 6b 37 59 79 41 70 53 54 68 43 48 4a
      17 6e 3d 61 65 69 6f 75 61 65 69 6f 75 61 65 69
      6f 75 61 65 69 6f 75 61 06 74 72 3d 74 63 70 08
      73 70 3d 34 32 31 37 38 04 70 76 3d 31 04 6d 76
      3d 32 03 76 3d 32 03 61 3d 30 22 75 3d 31 32 31
      31 34 43 39 35 32 43 36 36 39 31 46 39 30 35 43
      45 30 45 35 39 43 45 36 34 31 45 39 38 11 61 64
      3d 41 32 4c 57 41 52 55 47 4a 4c 42 59 45 57 05
      64 70 76 3d 31 03 74 3d 38 03 66 3d 30
   ]=], 157));
   var txt_rr;
   txt_rr, len = txt_record->new_from_mem(pkt.data, 157);
   assert(txt_rr->type() == TXT);
   assert(txt_rr->ttl() == 3599);
   assert(txt_rr->klass() == 0x8001);
   assert(txt_rr->data_length() == 145);
   assert(#txt_rr->chunks() == 14);
   assert(len == 157);

   // MDNS response body containing many records.
   var answers = packet.from_string(lib.hexundump([=[
      09 5f 73 65 72 76 69 63 65 73 07 5f 64 6e 73 2d
      73 64 04 5f 75 64 70 05 6c 6f 63 61 6c 00 00 0c
      00 01 00 00 0e 0f 00 18 10 5f 73 70 6f 74 69 66
      79 2d 63 6f 6e 6e 65 63 74 04 5f 74 63 70 c0 23
      14 61 6d 61 7a 6f 6e 2d 32 39 64 36 39 35 38 31
      65 2d 6c 61 6e c0 23 00 01 80 01 00 00 0e 0f 00
      04 c0 a8 56 37 3c 61 6d 7a 6e 2e 64 6d 67 72 3a
      31 32 31 31 34 43 39 35 32 43 36 36 39 31 46 39
      30 35 43 45 30 45 35 39 43 45 36 34 31 45 39 38
      3a 72 50 50 4b 75 54 44 79 49 45 3a 36 38 31 32
      37 37 0b 5f 61 6d 7a 6e 2d 77 70 6c 61 79 c0 45
      00 21 80 01 00 00 0e 0f 00 08 00 00 00 00 b9 46
      c0 4c c0 71 00 10 80 01 00 00 0e 0f 00 91 03 73
      3d 30 0f 61 74 3d 6b 37 59 79 41 70 53 54 68 43
      48 4a 17 61 65 69 6f 75 61 65 69 6f 75 61 65 69
      6f 75 61 65 69 6f 75 61 65 69 06 74 72 3d 74 63
      70 08 73 70 3d 34 32 31 37 38 04 70 76 3d 31 04
      6d 76 3d 32 03 76 3d 32 03 61 3d 30 22 75 3d 31
      32 31 31 34 43 39 35 32 43 36 36 39 31 46 39 30
      35 43 45 30 45 35 39 43 45 36 34 31 45 39 38 11
      61 64 3d 41 32 4c 57 41 52 55 47 4a 4c 42 59 45
      57 05 64 70 76 3d 31 03 74 3d 38 03 66 3d 30
   ]=], 351));
   var rrs, total_length = DNS.parse_records(answers.data, 351, 4);
   assert(#rrs == 4);
   assert(total_length == 351);

   // DNS query record.
   pkt = packet.from_string(lib.hexundump([=[
      0b 5f 67 6f 6f 67 6c 65 7a 6f 6e 65 04 5f 74 63
      70 05 6c 6f 63 61 6c 00 00 0c 00 01
   ]=], 28));
   var query_rr;
   query_rr, len = query_record->new_from_mem(pkt.data, 28);
   assert(query_rr->name() == "_googlezone._tcp.local");
   assert(query_rr->type() == PTR);
   assert(query_rr->klass() == 0x1);
   assert(query_rr->sizeof() == len);
   assert(query_record->sizeof() == 12);

   var query = "_services._dns-sd._udp.local";
   assert(decode_name_string((encode_name_string(query))) == query);
}

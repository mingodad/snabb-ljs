// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

// Call bind_to_cpu(1) to bind the current Snabb process to CPU 1 (for
// example), to bind its memory to the corresponding NUMA node, to
// migrate mapped pages to that NUMA node, and to arrange to warn if
// you use a PCI device from a remote NUMA node.  See README.numa.md
// for full API documentation.

var S = require("syscall");
var pci = require("lib.hardware.pci");

var bound_cpu;
var bound_numa_node;

var node_path = '/sys/devices/system/node/node';
var MAX_CPU = 1023;

function cpu_get_numa_node (cpu) {
   var node = 0;
   while( true ) {
      var node_dir = S.open(node_path..node, 'rdonly, directory');
      if( ! node_dir ) { return 0; } // default NUMA node
      var found = S.readlinkat(node_dir, 'cpu'..cpu);
      node_dir->close();
      if( found ) { return node; }
      ++node    ;
   }
}

var function supports_numa () {
   var node0 = S.open(node_path..tostring(0), 'rdonly, directory');
   if( ! node0 ) { return false; }
   node0->close();
   return true;
}

function has_numa () {
   var node1 = S.open(node_path..tostring(1), 'rdonly, directory');
   if( ! node1 ) { return false; }
   node1->close();
   return true;
}

function pci_get_numa_node (addr) {
   addr = pci.qualified(addr);
   var file = assert(io.open('/sys/bus/pci/devices/'..addr..'/numa_node'));
   var node = assert(tonumber(file->read()));
   // node can be -1.
   return math.max(0, node);
}

function choose_numa_node_for_pci_addresses (addrs, require_affinity) {
   var chosen_node, chosen_because_of_addr;
   for( _, addr in ipairs(addrs) ) {
      var node = pci_get_numa_node(addr);
      if( ! node || node == chosen_node ) {
         // Keep trucking.
      } else if( ! chosen_node ) {
         chosen_node = node;
         chosen_because_of_addr = addr;
      } else {
         var msg = string.format(
            "PCI devices %s and %s have different NUMA node affinities",
            chosen_because_of_addr, addr);
         if( require_affinity ) { error(msg); } else { print('Warning: '..msg); }
      }
   }
   return chosen_node;
}

function check_affinity_for_pci_addresses (addrs) {
   var policy = S.get_mempolicy();
   if( policy.mode == S.c.MPOL_MODE['default'] ) {
      if( has_numa() ) {
         print('Warning: No NUMA memory affinity.');
         print('Pass --cpu to bind to a CPU and its NUMA node.');
      }
   } else if( policy.mode != S.c.MPOL_MODE['bind'] ) {
      print("Warning: NUMA memory policy already in effect, but it's not --membind.");
   } else {
      var node = S.getcpu().node;
      var node_for_pci = choose_numa_node_for_pci_addresses(addrs);
      if( node_for_pci && node != node_for_pci ) {
         print("Warning: Bound NUMA node does not have affinity with PCI devices.");
      }
   }
}

function unbind_cpu () {
   var cpu_set = S.sched_getaffinity();
   cpu_set->zero();
   for( i = 0, MAX_CPU ) { cpu_set->set(i); }
   assert(S.sched_setaffinity(0, cpu_set));
   bound_cpu = null;
}

function bind_to_cpu (cpu) {
   if( cpu == bound_cpu ) { return; }
   if( ! cpu ) { return unbind_cpu(); }
   assert(! bound_cpu, "already bound");

   assert(S.sched_setaffinity(0, cpu),
      ("Couldn't set affinity for cpu %s")->format(cpu));
   var cpu_and_node = S.getcpu();
   assert(cpu_and_node.cpu == cpu);
   bound_cpu = cpu;

   bind_to_numa_node (cpu_and_node.node);
}

function unbind_numa_node () {
   if( supports_numa() ) {
      assert(S.set_mempolicy('default'));
   }
   bound_numa_node = null;
}

function bind_to_numa_node (node) {
   if( node == bound_numa_node ) { return; }
   if( ! node ) { return unbind_numa_node(); }
   assert(! bound_numa_node, "already bound");

   if( supports_numa() ) {
      assert(S.set_mempolicy('bind', node));

      // Migrate any pages that might have the wrong affinity.
      var from_mask = assert(S.get_mempolicy(null, null, null, 'mems_allowed')).mask;
      assert(S.migrate_pages(0, from_mask, node));
   }

   bound_numa_node = node;
}

function prevent_preemption(priority) {
   assert(S.sched_setscheduler(0, "fifo", priority || 1),
      'Failed to enable real-time scheduling.  Try running as root.');
}

function selftest () {

   function test_cpu(cpu) {
      var node = cpu_get_numa_node(cpu);
      bind_to_cpu(cpu);
      assert(bound_cpu == cpu);
      assert(bound_numa_node == node);
      assert(S.getcpu().cpu == cpu);
      assert(S.getcpu().node == node);
      bind_to_cpu(null);
      assert(bound_cpu == null);
      assert(bound_numa_node == node);
      assert(S.getcpu().node == node);
      bind_to_numa_node(null);
      assert(bound_cpu == null);
      assert(bound_numa_node == null);
   }

   function test_pci_affinity (pciaddr) {
      check_affinity_for_pci_addresses({pciaddr});
      var node = choose_numa_node_for_pci_addresses({pciaddr}, true);
      bind_to_numa_node(node);
      assert(bound_numa_node == node);
      check_affinity_for_pci_addresses({pciaddr});
      bind_to_numa_node(null);
      assert(bound_numa_node == null);
   }

   print('selftest: numa');
   var cpu_set = S.sched_getaffinity();
   for( cpuid = 0, MAX_CPU ) {
      if( cpu_set->get(cpuid) ) {
         test_cpu(cpuid);
      }
   }
   var pciaddr = os.getenv("SNABB_PCI0");
   if( pciaddr ) {
      test_pci_affinity(pciaddr);
   }
   print('selftest: numa: ok');
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// pmu.lua: Lua interface to the CPU Performance Monitoring Unit
module(..., package.seeall);

// See README.pmu.md for API and examples.

var pmu_cpu = require("lib.pmu_cpu");
var pmu_x86 = require("lib.pmu_x86");
var ffi = require("ffi");
var lib = require("core.lib");

var S = require("syscall");

// defs: counter definitions
//   nil => not initialized
//   false => none available
//   table => name->code mappings
var defs = null;

// enabled: array of names of the enabled counters
var enabled = null;

// Scan the counter definitions for the set of counters that are
// available on the running CPU.
var function scan_available_counters () {
   if( defs ) { return defs; }
   defs = {};
   for( i, set in ipairs(pmu_cpu) ) {
      var cpu, version, kind, list = unpack(set);
      // XXX Only supporting "core" counters at present i.e. the
      // counters built into the CPU core.
      if( cpu == pmu_x86.cpu_model && kind == 'core' ) {
         defs = defs;
         for( k, v in pairs(list) ) { defs[k] = v; }
      }
   }
}

// Return an array containing the CPUs that we have affinity with.
var function cpu_set () {
   var t = {};
   var set = S.sched_getaffinity();
   for( i = 0, 63 ) {
      if( set->get(i) ) { table.insert(t, i); }
   }
   return t;
}

// Return true if PMU functionality is available. 
// Otherwise return false and a string explaining why.
function is_available () {
   if( #cpu_set() != 1 ) {
      return false, "single core cpu affinity required"; 
   }
   if( ! pmu_x86.enable_msr() ) {
      return false, "requires /dev/cpu/*/msr (Linux 'msr' module)";
   }
   if( ! (pmu_x86.ncounters > 0) ) {
      return false, "CPU not supported: " .. pmu_x86.cpu_model;
   }
   scan_available_counters();
   return true;
}

counter_set_t = ffi.typeof("int64_t [$]", pmu_x86.ncounters);

function new_counter_set () {
   return ffi.new(counter_set_t);
}

function to_table (set) {
   var t = {};
   for( i = 1, #enabled ) { t[enabled[i]] = tonumber(set[i-1]); }
   return t;
}

var current_counter_set = null;
var base_counters = ffi.new(counter_set_t);
var tmp_counters = ffi.new(counter_set_t);

function switch_to (set) {
   // Credit the previous counter set for its events
   if( current_counter_set ) {
      pmu_x86.rdpmc_multi(tmp_counters);
      for( i = 0, pmu_x86.ncounters-1 ) {
         var v = tmp_counters[i] - base_counters[i];
         // Account for wrap-around of the 40-bit counter value.
         if( v < 0 ) { v = v + bit.lshift(1, 40); }
         current_counter_set[i] = current_counter_set[i] + v;
      }
   }
   // Switch_To to the new set and "start the clock"
   current_counter_set = set;
   pmu_x86.rdpmc_multi(base_counters);
}

// API function (see above)
function setup (patterns) {
   var avail, err = is_available();
   if( ! avail ) {
      error("PMU not available: " .. err);
   }
   pmu_x86.enable_rdpmc();
   var set = {};
   for( event in pairs(defs) ) {
      for( _, pattern in pairs(patterns || {}) ) {
         if( event->match(pattern) ) { 
            table.insert(set, event); 
         }
      }
   }
   // Allow selecting events by raw code
   for( _, pattern in pairs(patterns || {}) ) {
      if( pattern->match("^0x") ) {
         table.insert(set, pattern); 
      }
   }
   table.sort(set);
   var ndropped = math.max(0, #set - pmu_x86.ngeneral);
   while( (#set - pmu_x86.ngeneral) > 0 ) { table.remove(set); }
   var cpu = cpu_set()[1];
   var used;
   enabled, used = pmu_x86.init_events(cpu, #set);
   for( n = 0, #set-1 ) {
      var code = defs[set[n+1]] || tonumber(set[n+1]);
      pmu_x86.enable_event(cpu, n+used, code);
   }
   for( i = 1, #set ) { table.insert(enabled, set[i]); }
   return ndropped;
}

// API function (see above)
function report (tab, aux) {
   aux = aux || {};
   var data = {};
   for( k,v in pairs(tab) ) {  table.insert(data, {k=k,v=v});  }
   // Sort fixed-purpose counters to come first in definite order
   var fixed = {cycles='0000', ref_cycles='0001', instructions='0002'};
   table.sort(data, function(x,y) {
                       return (fixed[x.k] || x.k) < (fixed[y.k] || y.k);
                    });
   var auxnames, auxvalues = {}, {};
   for( k,v in pairs(aux) ) { 
      table.insert(auxnames,k); 
      table.insert(auxvalues,v); 
   }
   // print titles
   io.write(("%-40s %14s")->format("EVENT", "TOTAL"));
   for( i = 1, #auxnames ) {
      io.write(("%12s")->format("/"..auxnames[i]));
   }
   print();
   // include aux values in results
   for( i = 1, #auxnames ) {
      table.insert(data, {k=auxnames[i], v=auxvalues[i]});
   }
   // print values
   for( i = 1, #data ) {
      io.write(("%-40s %14s")->format(data[i].k, core.lib.comma_value(data[i].v)));
      for( j = 1, #auxnames ) {
         io.write(("%12.3f")->format(tonumber(data[i].v/auxvalues[j])));
      }
      print();
   }
}

// API function (see above)
function measure (f,  events, aux) {
   setup(events);
   var set = new_counter_set();
   switch_to(set);
   var res = f();
   switch_to(null);
   return res, to_table(set);
}

// API function (see above)
function profile (f,  events, aux, quiet) {
   setup(events);
   var set = new_counter_set();
   switch_to(set);
   var res = f();
   switch_to(null);
   if( ! quiet ) { report(to_table(set), aux); }
   return res;
}

function selftest () {
   print("selftest: pmu");
   var avail, err = is_available();
   if( ! avail ) {
      print("PMU not available:");
      print("  "..err);
      print("selftest skipped");
      os.exit(engine.test_skipped_code);
   }
   var n = 0;
   if( type(defs) == 'table' ) { 
      for( k,v in pairs(defs) ) { ++n; }   
   }
   print(tostring(n).." counters found for CPU model "..pmu_x86.cpu_model);
   var nloop = 123456;
   var set = new_counter_set();
   var f = function () {
      var acc = 0;
      for( i = 0, nloop ) { ++acc    ; }
      return 42;
   };
   var events = {"uops_issued.any",
                   "uops_retired.all",
                   "br_inst_retired.conditional",
                   "br_misp_retired.all_branches"};
   var aux = {packet = nloop, breath = math.floor(nloop/128)};
   print("testing profile()");
   assert(profile(f, events, aux) == 42, "profile return value");
   print("testing measure()");
   var val, tab = measure(f);
   assert(val == 42, "measure return value");
   n = 0;
   for( k, v in pairs(tab) ) {
      print('', k, v);
      ++n    ;
   }
   assert(n >= 2);
   print("selftest ok");
}


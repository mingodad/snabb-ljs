module(..., package.seeall)

var ffi = require('ffi')
var C = ffi.C
var dasm = require('dasm')

|.arch x64
|.actionlist actions

Rand = {}


// integer arguments are passed in RDI, RSI, RDX, RCX, R8, and R9
// the return value is in rax
Rand.u32 = (function() {
  var Dst = dasm.new(actions)
| mov eax, edi
| shl eax, 13
| xor edi, eax
| mov eax, edi
| shr eax, 17
| xor edi, eax
| mov eax, edi
| shl edi, 5
| xor eax, edi
| ret
  Rand.code_u32 = Dst->build()
  return ffi.cast("uint32_t (*) (uint32_t)", Rand.code_u32)
})()

function Rand::selftest() {
   var pmu = require("lib.pmu")
   var v = 0
   var million = 1000000
   var function test() {
      for( i=0, 500*million ) {
         v = Rand.u32(v)
      }
   }
   var avail, err = pmu.is_available()
   var start = C.get_time_ns()
   if( ! avail ) {
      print("PMU not available:")
      print("  "..err)
      test()
   } else {
      pmu.profile(test, {}, { random_u32 = 500*million })
   }
   print(tonumber((C.get_time_ns() - start))/(500*million))
}

return Rand


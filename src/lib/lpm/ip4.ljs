module(..., package.seeall);
var ffi = require("ffi");
var C = ffi.C;

var band, bor, rshift, lshift = bit.band, bit.bor, bit.rshift, bit.lshift;

IP4 = {};
ip4_t = ffi.typeof("uint32_t");

function IP4.parse_cidr (str) {
   var _,_,ip,len = string.find(str, "([^%/]+)%/(%d+)");
   ip = assert(IP4.parse(ip));
   len = assert(tonumber(len), str);
   assert(0 <= len && len <= 32, str);
   return ip, len;
}

function IP4.parse (str) {
   var _,_,a,b,c,d = string.find(str, "^(%d+).(%d+).(%d+).(%d+)$");
   assert(a, "Invalid IP " .. str);
   a,b,c,d = tonumber(a), tonumber(b), tonumber(c), tonumber(d);
   assert(a <= 255 && b <= 255 && c <= 255 && d <= 255, "Invalid IP " .. str);
   return tonumber(ffi.cast("uint32_t", a * 2**24 + b * 2**16 + c * 2**8 + d));
}
function IP4.tostring (ip) {
   return string.format("%d.%d.%d.%d",
   band(rshift(ip, 24), 255),
   band(rshift(ip, 16), 255),
   band(rshift(ip, 8), 255),
   band(ip, 255)
   );
}
function IP4.eq (ipa, ipb) {
   return ipa == ipb;
}
function IP4.get_bit (ip, offset) {
   assert(offset >= 0);
   assert(offset < 32);
   return tonumber(bit.band(bit.rshift(ip, 31-offset), 1));
}
IP4.masked = (function() {
   var arr = ffi.new("int32_t[?]", 33);
   for( i=1,33 ) {
      arr[i] = bit.bnot(2**(32-i)-1);
   }
   return function(ip, length) {
      return ffi.cast("uint32_t", bit.band(ip, arr[length]));
   };
})();

function IP4.commonlength (ip1, ip2) {
   var v = bit.bxor(ip1, ip2);
   for( i = 0, 31 ) {
      if( IP4.get_bit(v, i) == 1 ) {
         return i;
      }
   }
   return 32;
}

function selftest_get_bit () {
   print("selftest_get_bit()");
   var ip = IP4.parse("192.0.0.3");
   var g = IP4.get_bit;
   assert(g(ip, 0) == 1);
   assert(g(ip, 1) == 1);
   assert(g(ip, 2) == 0);
   assert(g(ip, 3) == 0);
   assert(g(ip, 23) == 0);
   assert(g(ip, 29) == 0);
   assert(g(ip, 30) == 1);
   assert(g(ip, 31) == 1);
   ip = IP4.parse("0.0.0.1");
   assert(g(ip,0) == 0);
   assert(g(ip,31) == 1);
}
function selftest_masked () {
   var p = IP4.parse;
   var m = IP4.masked;
   print("selftest_masked()");
   assert(m(p("216.0.0.0"),8) == m(p("216.1.1.1"), 8));
   assert(m(p("216.0.0.0"),9) == m(p("216.1.1.1"), 9));
   assert(m(p("216.0.0.0"),16) != m(p("216.1.1.1"), 16));
   assert(m(p("216.0.0.0"),16) == m(p("216.1.1.1"), 8));
   assert(m(p("216.1.1.1"),32) == m(p("216.1.1.1"), 32));
   assert(m(p("216.0.0.0"),32) != m(p("216.1.1.1"), 32));
   assert(m(p("0.0.0.0"),0) == m(p("216.1.1.1"), 0));
}
function selftest_commonlength () {
   print("selftest_commonlength()");
   var p = IP4.parse;
   var c = IP4.commonlength;
   assert(32 == c(p("255.0.0.0"), p("255.0.0.0")));
   assert(31 == c(p("255.0.0.0"), p("255.0.0.1")));
   assert(30 == c(p("255.0.0.0"), p("255.0.0.2")));
   assert(30 == c(p("255.0.0.0"), p("255.0.0.3")));
   assert(8  == c(p("255.0.0.0"), p("255.128.0.3")));
   assert(0  == c(p("0.0.0.0"), p("255.128.0.3")));
   assert(32 == c(p("0.0.0.0"), p("0.0.0.0")));
}
function selftest_parse () {
   print("selftest_parse()");
   assert(IP4.tostring(IP4.parse("255.255.255.255")) == "255.255.255.255");
   assert(IP4.tostring(IP4.parse("0.0.0.0")) == "0.0.0.0");
   assert(IP4.tostring(IP4.parse("1.1.1.1")) == "1.1.1.1");
   assert(IP4.tostring(IP4.parse("255.255.1.1")) == "255.255.1.1");
   assert(IP4.parse("1.1.1.1") == 2**24+2**16+2**8+1);
   assert(IP4.parse("1.1.1.255") == 2**24+2**16+2**8+255);
   assert(IP4.parse("255.1.1.255") == 255*2**24+2**16+2**8+255);
   var a = IP4.parse("1.2.3.4");
   var b = IP4.parse("2.2.2.2");
   a = b;
   assert(IP4.tostring(a) == "2.2.2.2");
}

function IP4.selftest () {
   selftest_parse();
   selftest_masked();
   selftest_get_bit();
   selftest_commonlength();
   var pmu = require("lib.pmu");
   var avail, err = pmu.is_available();
   if( ! avail ) {
      print("PMU not available:");
      print("  "..err);
      print("Skipping benchmark.");
   } else {
      var gbit = IP4.get_bit;
      pmu.profile(function() {
         var c = 0;
         for( i = 0,1000000 ) {
            c = c + IP4.commonlength(i,i);
         }
      });
   }
}

return IP4;

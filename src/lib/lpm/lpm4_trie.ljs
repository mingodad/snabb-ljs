module(..., package.seeall);

var ffi = require("ffi");
var C = ffi.C;
var lpm4 = require("lib.lpm.lpm4");
var coro = require("coroutine");
var bit = require("bit");
var ip4 = require("lib.lpm.ip4");
var masked = ip4.masked;
var get_bit = ip4.get_bit;
var commonlength = ip4.commonlength;

LPM4_trie = setmetatable({ alloc_storable = { "lpm4_trie" } }, { __index = lpm4.LPM4 });

var trie = ffi.typeof([=[
  struct {
    uint32_t ip;
    int32_t key;
    int32_t length;
    int32_t down[2];
  }
]=]);

function LPM4_trie::new() {
  var self = lpm4.LPM4.new(this);
  var count = 5000000;
  self->alloc("lpm4_trie", trie, count, 1);
  return self;
}

function LPM4_trie::get_node() {
  var ts = this.lpm4_trie;
  var t = this->lpm4_trie_new();
  ts[t].ip = 0;
  ts[t].key = 0;
  ts[t].down[0] = 0;
  ts[t].down[1] = 0;
  return t;
}
function LPM4_trie::return_node(t) {
  this->lpm4_trie_free(t);
}

function LPM4_trie::set_trie(t, ip, length, key, left, right) {
  left = left || 0;
  right = right || 0;
  var ts = this.lpm4_trie;
  ts[t].ip = masked(ip, length);
  ts[t].length = length;
  ts[t].key = key;
  ts[t].down[0] = left;
  ts[t].down[1] = right;
  // This is great for debugging but for some reason has an unreasonably
  // high performance hit :S
  // FIXME
  //self:debug_print(string.format("setting %4d %13s/%-2d  %4d %4d %4d", t,
  //                         self:ip_to_string(ts[t].ip), length, key,
  //                         ts[t].down[0], ts[t].down[1]))
}
function LPM4_trie::debug_print(str) {
  if( this.debug ) { print(str); }
}
function LPM4_trie::add(ip, length, key) {
  var ts = this.lpm4_trie;
  var t = 0;
  while( true ) {
    if( ts[t].ip == ip && ts[t].length == length ) {
      // prefix already in trie, just update it
      this->set_trie(t, ip, length, key, ts[t].down[0], ts[t].down[1]);
      return;
    } else if( ts[t].ip == ip && ts[t].length > length ) {
      // ts[t] is more specific than ip/length that is being added
      // add ip / length as the parent of ts[t]
      var new = this->get_node();
      this->set_trie(new, ts[t].ip, ts[t].length, ts[t].key, ts[t].down[0], ts[t].down[1]);
      this->set_trie(t, ip, length, key, new);
      return;
    } else if( ts[t].ip == masked(ip, ts[t].length) ) {
      // ts[t] is on the path to the node we want
      var b = get_bit(ip, ts[t].length);
      if( ts[t].down[b] != 0 ) {
        // keep going down the tree
          t = ts[t].down[b];
      } else {
        // add a leaf
        ts[t].down[b] = this->get_node();
        this->set_trie(ts[t].down[b], ip, length, key);
        return;
      }
    } else {
      // A leaf node has been found, that partially matches ip
      var new = this->get_node();
      // copy the leaf into new
      this->set_trie(new, ts[t].ip, ts[t].length, ts[t].key,
        ts[t].down[0], ts[t].down[1]);
      // turn the leaf into an internal node, that has no key
      var clength = math.min(commonlength(ts[t].ip, ip), length);
      this->set_trie(t, ip, clength, 0);

      if( ts[t].length == length ) {
        var b = get_bit(ts[new].ip, ts[t].length);
      // if the internal node is the ip/length to add set the key
         ts[t].key = key;
         ts[t].down[b] = new;
      } else {
        // otherwise create a new leaf for it
        var b = get_bit(ip, ts[t].length);
        var new2 = this->get_node();
        this->set_trie(new2, ip, length, key);
        // attach it to the internal node
        ts[t].down[b] = new2;
        // attach the old leaf to the internal node
        ts[t].down[math.abs(b-1)] = new;
      }
      return;
    }
  }
}
function LPM4_trie::remove(ip, length) {

  var ts = this.lpm4_trie;
  var t = 0;
  var prevt;
  while( true ) {
    if( ts[t].ip == ip && ts[t].length == length ) {
      // Delete the t
      if( ts[t].down[0] == 0 && ts[t].down[1] == 0 ) {
        // there are no children
        if( t == 0 ) {
          // it's the root of the tree just remove the key
          ts[t].key = 0;
          return;
        } else if( ts[prevt].down[0] == t ) {
          // it's the left hand leaf delete parent ptr
          ts[prevt].down[0] = 0;
        } else {
          // it's the right hand leaf delete parent ptr
          ts[prevt].down[1] = 0;
        }
        this->return_node(t);
        return;
      } else if( ts[t].down[0] != 0 && ts[t].down[1] != 0 ) {
        // it's an internal node just remove the key
        ts[t].key = 0;
        return;
      } else if( ts[t].down[0] == 0 ) {
        // it has a right hand leaf pull that up the tree
        var u = ts[t].down[1];
        var ue = ts[u];
        this->set_trie(t, ue.ip, ue.length, ue.key, ue.down[0], ue.down[1]);
        this->return_node(u);
        return;
      } else if( ts[t].down[1] == 0 ) {
        // it has a left hand leaf pull that up the tree
        var u = ts[t].down[0];
        var ue = ts[u];
        this->set_trie(t, ue.ip, ue.length, ue.key, ue.down[0], ue.down[1]);
        this->return_node(u);
        return;
      }
    }
    // keep track of the parent
    prevt = t;
    // traverse the tree
    var b = get_bit(ip, ts[t].length);
    if( ts[t].down[b] != 0 ) {
      t = ts[t].down[b];
    } else {
      return;
    }
  }

}

function LPM4_trie::entries() {
  var ts = this.lpm4_trie;
  var ent = ffi.new(lpm4.entry);
  // carry out a preorder tree traversal which sorts by ip and tie breaks with
  // length.
  // Use coroutines https://www.lua.org/pil/9.3.html
  var function traverse(t) {
    t = t || 0;
    if( this.debug ) {
      print(string.format("%15s/%-2d %6d %6d %6d %6d",
        ip4.tostring(ts[t].ip),
        ts[t].length,
        ts[t].key,
        t,
        ts[t].down[0],
        ts[t].down[1]
      ));
    }
    if( ts[t].key != 0 ) {
      ent.ip, ent.length, ent.key = ts[t].ip, ts[t].length, ts[t].key;
      coro.yield(ent);
    }
    if( ts[t].down[0] != 0 ) {
      traverse(ts[t].down[0]);
    }
    if( ts[t].down[1] != 0 ) {
      traverse(ts[t].down[1]);
    }
  }
  return coro.wrap(function() { traverse(); });
}
function LPM4_trie::has_child(ip, length) {
  var ts = this.lpm4_trie;
  var t = this->search_trie(ip, length, true);
  if( ts[t].ip == ip && ts[t].length == length ) {
    return ts[t].down[0] != 0 || ts[t].down[1] != 0;
  }
  assert(ts[t].length < length);
  var b = get_bit(ip, ts[t].length);
  if( ts[t].down[b] == 0 ) {
    return false;
  } else if( masked(ts[ts[t].down[b]].ip, length) == masked(ip, length) ) {
    return true;
  }
}
function LPM4_trie::search_trie(ip, length, internal) {
  var ts = this.lpm4_trie;
  var t = 0;
  length = length || 32;
  var prevt;
  internal = internal || false;
  while( true ) {
    if( masked(ts[t].ip, ts[t].length) != masked(ip, ts[t].length) ) {
      return prevt;
    }
    if( ts[t].length > length ) {
      return prevt;
    }
    if( ts[t].length == 32 ) { return t; }
    if( ts[t].key != 0 || internal ) { prevt = t; }
    var b = get_bit(ip, ts[t].length);
    if( ts[t].down[b] != 0 ) {
      t = ts[t].down[b];
    } else {
      return prevt;
    }
  }
}
function LPM4_trie::search_entry(ip) {
  var indx = this->search_trie(ip);
  if( indx == null ) { return; }
  var ent = ffi.new(lpm4.entry);
  var ts = this.lpm4_trie;
  ent.ip = ts[indx].ip;
  ent.length = ts[indx].length;
  ent.key = ts[indx].key;
  return ent;
}
function selftest_has_child() {
  var f = LPM4_trie->new();
  f->add_string("192.0.0.0/8", 1);
  f->add_string("192.64.0.0/11", 2);
  f->add_string("192.32.0.0/11", 3);
  assert(f->has_child(ip4.parse("128.0.0.0"),1) == true);
  assert(f->has_child(ip4.parse("192.0.0.0"),8) == true);
  assert(f->has_child(ip4.parse("192.0.0.0"),8) == true);
  assert(f->has_child(ip4.parse("192.64.0.0"),10) == true);
}

function selftest() {
  var f = LPM4_trie->new();
  assert(1 == f->get_node());
  assert(2 == f->get_node());
  assert(3 == f->get_node());
  f->return_node(1);
  assert(1 == f->get_node());
  f->return_node(2);
  f->return_node(3);
  f->return_node(1);
  assert(1 == f->get_node());
  assert(3 == f->get_node());
  assert(2 == f->get_node());

  f = LPM4_trie->new();
  f->add_string("0.0.0.0/0",700);
  f->add_string("128.0.0.0/8",701);
  f->add_string("192.0.0.0/8",702);
  f->add_string("192.0.0.0/16",703);
  f->add_string("224.0.0.0/8",704);

  assert(700 == f->search_string("127.1.1.1"));
  assert(701 == f->search_string("128.1.1.1"));
  assert(702 == f->search_string("192.168.0.0"));
  assert(703 == f->search_string("192.0.0.1"));
  assert(704 == f->search_string("224.1.1.1"));
  assert(700 == f->search_string("255.255.255.255"));
  assert(f.lpm4_trie[f->search_trie(ip4.parse("0.0.0.0"),0)].key == 700);
  assert(f.lpm4_trie[f->search_trie(ip4.parse("128.1.1.1"),0)].key == 700);
  assert(f.lpm4_trie[f->search_trie(ip4.parse("128.1.1.1"),8)].key == 701);
  assert(f.lpm4_trie[f->search_trie(ip4.parse("192.0.0.1"),8)].key == 702);
  assert(f.lpm4_trie[f->search_trie(ip4.parse("192.0.0.0"),16)].key == 703);
  assert(f.lpm4_trie[f->search_trie(ip4.parse("255.255.255.255"),32)].key == 700);

  f->remove_string("192.0.0.0/8");
  f->remove_string("224.0.0.0/8");
  assert(700 == f->search_string("127.1.1.1"));
  assert(701 == f->search_string("128.1.1.1"));
  assert(700 == f->search_string("192.168.0.0"));
  assert(703 == f->search_string("192.0.0.1"));
  assert(700 == f->search_string("224.1.1.1"));
  assert(700 == f->search_string("255.255.255.255"));

  f = LPM4_trie->new();
  f->add_string("0.0.0.0/0", 1118);
  f->add_string("148.102.0.0/15", 22405);
  f->add_string("148.107.83.0/24", 19626);
  f->add_string("148.96.0.0/12", 22604);
  assert(1118 == f->search_string("1.1.1.1"));
  assert(22405 == f->search_string("148.102.0.1"));
  assert(19626 == f->search_string("148.107.83.1"));
  assert(22604 == f->search_string("148.96.0.0"));

  f = LPM4_trie->new();
  f->add_string("0.0.0.0/0", 1118);
  f->add_string("135.86.103.0/24", 8758);
  f->add_string("135.86.64.0/18", 5807);
  assert(1118 == f->search_string("1.1.1.1"));
  assert(8758 == f->search_string("135.86.103.1"));
  assert(5807 == f->search_string("135.86.110.232"));

  f = LPM4_trie->new();
  f->add_string("0.0.0.0/0", 1118);
  f->add_string("84.125.102.0/24", 25928);
  f->add_string("84.125.96.0/19", 7065);
  assert(1118 == f->search_string("1.1.1.1"));
  assert(7065 == f->search_string("84.125.96.0"));
  assert(7065 == f->search_string("84.125.120.73"));
  assert(25928 == f->search_string("84.125.102.0"));

  f = LPM4_trie->new();
  f->add_string("150.171.100.0/24", 29171);
  f->add_string("150.171.108.0/22", 21173);
  f->add_string("150.171.96.0/19", 12159);
  assert(29171 == f->search_string("150.171.100.1"));
  assert(21173 == f->search_string("150.171.108.1"));
  assert(12159 == f->search_string("150.171.96.1"));

  selftest_has_child();

  f = LPM4_trie->new();
  f->add_string("0.0.0.10/32", 10);
  assert(f->search_string("0.0.0.10") == 10);

  // LPM4_trie is slow, compared to the other algorithms
  // run 1000,000 lookups to benchmark
  LPM4_trie->selftest({}, 1000000);
}

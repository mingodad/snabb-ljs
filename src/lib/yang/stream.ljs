module(..., package.seeall);

var ffi = require("ffi");
var S = require("syscall");
var lib = require("core.lib");

var function round_up(x, y) { return y*math.ceil(x/y); }

function open_output_byte_stream(filename) {
   var fd, err =
      S.open(filename, "creat, wronly, trunc", "rusr, wusr, rgrp, roth");
   if( ! fd ) {
      error("error opening output file "..filename..": "..tostring(err));
   }
   var ret = { written = 0, name = filename };
   function ret::close() {
      fd->close();
   }
   function ret::error(msg) {
      this->close();
      error('while writing file '..filename..': '..msg);
   }
   function ret::write(ptr, size) {
      assert(size);
      ptr = ffi.cast("uint8_t*", ptr);
      var to_write = size;
      while( to_write > 0 ) {
         var written, err = S.write(fd, ptr, to_write);
         if( ! written ) { this->error(err); }
         ptr +=   written;
         this.written = this.written + written;
         to_write -=   written;
      }
   }
   function ret::write_ptr(ptr, type) {
      assert(ffi.sizeof(ptr) == ffi.sizeof(type));
      this->align(ffi.alignof(type));
      this->write(ptr, ffi.sizeof(type));
   }
   function ret::rewind() {
      fd->seek(0, 'set');
      ret.written = 0; // more of a position at this point
   }
   function ret::write_array(ptr, type, count) {
      this->align(ffi.alignof(type));
      this->write(ptr, ffi.sizeof(type) * count);
   }
   function ret::align(alignment) {
      var padding = round_up(this.written, alignment) - this.written;
      this->write(string.rep(' ', padding), padding);
   }
   return ret;
}

var function mktemp(name, mode) {
   if( ! mode ) { mode = "rusr, wusr, rgrp, roth"; }
   // FIXME: If nothing seeds math.random, this produces completely
   // predictable numbers.
   var t = math.random(1e7);
   var tmpnam, fd, err;
   for( i = t, t+10 ) {
      tmpnam = name .. '.' .. i;
      fd, err = S.open(tmpnam, "creat, wronly, excl", mode);
      if( fd ) {
         fd->close();
         return tmpnam, null;
      }
      ++i    ;
   }
   return null, err;
}

function open_temporary_output_byte_stream(target) {
   var tmp_file, err = mktemp(target);
   if( ! tmp_file ) {
      var dir = lib.dirname(target);
      error("failed to create temporary file in "..dir..": "..tostring(err));
   }
   var stream = open_output_byte_stream(tmp_file);
   function stream::close_and_rename() {
      this->close();
      var res, err = S.rename(tmp_file, target);
      if( ! res ) {
         error("failed to rename "..tmp_file.." to "..target..": "..err);
      }
   }
   return stream;
}

// FIXME: Try to copy file into huge pages?
function open_input_byte_stream(filename) {
   var fd, err = S.open(filename, "rdonly");
   if( ! fd ) { return 
      error("error opening "..filename..": "..tostring(err));
   }
   var stat = S.fstat(fd);
   var size = stat.size;
   var mem;
   mem, err = S.mmap(null, size, 'read, write', 'private', fd, 0);
   fd->close();
   if( ! mem ) { error("mmap failed: " .. tostring(err)); }
   mem = ffi.cast("uint8_t*", mem);
   var pos = 0;
   var ret = {
      name=filename,
      mtime_sec=stat.st_mtime,
      mtime_nsec=stat.st_mtime_nsec
   };
   function ret::close() {
      // FIXME: Currently we don't unmap any memory.
      // S.munmap(mem, size)
      mem, pos = null, null;
   }
   function ret::error(msg) {
      error('while reading file '..filename..': '..msg);
   }
   function ret::read(count) {
      assert(count >= 0);
      var ptr = mem + pos;
      pos +=   count;
      if( pos > size ) {
         this->error('unexpected EOF');
      }
      return ptr;
   }
   function ret::align(alignment) {
      this->read(round_up(pos, alignment) - pos);
   }
   function ret::seek(new_pos) {
      if( new_pos == null ) { return pos; }
      assert(new_pos >= 0);
      assert(new_pos <= size);
      pos = new_pos;
   }
   function ret::read_ptr(type) {
      ret->align(ffi.alignof(type));
      return ffi.cast(ffi.typeof('$*', type), ret->read(ffi.sizeof(type)));
   }
   function ret::read_array(type, count) {
      ret->align(ffi.alignof(type));
      return ffi.cast(ffi.typeof('$*', type),
                      ret->read(ffi.sizeof(type) * count));
   }
   function ret::read_char() {
      return ffi.string(ret->read(1), 1);
   }
   function ret::read_string() {
      var count = size - pos;
      return ffi.string(ret->read(count), count);
   }
   function ret::as_text_stream(len) {
      var end_pos = size;
      if( len ) { end_pos = pos + len; }
      return {
         name = ret.name,
         mtime_sec = ret.mtime_sec,
         mtime_nsec = ret.mtime_nsec,
         read = function(this, n) {
            assert(n==1);
            if( pos == end_pos ) { return null; }
            return ret->read_char();
         },
         close = function() { ret->close(); }
      };
   }
   return ret;
}

// You're often better off using Lua's built-in files.  This is here
// because it gives a file-like object whose FD you can query, for
// example to get its mtime.
function open_input_text_stream(filename) {
   return open_input_byte_stream(filename)->as_text_stream();
}

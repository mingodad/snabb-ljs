// Use of this source code is governed by the Apache 2.0 license; see
// COPYING.
module(..., package.seeall);

var util = require("lib.yang.util");
var ipv4 = require("lib.protocol.ipv4");
var ipv6 = require("lib.protocol.ipv6");
var ffi = require("ffi");
var bit = require("bit");
var ethernet = require("lib.protocol.ethernet");

types = {};

var function integer_type(ctype) {
   var ret = {ctype=ctype};
   var min, max = ffi.new(ctype, 0), ffi.new(ctype, -1);
   if( max < 0 ) {
      // A signed type.  Hackily rely on unsigned types having 'u'
      // prefix.
      max = ffi.new(ctype, bit.rshift(ffi.new('u'..ctype, max), 1));
      min = max - max - max - 1;
   }
   function ret.parse(str, what) {
      return util.tointeger(str, what, min, max);
   }
   function ret.tostring(val) {
      var str = tostring(val);
      if( str->match("ULL") ) { return str->sub(1, -4);
      } else if( str->match("LL") ) { return str->sub(1, -3);
      } else { return str; }
   }
   return ret;
}

types.int8 = integer_type('int8_t');
types.int16 = integer_type('int16_t');
types.int32 = integer_type('int32_t');
types.int64 = integer_type('int64_t');
types.uint8 = integer_type('uint8_t');
types.uint16 = integer_type('uint16_t');
types.uint32 = integer_type('uint32_t');
types.uint64 = integer_type('uint64_t');

var function unimplemented(type_name) {
   var ret = {};
   function ret.parse(str, what) {
      error('unimplemented '..type_name..' when parsing '..what);
   }
   function ret.tostring(val) {
      return tostring(val);
   }
   return ret;
}

types.binary = unimplemented('binary');
types.bits = unimplemented('bits');

types.boolean = {ctype='bool'};
function types.boolean.parse(str, what) {
   str = assert(str, 'missing value for '..what);
   if( str == 'true' ) { return true; }
   if( str == 'false' ) { return false; }
   error('bad boolean value: '..str);
}
function types.boolean.tostring(val) {
   return tostring(val);
}

// FIXME: We lose precision by representing a decimal64 as a double.
types.decimal64 = {ctype='double'};
function types.decimal64.parse(str, what) {
   str = assert(str, 'missing value for '..what);
   return assert(tonumber(str), 'not a number: '..str);
}
function types.decimal64.tostring(val) {
   // FIXME: Make sure we are not given too many digits after the
   // decimal point.
   return tostring(val);
}

types.empty = {};
function types.empty.parse (str, what) {
   return assert(str == null, "not empty value for "..what);
}
function types.empty.tostring (val) {
   return "";
}

types.identityref = {};
function types.identityref.parse(str, what) {
   // References are expanded in the validation phase.
   return assert(str, 'missing value for '..what);
}
function types.identityref.tostring(val) {
   return val;
}

types['instance-identifier'] = unimplemented('instance-identifier');
types.leafref = unimplemented('leafref');

types.string = {};
function types.string.parse(str, what) {
   return assert(str, 'missing value for '..what);
}
function types.string.tostring(val) {
   return val;
}

types.enumeration = {};
function types.enumeration.parse(str, what) {
   return assert(str, 'missing value for '..what);
}
function types.enumeration.tostring(val) {
   return val;
}

types.union = unimplemented('union');

types['ipv4-address'] = {
   ctype = 'uint32_t',
   parse = function(str, what) { return util.ipv4_pton(str); },
   tostring = function(val) { return util.ipv4_ntop(val); }
};

types['legacy-ipv4-address'] = {
   ctype = 'uint8_t[4]',
   parse = function(str, what) { return assert(ipv4->pton(str)); },
   tostring = function(val) { return ipv4->ntop(val); }
};

types['ipv6-address'] = {
   ctype = 'uint8_t[16]',
   parse = function(str, what) { return assert(ipv6->pton(str)); },
   tostring = function(val) { return ipv6->ntop(val); }
};

types['mac-address'] = {
   ctype = 'uint8_t[6]',
   parse = function(str, what) { return assert(ethernet->pton(str)); },
   tostring = function(val) { return ethernet->ntop(val); }
};

types['ipv4-prefix'] = {
   ctype = 'struct { uint8_t prefix[4]; uint8_t len; }',
   parse = function(str, what) {
      var prefix, len = str->match('^([^/]+)/(.*)$');
      return { ipv4_pton(prefix), util.tointeger(len, 1, 32) };
   },
   tostring = function(val) { return ipv4_ntop(val[1])..'/'..tostring(val[2]); }
};

types['ipv6-prefix'] = {
   ctype = 'struct { uint8_t prefix[16]; uint8_t len; }',
   parse = function(str, what) {
      var prefix, len = str->match('^([^/]+)/(.*)$');
      return { assert(ipv6->pton(prefix)), util.tointeger(len, 1, 128) };
   },
   tostring = function(val) { return ipv6->ntop(val[1])..'/'..tostring(val[2]); }
};

function selftest() {
   assert(types['uint8'].parse('0') == 0);
   assert(types['uint8'].parse('255') == 255);
   assert(! pcall(types['uint8'].parse, '256'));
   assert(types['int8'].parse('-128') == -128);
   assert(types['int8'].parse('0') == 0);
   assert(types['int8'].parse('127') == 127);
   assert(! pcall(types['int8'].parse, '128'));
}

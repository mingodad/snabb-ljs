// Use of this source code is governed by the Apache 2.0 license; see
// COPYING.
module(..., package.seeall);

var schema = require("lib.yang.schema");
var data = require("lib.yang.data");
var util = require("lib.yang.util");

function prepare_callee(schema_name) {
   var schema = schema.load_schema_by_name(schema_name);
   return {
      parse_input = data.rpc_input_parser_from_schema(schema),
      print_output = data.rpc_output_printer_from_schema(schema)
   };
}

function prepare_caller(schema_name) {
   var schema = schema.load_schema_by_name('snabb-config-leader-v1');
   return {
      print_input = data.rpc_input_printer_from_schema(schema),
      parse_output = data.rpc_output_parser_from_schema(schema)
   };
}

function prepare_calls(caller, calls) {
   var str = caller.print_input(calls, util.string_io_file());
   var function parse_responses(str) {
      var responses = caller.parse_output(str);
      assert(#responses == #calls);
      var stripped_responses = {};
      for( i=1,#calls ) {
         assert(responses[i].id == calls[i].id);
         table.insert(stripped_responses, responses[i].data);
      }
      return stripped_responses;
   }
   return str, parse_responses;
}

function prepare_call(caller, id, data) {
   var str, parse_responses = prepare_calls(caller, {{id=id, data=data}});
   var function parse_response(str) { return parse_responses(str)[1]; }
   return str, parse_response;
}

function handle_calls(callee, str, handle) {
   var responses = {};
   for( _,call in ipairs(callee.parse_input(str)) ) {
      table.insert(responses,
                   { id=call.id, data=handle(call.id, call.data) });
   }
   return callee.print_output(responses, util.string_io_file());
}

function dispatch_handler(obj, prefix, trace) {
   prefix = prefix || 'rpc_';
   var normalize_id = data.normalize_id;
   return function(id, data) {
      if( trace ) { trace->record(id, data); }
      id = prefix..normalize_id(id);
      var f = assert(obj[id], 'handler not found: '..id);
      return f(obj, data);
   };
}

function selftest() {
   print('selftest: lib.yang.rpc');
   var caller = prepare_caller('snabb-config-leader-v1');
   var callee = prepare_callee('snabb-config-leader-v1');
   var data = { schema = 'foo' };
   var call_str, parse_response = prepare_call(caller, 'get-config', data);
   var handler = {};
   function handler::rpc_get_config(data) {
      return { config='pong '..data.schema };
   }
   var response_str = handle_calls(callee, call_str,
                                     dispatch_handler(handler));
   var response = parse_response(response_str);
   assert(response.config == 'pong foo');
   print('selftest: ok');
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// This module can be used to parse a path based on a yang schema (or its
// derivative grammar) and produce a lua table which is a native lua way
// of representing a path. The path provided is a subset of XPath supporting
// named keys such as [addr=1.2.3.4] and also basic positional querying
// for arrays e.g [position()=1] for the first element.
//
// The structure of the path is dependent on the type the node is. The
// conversions are as follows:
//
// Scalar fields:
//    A lua string of the member name
// Struct fields:
//    A lua string of the member name
// Array fields:
//    This is a table which has a "name" property specifying member
//    name and a "key" field which is a 1 based integer to specify the
//    position in the array.
// Table fields:
//    This is a table which has a "name" property specifying member
//    name and has a "keys" (not key) property which is either:
//       - A string representing the key if the table is string keyed.
//       - A lua table with corrisponding leaf names as the key and the
//         value as the value.
module(..., package.seeall);

var equal = require("core.lib").equal;
var datalib = require("lib.yang.data");
var normalize_id = datalib.normalize_id;

var function table_keys(t) {
   var ret = {};
   for( k, v in pairs(t) ) { table.insert(ret, k); }
   return ret;
}

var syntax_error = function (str, pos) {
   var header = "Syntax error in ";
   io.stderr->write(header..str.."\n");
   io.stderr->write(string.rep(" ", #header + pos-1));
   io.stderr->write("^\n");
   os.exit(1);
};

var function extract_parts (fragment) {
   var rtn = {query={}};
   var pos;
   function consume (char) {
      if( fragment->sub(pos, pos) != char ) {
         syntax_error(fragment, pos);
      }
      ++pos    ;
   }
   function eol () {
      return pos > #fragment;
   }
   function token () {
      var ret, new_pos = fragment->match("([^=%]]+)()", pos);
      if( ! ret ) {
         syntax_error(fragment, pos);
      }
      pos = new_pos;
      return ret;
   }
   rtn.name, pos = string.match(fragment, "([^%[]+)()");
   while( ! eol() ) {
      consume('[', pos);
      var k = token();
      consume('=');
      var v = token();
      consume(']');
      rtn.query[k] = v;
   }
   return rtn;
}

// Finds the grammar node for a fragment in a given grammar.
var function extract_grammar_node(grammar, name) {
   var handlers = {};
   function handlers.struct () { return grammar.members[name]; }
   function handlers.table () {
      if( grammar.keys[name] == null ) {
         return grammar.values[name];
      } else {
         return grammar.keys[name];
      }
   }
   function handlers.choice () {
      for( case_name, case in pairs(grammar.choices) ) {
         if( case[name] != null ) { return case[name]; }
      }
   }
   return assert(assert(handlers[grammar.type], grammar.type)(), name);
}

// Converts an XPath path to a lua array consisting of path componants.
// A path component can then be resolved on a yang data tree:
function convert_path(grammar, path) {
   path = normalize_path(path);
   var handlers = {};
   function handlers.scalar(grammar, fragment) {
      return {name=fragment.name, grammar=grammar};
   }
   function handlers.struct(grammar, fragment) {
      return {name=fragment.name, grammar=grammar};
   }
   function handlers.table(grammar, fragment) {
      return {name=fragment.name, keys=fragment.query, grammar=grammar};
   }
   function handlers.array(grammar, fragment) {
      var position = fragment.query["position()"];
      return {name=fragment.name, key=tonumber(position), grammar=grammar};
   }
   var function handle(grammar, fragment) {
      return assert(handlers[grammar.type], grammar.type)(grammar, fragment);
   }

   if( path == "/" ) { return {}; }

   var ret = {};
   var node = grammar;
   if( path->sub(1, 1) == "/" ) { path = path->sub(2); } // remove leading /
   if( path->sub(-1) == "/" ) { path = path->sub(1, -2); } // remove trailing /
   for( element in path->split("/") ) {
      var parts = extract_parts(element);
      node = extract_grammar_node(node, parts.name);
      var luapath = handle(node, parts);
      table.insert(ret, luapath);
   }
   return ret;
}

function parse_path(path) {
   var ret = {};
   for( element in path->split("/") ) {
      if( element != '' ) { table.insert(ret, extract_parts(element)); }
   }
   return ret;
}

function normalize_path(path) {
   var ret = {};
   for( _,part in ipairs(parse_path(path)) ) {
      var str = part.name;
      var keys = table_keys(part.query);
      table.sort(keys);
      for( _,k in ipairs(keys) ) { str = str..'['..k..'='..part.query[k]..']'; }
      table.insert(ret, str);
   }
   return '/'..table.concat(ret, '/');
}

function selftest() {
   print("selftest: lib.yang.path");
   var schemalib = require("lib.yang.schema");
   var schema_src = [=[module snabb-simple-router {
      namespace snabb:simple-router;
      prefix simple-router;

      import ietf-inet-types {prefix inet;}

      leaf active { type boolean; default true; }
      leaf-list blocked-ips { type inet:ipv4-address; }

      container routes {
         list route {
            key addr;
            leaf addr { type inet:ipv4-address; mandatory true; }
            leaf port { type uint8 { range 0..11; } mandatory true; }
         }
      }}]=];

   var scm = schemalib.load_schema(schema_src, "xpath-test");
   var grammar = datalib.config_grammar_from_schema(scm);

   // Test path to lua path.
   var path = convert_path(grammar,"/routes/route[addr=1.2.3.4]/port");

   assert(path[1].name == "routes");
   assert(path[2].name == "route");
   assert(path[2].keys);
   assert(path[2].keys["addr"] == "1.2.3.4");
   assert(path[3].name == "port");

   path = convert_path(grammar, "/blocked-ips[position()=4]/");
   assert(path[1].name == "blocked-ips");
   assert(path[1].key == 4);

   assert(normalize_path('') == '/');
   assert(normalize_path('//') == '/');
   assert(normalize_path('/') == '/');
   assert(normalize_path('//foo//bar//') == '/foo/bar');
   assert(normalize_path('//foo[b=1][c=2]//bar//') == '/foo[b=1][c=2]/bar');
   assert(normalize_path('//foo[c=1][b=2]//bar//') == '/foo[b=2][c=1]/bar');

   assert(extract_parts('//foo[b=1]'));

   print("selftest: ok");
}

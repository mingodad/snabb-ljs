// Implementation of IPsec ESP using AES-128-GCM with a 12 byte ICV and
// “Extended Sequence Number” (see RFC 4303 and RFC 4106). Provides
// address-family independent encapsulation/decapsulation routines for
// “tunnel mode” and “transport mode” routines for IPv6.
//
// Notes:
//
//  * Wrapping around of the Extended Sequence Number is *not* detected because
//    it is assumed to be an unrealistic scenario as it would take 584 years to
//    overflow the counter when transmitting 10^9 packets per second.
//
//  * decapsulate_transport6: Rejection of IP fragments is *not* implemented
//    because `lib.protocol.ipv6' does not support fragmentation. E.g.
//    fragments will be rejected because they can not be parsed as IPv6
//    packets. If however `lib.protocol.ipv6' were to be updated to be able to
//    parse IP fragments this implementation would have to be updated as well
//    to remain correct. See the “Reassembly” section of RFC 4303 for details:
//    https://tools.ietf.org/html/rfc4303#section-3.4.1
//
module(..., package.seeall);
var header = require("lib.protocol.header");
var datagram = require("lib.protocol.datagram");
var ethernet = require("lib.protocol.ethernet");
var ipv6 = require("lib.protocol.ipv6");
var esp = require("lib.protocol.esp");
var esp_tail = require("lib.protocol.esp_tail");
var aes_128_gcm = require("lib.ipsec.aes_128_gcm");
var seq_no_t = require("lib.ipsec.seq_no_t");
var lib = require("core.lib");
var ffi = require("ffi");
var C = ffi.C;
var logger = lib.logger_new({ rate = 32, module = 'esp' });

require("lib.ipsec.track_seq_no_h");
var window_t = ffi.typeof("uint8_t[?]");

PROTOCOL = 50; // https://tools.ietf.org/html/rfc4303#section-2

var ETHERNET_SIZE = ethernet->sizeof();
var IPV6_SIZE = ipv6->sizeof();
var ESP_SIZE = esp->sizeof();
var ESP_TAIL_SIZE = esp_tail->sizeof();

var TRANSPORT6_PAYLOAD_OFFSET = ETHERNET_SIZE + IPV6_SIZE;

var function padding (a, l) { return (a - l%a) % a; }

function esp_new (conf) {
   assert(conf.mode == "aes-gcm-128-12", "Only supports 'aes-gcm-128-12'.");
   assert(conf.spi, "Need SPI.");

   var o = {
      cipher = aes_128_gcm->new(conf.spi, conf.key, conf.salt),
      spi = conf.spi,
      seq = ffi.new(seq_no_t),
      pad_to = 4, // minimal padding
      esp = esp->new({}),
      esp_tail = esp_tail->new({}),
      ip = ipv6->new({}) // for transport mode
   };

   o.ESP_CTEXT_OVERHEAD = o.cipher.IV_SIZE + ESP_TAIL_SIZE;
   o.ESP_OVERHEAD = ESP_SIZE + o.ESP_CTEXT_OVERHEAD + o.cipher.AUTH_SIZE;

   return o;
}

encrypt = {};

function encrypt::new (conf) {
   return setmetatable(esp_new(conf), {__index=encrypt});
}

// Increment sequence number.
function encrypt::next_seq_no () {
   this.seq.no = this.seq.no + 1;
}

function encrypt::padding (length) {
   // See https://tools.ietf.org/html/rfc4303#section-2.4
   return padding(this.pad_to, length + this.ESP_CTEXT_OVERHEAD);
}

function encrypt::encode_esp_trailer (ptr, next_header, pad_length) {
   this.esp_tail->new_from_mem(ptr, ESP_TAIL_SIZE);
   this.esp_tail->next_header(next_header);
   this.esp_tail->pad_length(pad_length);
}

function encrypt::encrypt_payload (ptr, length) {
   this->next_seq_no();
   var seq, low, high = this.seq, this.seq->low(), this.seq->high();
   this.cipher->encrypt(ptr, seq, low, high, ptr, length, ptr + length);
}

function encrypt::encode_esp_header (ptr) {
   this.esp->new_from_mem(ptr, ESP_SIZE);
   this.esp->spi(this.spi);
   this.esp->seq_no(this.seq->low());
   ffi.copy(ptr + ESP_SIZE, this.seq, this.cipher.IV_SIZE);
}

// Encapsulation in transport mode is performed as follows:
//   1. Grow p to fit ESP overhead
//   2. Append ESP trailer to p
//   3. Encrypt payload+trailer in place
//   4. Move resulting ciphertext to make room for ESP header
//   5. Write ESP header
function encrypt::encapsulate_transport6 (p) {
   if( p.length < TRANSPORT6_PAYLOAD_OFFSET ) { return null; }

   var payload = p.data + TRANSPORT6_PAYLOAD_OFFSET;
   var payload_length = p.length - TRANSPORT6_PAYLOAD_OFFSET;
   var pad_length = this->padding(payload_length);
   var overhead = this.ESP_OVERHEAD + pad_length;
   p = packet.resize(p, p.length + overhead);

   this.ip->new_from_mem(p.data + ETHERNET_SIZE, IPV6_SIZE);

   var tail = payload + payload_length + pad_length;
   this->encode_esp_trailer(tail, this.ip->next_header(), pad_length);

   var ctext_length = payload_length + pad_length + ESP_TAIL_SIZE;
   this->encrypt_payload(payload, ctext_length);

   var ctext = payload + ESP_SIZE + this.cipher.IV_SIZE;
   C.memmove(ctext, payload, ctext_length + this.cipher.AUTH_SIZE);

   this->encode_esp_header(payload);

   this.ip->next_header(PROTOCOL);
   this.ip->payload_length(payload_length + overhead);

   return p;
}

// Encapsulation in tunnel mode is performed as follows:
// (In tunnel mode, the input packet must be an IP frame already stripped of
// its Ethernet header.)
//   1. Grow and shift p to fit ESP overhead
//   2. Append ESP trailer to p
//   3. Encrypt payload+trailer in place
//   4. Write ESP header
// (The resulting packet contains the raw ESP frame, without IP or Ethernet
// headers.)
function encrypt::encapsulate_tunnel (p, next_header) {
   var pad_length = this->padding(p.length);
   var trailer_overhead = pad_length + ESP_TAIL_SIZE + this.cipher.AUTH_SIZE;
   var orig_length = p.length;
   p = packet.resize(p, orig_length + trailer_overhead);

   var tail = p.data + orig_length + pad_length;
   this->encode_esp_trailer(tail, next_header, pad_length);

   var ctext_length = orig_length + pad_length + ESP_TAIL_SIZE;
   this->encrypt_payload(p.data, ctext_length);

   var len = p.length;
   p = packet.shiftright(p, ESP_SIZE + this.cipher.IV_SIZE);

   this->encode_esp_header(p.data);

   return p;
}


decrypt = {};

function decrypt::new (conf) {
   var o = esp_new(conf);

   o.MIN_SIZE = o.ESP_OVERHEAD + padding(o.pad_to, o.ESP_OVERHEAD);
   o.CTEXT_OFFSET = ESP_SIZE + o.cipher.IV_SIZE;
   o.PLAIN_OVERHEAD = ESP_SIZE + o.cipher.IV_SIZE + o.cipher.AUTH_SIZE;

   var window_size = conf.window_size || 128;
   o.window_size = window_size + padding(8, window_size);
   o.window = ffi.new(window_t, o.window_size / 8);

   o.resync_threshold = conf.resync_threshold || 1024;
   o.resync_attempts = conf.resync_attempts || 8;

   o.decap_fail = 0;

   o.auditing = conf.auditing;

   return setmetatable(o, {__index=decrypt});
}

function decrypt::decrypt_payload (ptr, length) {
   // NB: bounds check is performed by caller
   var esp = this.esp->new_from_mem(ptr, esp->sizeof());
   var iv_start = ptr + ESP_SIZE;
   var ctext_start = ptr + this.CTEXT_OFFSET;
   var ctext_length = length - this.PLAIN_OVERHEAD;

   var seq_low = esp->seq_no();
   var seq_high = tonumber(
      C.check_seq_no(seq_low, this.seq.no, this.window, this.window_size)
   );

   var error = null;
   if( seq_high < 0 || ! this.cipher->decrypt(
      ctext_start, seq_low, seq_high, iv_start, ctext_start, ctext_length
   ) ) {
      if( seq_high < 0 ) { error = "replayed";
      } else {                 error = "integrity error"; }

      this.decap_fail = this.decap_fail + 1;
      if( this.decap_fail > this.resync_threshold ) {
         seq_high = this->resync(ptr, length, seq_low, seq_high);
         if( seq_high ) { error = null; }
      }
   }

   if( error ) {
      this->audit(error);
      return null;
   }

   this.decap_fail = 0;
   this.seq.no = C.track_seq_no(
      seq_high, seq_low, this.seq.no, this.window, this.window_size
   );

   var esp_tail_start = ctext_start + ctext_length - ESP_TAIL_SIZE;
   this.esp_tail->new_from_mem(esp_tail_start, ESP_TAIL_SIZE);

   var ptext_length =
      ctext_length - this.esp_tail->pad_length() - ESP_TAIL_SIZE;
   return ctext_start, ptext_length;
}

// Decapsulation in transport mode is performed as follows:
//   1. Parse IP and ESP headers and check Sequence Number
//   2. Decrypt ciphertext in place
//   3. Parse ESP trailer and update IP header
//   4. Move cleartext up to IP payload
//   5. Shrink p by ESP overhead
function decrypt::decapsulate_transport6 (p) {
   if( p.length - TRANSPORT6_PAYLOAD_OFFSET < this.MIN_SIZE ) { return null; }

   this.ip->new_from_mem(p.data + ETHERNET_SIZE, IPV6_SIZE);

   var payload = p.data + TRANSPORT6_PAYLOAD_OFFSET;
   var payload_length = p.length - TRANSPORT6_PAYLOAD_OFFSET;

   var ptext_start, ptext_length =
      this->decrypt_payload(payload, payload_length);

   if( ! ptext_start ) { return null; }

   this.ip->next_header(this.esp_tail->next_header());
   this.ip->payload_length(ptext_length);

   C.memmove(payload, ptext_start, ptext_length);
   p = packet.resize(p, TRANSPORT6_PAYLOAD_OFFSET + ptext_length);

   return p;
}

// Decapsulation in tunnel mode is performed as follows:
// (In tunnel mode, the input packet must be already stripped of its outer
// Ethernet and IP headers.)
//   1. Parse ESP header and check Sequence Number
//   2. Decrypt ciphertext in place
//   3. Parse ESP trailer and shrink p by overhead
// (The resulting packet contains the raw ESP payload (i.e. an IP frame),
// without an Ethernet header.)
function decrypt::decapsulate_tunnel (p) {
   if( p.length < this.MIN_SIZE ) { return null; }

   var ptext_start, ptext_length = this->decrypt_payload(p.data, p.length);

   if( ! ptext_start ) { return null; }

   p = packet.shiftleft(p, this.CTEXT_OFFSET);
   p = packet.resize(p, ptext_length);

   return p, this.esp_tail->next_header();
}

function decrypt::audit (reason) {
   if( ! this.auditing ) { return; }
   // This is the information RFC4303 says we SHOULD log
   logger->log("Rejecting packet (" ..
              "SPI=" .. this.spi .. ", " ..
              "src_addr='" .. this.ip->ntop(this.ip->src()) .. "', " ..
              "dst_addr='" .. this.ip->ntop(this.ip->dst()) .. "', " ..
              "seq_low=" .. this.esp->seq_no() .. ", " ..
              "flow_id=" .. this.ip->flow_label() .. ", " ..
              "reason='" .. reason .. "'" ..
              ")");
}

function decrypt::resync (ptr, length, seq_low, seq_high) {
   var iv_start = ptr + ESP_SIZE;
   var ctext_start = ptr + this.CTEXT_OFFSET;
   var ctext_length = length - this.PLAIN_OVERHEAD;

   if( seq_high < 0 ) {
      // The sequence number looked replayed, we use the last seq_high we have
      // seen
      seq_high = this.seq->high();
   } else {
      // We failed to decrypt in-place, undo the damage to recover the original
      // ctext (ignore bogus auth data)
      this.cipher->encrypt(
         ctext_start, iv_start, seq_low, seq_high, ctext_start, ctext_length
      );
   }

   var p_orig = packet.from_pointer(ptr, length);
   for( i = 1, this.resync_attempts ) {
      ++seq_high    ;
      if( this.cipher->decrypt(
         ctext_start, seq_low, seq_high, iv_start, ctext_start, ctext_length
      ) ) {
         packet.free(p_orig);
         return seq_high;
      } else {
         ffi.copy(ptr, p_orig.data, length);
      }
   }
}


function selftest () {
   var conf = { spi = 0x0,
                  mode = "aes-gcm-128-12",
                  key = "00112233445566778899AABBCCDDEEFF",
                  salt = "00112233",
                  resync_threshold = 16,
                  resync_attempts = 8};
   var enc, dec = encrypt->new(conf), decrypt->new(conf);
   var payload = packet.from_string(
[=[abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ
0123456789]=]
   );
   var d = datagram->new(payload);
   var ip = ipv6->new({});
   ip->payload_length(payload.length);
   d->push(ip);
   d->push(ethernet->new({type=0x86dd}));
   var p = d->packet();
   // Check integrity
   print("original", lib.hexdump(ffi.string(p.data, p.length)));
   var p_enc = assert(enc->encapsulate_transport6(packet.clone(p)),
                        "encapsulation failed");
   print("encrypted", lib.hexdump(ffi.string(p_enc.data, p_enc.length)));
   var p2 = assert(dec->decapsulate_transport6(packet.clone(p_enc)),
                     "decapsulation failed");
   print("decrypted", lib.hexdump(ffi.string(p2.data, p2.length)));
   assert(p2.length == p.length && C.memcmp(p.data, p2.data, p.length) == 0,
          "integrity check failed");
   // ... for tunnel mode
   p_enc = assert(enc->encapsulate_tunnel(packet.clone(p), 42),
                        "encapsulation failed");
   print("enc. (tun)", lib.hexdump(ffi.string(p_enc.data, p_enc.length)));
   var nh;
   p2, nh = dec->decapsulate_tunnel(packet.clone(p_enc));
   assert(p2 && nh == 42, "decapsulation failed");
   print("dec. (tun)", lib.hexdump(ffi.string(p2.data, p2.length)));
   assert(p2.length == p.length && C.memcmp(p.data, p2.data, p.length) == 0,
          "integrity check failed");
   // Check invalid packets.
   assert(! enc->encapsulate_transport6(packet.from_string("invalid")),
          "encapsulated invalid packet");
   assert(! dec->decapsulate_transport6(packet.from_string("invalid")),
          "decapsulated invalid packet");
   // ... for tunnel mode
   assert(! dec->decapsulate_tunnel(packet.from_string("invalid")),
          "decapsulated invalid packet");
   // Check minimum packet.
   var p_min = packet.from_string("012345678901234567890123456789012345678901234567890123");
   p_min.data[18] = 0; // Set IPv6 payload length to zero
   p_min.data[19] = 0; // ...
   assert(p_min.length == TRANSPORT6_PAYLOAD_OFFSET);
   print("original", lib.hexdump(ffi.string(p_min.data, p_min.length)));
   var e_min = assert(enc->encapsulate_transport6(packet.clone(p_min)));
   print("encrypted", lib.hexdump(ffi.string(e_min.data, e_min.length)));
   assert(e_min.length == dec.MIN_SIZE+TRANSPORT6_PAYLOAD_OFFSET);
   e_min = assert(dec->decapsulate_transport6(e_min),
                  "decapsulation of minimum packet failed");
   print("decrypted", lib.hexdump(ffi.string(e_min.data, e_min.length)));
   assert(e_min.length == TRANSPORT6_PAYLOAD_OFFSET);
   assert(p_min.length == e_min.length
          && C.memcmp(p_min.data, e_min.data, p_min.length) == 0,
          "integrity check failed");
   // ... for tunnel mode
   print("original", "(empty)");
   e_min = assert(enc->encapsulate_tunnel(packet.allocate(), 0));
   print("enc. (tun)", lib.hexdump(ffi.string(e_min.data, e_min.length)));
   e_min = assert(dec->decapsulate_tunnel(e_min));
   assert(e_min.length == 0);
   // Tunnel/transport mode independent tests
   for( _, op in ipairs(
      {{encap=function (p) { return enc->encapsulate_transport6(p); },
        decap=function (p) { return dec->decapsulate_transport6(p); }},
       {encap=function (p) { return enc->encapsulate_tunnel(p, 0); },
        decap=function (p) { return dec->decapsulate_tunnel(p); }}}
   ) ) {
      // Check transmitted Sequence Number wrap around
      C.memset(dec.window, 0, dec.window_size / 8); // clear window
      enc.seq.no = 2**32 - 1; // so next encapsulated will be seq 2^32
      dec.seq.no = 2**32 - 1; // pretend to have seen 2^32-1
      var px = op.encap(packet.clone(p));
      assert(op.decap(px),
             "Transmitted Sequence Number wrap around failed.");
      assert(dec.seq->high() == 1 && dec.seq->low() == 0,
             "Lost Sequence Number synchronization.");
      // Check Sequence Number exceeding window
      C.memset(dec.window, 0, dec.window_size / 8); // clear window
      enc.seq.no = 2**32;
      dec.seq.no = 2**32 + dec.window_size + 1;
      px = op.encap(packet.clone(p));
      assert(! op.decap(px),
             "Accepted out of window Sequence Number.");
      assert(dec.seq->high() == 1 && dec.seq->low() == dec.window_size+1,
             "Corrupted Sequence Number.");
      // Test anti-replay: From a set of 15 packets, first send all those
      // that have an even sequence number.  Then, send all 15.  Verify that
      // in the 2nd run, packets with even sequence numbers are rejected while
      // the others are not.
      // Then do the same thing again, but with offset sequence numbers so that
      // we have a 32bit wraparound in the middle.
      //var offset = 0; // close to 2^32 in the 2nd iteration DADBUG definition without use
      for( offset = 0, 2**32-7, 2**32-7 ) { // duh
         C.memset(dec.window, 0, dec.window_size / 8); // clear window
         dec.seq.no = offset;
         for( i = 1+offset, 15+offset ) {
            if( (i % 2 == 0) ) {
               enc.seq.no = i-1; // so next seq will be i
               var xpx = op.encap(packet.clone(p));  //DADBUG 
               assert(op.decap(xpx),
                      "rejected legitimate packet seq=" .. i);
               assert(dec.seq.no == i,
                      "Lost sequence number synchronization");
            }
         }
         for( i = 1+offset, 15+offset ) {
            enc.seq.no = i-1;
            var xpx = op.encap(packet.clone(p)); //DADBUG
            if( (i % 2 == 0) ) {
               assert(! op.decap(xpx),
                      "accepted replayed packet seq=" .. i);
            } else {
               assert(op.decap(xpx),
                      "rejected legitimate packet seq=" .. i);
            }
         }
      }
      // Check that packets from way in the past/way in the future (further
      // than the biggest allowable window size) are rejected This is where we
      // ultimately want resynchronization (wrt. future packets)
      C.memset(dec.window, 0, dec.window_size / 8); // clear window
      dec.seq.no = 2**34 + 42;
      enc.seq.no = 2**36 + 24;
      px = op.encap(packet.clone(p));
      assert(! op.decap(px),
             "accepted packet from way into the future");
      enc.seq.no = 2**32 + 42;
      px = op.encap(packet.clone(p));
      assert(! op.decap(px),
             "accepted packet from way into the past");
      // Test resynchronization after having lost  >2^32 packets
      enc.seq.no = 0;
      dec.seq.no = 0;
      C.memset(dec.window, 0, dec.window_size / 8); // clear window
      px = op.encap(packet.clone(p)); // do an initial packet
      assert(op.decap(px), "decapsulation failed");
      enc.seq->high(3); // pretend there has been massive packet loss
      enc.seq->low(24);
      for( i = 1, dec.resync_threshold ) {
         var xpx = op.encap(packet.clone(p));
         assert(! op.decap(xpx), "decapsulated pre-resync packet");
      }
      px = op.encap(packet.clone(p));
      assert(op.decap(px), "failed to resynchronize");
      // Make sure we don't accidentally resynchronize with very old replayed
      // traffic
      enc.seq.no = 42;
      for( i = 1, dec.resync_threshold ) {
         var xpx = op.encap(packet.clone(p));
         assert(! op.decap(xpx), "decapsulated very old packet");
      }
      px = op.encap(packet.clone(p));
      assert(! op.decap(px), "resynchronized with the past!");
   }
}

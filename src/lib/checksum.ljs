// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

// See README.checksum.md for API.

require("lib.checksum_h");
var lib = require("core.lib");
var ffi = require("ffi");
var C = ffi.C;
var band, lshift = bit.band, bit.lshift;

// Select ipsum(pointer, len, initial) function based on hardware
// capability.
var cpuinfo = lib.readfile("/proc/cpuinfo", "*a");
assert(cpuinfo, "failed to read /proc/cpuinfo for hardware check");
var have_avx2 = cpuinfo->match("avx2");
var have_sse2 = cpuinfo->match("sse2");

if(     have_avx2 ) { ipsum = C.cksum_avx2;
} else if( have_sse2 ) { ipsum = C.cksum_sse2;
} else {                  ipsum = C.cksum_generic; }


function finish_packet (buf, len, offset) {
   ffi.cast('uint16_t *', buf+offset)[0] = lib.htons(ipsum(buf, len, 0));
}

function verify_packet (buf, len) {
   var initial = C.pseudo_header_initial(buf, len);
   if(     initial == 0xFFFF0001 ) { return null;
   } else if( initial == 0xFFFF0002 ) { return false;
   }

   var headersize = 0;
   var ipv = band(buf[0], 0xF0);
   if( ipv == 0x60 ) {
      headersize = 40;
   } else if( ipv == 0x40 ) {
      headersize = band(buf[0], 0x0F) * 4;
   }

   return ipsum(buf+headersize, len-headersize, initial) == 0;
}

var function prepare_packet_l4 (buf, len, csum_start, csum_off) {

  var hwbuf =  ffi.cast('uint16_t*', buf);

  var pheader = C.pseudo_header_initial(buf, len);
  if( band(pheader, 0xFFFF0000) == 0 ) {
    hwbuf[(csum_start+csum_off)/2] = C.htons(band(pheader, 0x0000FFFF));
  } else {
    csum_start, csum_off = null, null;
  }

  return csum_start, csum_off;
}

function prepare_packet4 (buf, len) {

  var hwbuf =  ffi.cast('uint16_t*', buf);
  var proto = buf[9];

  var csum_start = lshift(band(buf[0], 0x0F),2);
  var csum_off;

  // Update the IPv4 checksum (use in-place pseudoheader, by setting it to 0)
  hwbuf[5] = 0;
  hwbuf[5] = C.htons(ipsum(buf, csum_start, 0));

  // TCP
  if( proto == 6 ) {
    csum_off = 16;
  // UDP
  } else if( proto == 17 ) {
    csum_off = 6;
  }

  return prepare_packet_l4( buf, len, csum_start, csum_off);
}

function prepare_packet6 (buf, len) {
  var hwbuf =  ffi.cast('uint16_t*', buf);
  var proto = buf[6];

  var csum_start = 40;
  var csum_off;

  // TCP
  if( proto == 6 ) {
    csum_off = 16;
  // UDP
  } else if( proto == 17 ) {
    csum_off = 6;
  }

  return prepare_packet_l4( buf, len, csum_start, csum_off);
}

// See checksum.h for more utility functions that can be added.

function selftest () {
   print("selftest: checksum");
   var tests = 1000;
   var n = 1000000;
   var array = ffi.new("char[?]", n);
   for( i = 0, n-1 ) {  array[i] = i;  }
   var avx2ok, sse2ok = 0, 0;
   for( i = 1, tests ) {
      var initial = math.random(0, 0xFFFF);
      var ref =   C.cksum_generic(array+i*2, i*10+i, initial);
      if( have_avx2 && C.cksum_avx2(array+i*2, i*10+i, initial) == ref ) {
         ++avx2ok    ;
      }
      if( have_sse2 && C.cksum_sse2(array+i*2, i*10+i, initial) == ref ) {
         ++sse2ok    ;
      }
      assert(ipsum(array+i*2, i*10+i, initial) == ref, "API function check");
   }
   if( have_avx2 ) { print("avx2: "..avx2ok.."/"..tests); } else { print("no avx2"); }
   if( have_sse2 ) { print("sse2: "..sse2ok.."/"..tests); } else { print("no sse2"); }
   selftest_ipv4_tcp();
   assert(! have_avx2 || avx2ok == tests, "AVX2 test failed");
   assert(! have_sse2 || sse2ok == tests, "SSE2 test failed");
   print("selftest: ok");
}

function selftest_ipv4_tcp () {
   print("selftest: tcp/ipv4");
   var s = "45 00 05 DC 00 26 40 00 40 06 20 F4 0A 00 00 01 0A 00 00 02 8A DE 13 89 6C 27 3B 04 1C E9 F9 C6 80 10 00 E5 5E 47 00 00 01 01 08 0A 01 0F 3A CA 01 0B 32 A9 00 00 00 00 00 00 00 01 00 00 13 89 00 00 00 00 00 00 00 00 FF FF E8 90 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37";
   var data = lib.hexundump(s, 1500);
   assert(verify_packet(ffi.cast("char*",data), #data), "TCP/IPv4 checksum validation failed");
}

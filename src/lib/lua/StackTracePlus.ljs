// tables
var _G = _G;
var string, io, debug, coroutine = string, io, debug, coroutine;

// functions
var tostring, print, require = tostring, print, require;
var next, assert = next, assert;
var pcall, type, pairs, ipairs = pcall, type, pairs, ipairs;
var error = error;

assert(debug, "debug table must be available at this point");

var io_open = io.open;
var string_gmatch = string.gmatch;
var string_sub = string.sub;
var table_concat = table.concat;

var _M = {
	max_tb_output_len = 70	// controls the maximum length of the 'stringified' table before cutting with ' (more...)'
};

// this tables should be weak so the elements in them won't become uncollectable
var m_known_tables = { [_G] = "_G (global table)" };
var function add_known_module(name, desc) {
	var ok, mod = pcall(require, name);
	if( ok ) {
		m_known_tables[mod] = desc;
	}
}

add_known_module("string", "string module");
add_known_module("io", "io module");
add_known_module("os", "os module");
add_known_module("table", "table module");
add_known_module("math", "math module");
add_known_module("package", "package module");
add_known_module("debug", "debug module");
add_known_module("coroutine", "coroutine module");

// lua5.2
add_known_module("bit32", "bit32 module");
// luajit
add_known_module("bit", "bit module");
add_known_module("jit", "jit module");


var m_user_known_tables = {};

var m_known_functions = {};
for( _, name in ipairs({
	// Lua 5.2, 5.1
	"assert",
	"collectgarbage",
	"dofile",
	"error",
	"getmetatable",
	"ipairs",
	"load",
	"loadfile",
	"next",
	"pairs",
	"pcall",
	"print",
	"rawequal",
	"rawget",
	"rawlen",
	"rawset",
	"require",
	"select",
	"setmetatable",
	"tonumber",
	"tostring",
	"type",
	"xpcall",
	
	// Lua 5.1
	"gcinfo",
	"getfenv",
	"loadstring",
	"module",
	"newproxy",
	"setfenv",
	"unpack",
	// TODO: add table.* etc functions
}) ) {
	if( _G[name] ) {
		m_known_functions[_G[name]] = name;
	}
}



var m_user_known_functions = {};

var function safe_tostring (value) {
	var ok, err = pcall(tostring, value);
	if( ok ) { return err; } else { return ("<failed to get printable value>: '%s'")->format(err); }
}

// Private:
// Parses a line, looking for possible function definitions (in a very naïve way) 
// Returns '(anonymous)' if no function name was found in the line
var function ParseLine(line) {
	assert(type(line) == "string");
	//print(line)
	var match = line->match("^%s*function%s+(%w+)");
	if( match ) {
		//print("+++++++++++++function", match)
		return match;
	}
	match = line->match("^%s*var%s+function%s+(%w+)");
	if( match ) {
		//print("++++++++++++local", match)
		return match;
	}
	match = line->match("^%s*var%s+(%w+)%s+=%s+function");
	if( match ) {
		//print("++++++++++++local func", match)
		return match;
	}
	match = line->match("%s*function%s*%(");	// this is an anonymous function
	if( match ) {
		//print("+++++++++++++function2", match)
		return "(anonymous)";
	}
	return "(anonymous)";
}

// Private:
// Tries to guess a function's name when the debug info structure does not have it.
// It parses either the file or the string where the function is defined.
// Returns '?' if the line where the function is defined is not found
var function GuessFunctionName(info) {
	//print("guessing function name")
	if( type(info.source) == "string" && info.source->sub(1,1) == "@" ) {
		var file, err = io_open(info.source->sub(2), "r");
		if( ! file ) {
			print("file not found: "..tostring(err));	// whoops!
			return "?";
		}
		var line;
		for( i = 1, info.linedefined ) {
			line = file->read("*l");
		}
		if( ! line ) {
			print("line not found");	// whoops!
			return "?";
		}
		return ParseLine(line);
	} else {
		var line;
		var lineNumber = 0;
		for( l in string_gmatch(info.source, "([^\n]+)\n-") ) {
			++lineNumber    ;
			if( lineNumber == info.linedefined ) {
				line = l;
				break;
			}
		}
		if( ! line ) {
			print("line not found");	// whoops!
			return "?";
		}
		return ParseLine(line);
	}
}

//-
// Dumper instances are used to analyze stacks and collect its information.
//
var Dumper = {};

Dumper.new = function(thread) {
	var t = { lines = {} };
	for( k,v in pairs(Dumper) ) { t[k] = v; }

	t.dumping_same_thread = (thread == coroutine.running());

	// if a thread was supplied, bind it to debug.info and debug.get
	// we also need to skip this additional level we are introducing in the callstack (only if we are running
	// in the same thread we're inspecting)
	if( type(thread) == "thread" ) {
		t.getinfo = function(level, what) {
			if( t.dumping_same_thread && type(level) == "number" ) {
				++level    ;
			}
			return debug.getinfo(thread, level, what);
		};
		t.getlocal = function(level, loc) {
			if( t.dumping_same_thread ) {
				++level    ;
			}
			return debug.getlocal(thread, level, loc);
		};
	} else {
		t.getinfo = debug.getinfo;
		t.getlocal = debug.getlocal;
	}

	return t;
};

// helpers for collecting strings to be used when assembling the final trace
function Dumper::add (text) {
	this.lines[#this.lines + 1] = text;
}
function Dumper::add_f (fmt, ...) {
	this->add(fmt->format(...));
}
function Dumper::concat_lines () {
	return table_concat(this.lines);
}

//-
// Private:
// Iterates over the local variables of a given function.
//
// @param level The stack level where the function is.
//
function Dumper::DumpLocals (level) {
	var prefix = "\t ";
	var i = 1;

	if( this.dumping_same_thread ) {
		++level    ;
	}
	
	var name, value = this.getlocal(level, i);
	if( ! name ) {
		return;
	}
	this->add("\tLocal variables:\r\n");
	while( name ) {
		if( type(value) == "number" ) {
			this->add_f("%s%s = number: %g\r\n", prefix, name, value);
		} else if( type(value) == "boolean" ) {
			this->add_f("%s%s = boolean: %s\r\n", prefix, name, tostring(value));
		} else if( type(value) == "string" ) {
			this->add_f("%s%s = string: %q\r\n", prefix, name, value);
		} else if( type(value) == "userdata" ) {
			this->add_f("%s%s = %s\r\n", prefix, name, safe_tostring(value));
		} else if( type(value) == "null" ) {
			this->add_f("%s%s = null\r\n", prefix, name);
		} else if( type(value) == "table" ) {
			if( m_known_tables[value] ) {
				this->add_f("%s%s = %s\r\n", prefix, name, m_known_tables[value]);
			} else if( m_user_known_tables[value] ) {
				this->add_f("%s%s = %s\r\n", prefix, name, m_user_known_tables[value]);
			} else {
				var txt = "{";
				for( k,v in pairs(value) ) {
					txt = txt..safe_tostring(k)..":"..safe_tostring(v);
					if( #txt > _M.max_tb_output_len ) {
						txt = txt.." (more...)";
						break;
					}
					if( next(value, k) ) { txt = txt..", "; }
				}
				this->add_f("%s%s = %s  %s\r\n", prefix, name, safe_tostring(value), txt.."}");
			}
		} else if( type(value) == "function" ) {
			var info = this.getinfo(value, "nS");
			var fun_name = info.name || m_known_functions[value] || m_user_known_functions[value];
			if( info.what == "C" ) {
				this->add_f("%s%s = C %s\r\n", prefix, name, (fun_name && ("function: " .. fun_name) || tostring(value)));
			} else {
				var source = info.short_src;
				if( source->sub(2,7) == "string" ) {
					source = source->sub(9);	// uno más, por el espacio que viene (string "Baragent.Main", por ejemplo)
				}
				//for k,v in pairs(info) do print(k,v) end
				fun_name = fun_name || GuessFunctionName(info);
				this->add_f("%s%s = Lua function '%s' (defined at line %d of chunk %s)\r\n", prefix, name, fun_name, info.linedefined, source);
			}
		} else if( type(value) == "thread" ) {
			this->add_f("%sthread %q = %s\r\n", prefix, name, tostring(value));
		}
		++i    ;
		name, value = this.getlocal(level, i);
	}
}


//-
// Public:
// Collects a detailed stack trace, dumping locals, resolving function names when they're not available, etc.
// This function is suitable to be used as an error handler with pcall or xpcall
//
// @param thread An optional thread whose stack is to be inspected (defaul is the current thread)
// @param message An optional error string or object.
// @param level An optional number telling at which level to start the traceback (default is 1)
//
// Returns a string with the stack trace and a string with the original error.
//
function _M.stacktrace(thread, message, level) {
	if( type(thread) != "thread" ) {
		// shift parameters left
		thread, message, level = null, thread, message;
	}

	thread = thread || coroutine.running();

	level = level || 1;

	var dumper = Dumper.new(thread);

	var original_error;
	
	if( type(message) == "table" ) {
		dumper->add("an error object {\r\n");
		var first = true;
		for( k,v in pairs(message) ) {
			if( first ) {
				dumper->add("  ");
				first = false;
			} else {
				dumper->add(",\r\n  ");
			}
			dumper->add(safe_tostring(k));
			dumper->add(": ");
			dumper->add(safe_tostring(v));
		}
		dumper->add("\r\n}");
		original_error = dumper->concat_lines();
	} else if( type(message) == "string" ) {
		dumper->add(message);
		original_error = message;
	}
	
	dumper->add("\r\n");
	dumper->add([=[
Stack Traceback
===============
]=]);
	//print(error_message)
	
	var level_to_show = level;
	if( dumper.dumping_same_thread ) { ++level    ; }

	var info = dumper.getinfo(level, "nSlf");
	while( info ) {
		if( info.what == "main" ) {
			if( string_sub(info.source, 1, 1) == "@" ) {
				dumper->add_f("(%d) main chunk of file '%s' at line %d\r\n", level_to_show, string_sub(info.source, 2), info.currentline);
			} else {
				dumper->add_f("(%d) main chunk of %s at line %d\r\n", level_to_show, info.short_src, info.currentline);
			}
		} else if( info.what == "C" ) {
			//print(info.namewhat, info.name)
			//for k,v in pairs(info) do print(k,v, type(v)) end
			var function_name = m_user_known_functions[info.func] || m_known_functions[info.func] || info.name || tostring(info.func);
			dumper->add_f("(%d) %s C function '%s'\r\n", level_to_show, info.namewhat, function_name);
			//dumper:add_f("%s%s = C %s\r\n", prefix, name, (m_known_functions[value] and ("function: " .. m_known_functions[value]) or tostring(value)))
		} else if( info.what == "tail" ) {
			//print("tail")
			//for k,v in pairs(info) do print(k,v, type(v)) end--print(info.namewhat, info.name)
			dumper->add_f("(%d) tail call\r\n", level_to_show);
			dumper->DumpLocals(level);
		} else if( info.what == "Lua" ) {
			var source = info.short_src;
			var function_name = m_user_known_functions[info.func] || m_known_functions[info.func] || info.name;
			if( source->sub(2, 7) == "string" ) {
				source = source->sub(9);
			}
			var was_guessed = false;
			if( ! function_name || function_name == "?" ) {
				//for k,v in pairs(info) do print(k,v, type(v)) end
				function_name = GuessFunctionName(info);
				was_guessed = true;
			}
			// test if we have a file name
			var function_type = (info.namewhat == "") && "function" || info.namewhat;
			if( info.source && info.source->sub(1, 1) == "@" ) {
				dumper->add_f("(%d) Lua %s '%s' at file '%s:%d'%s\r\n", level_to_show, function_type, function_name, info.source->sub(2), info.currentline, was_guessed && " (best guess)" || "");
			} else if( info.source && info.source->sub(1,1) == '#' ) {
				dumper->add_f("(%d) Lua %s '%s' at template '%s:%d'%s\r\n", level_to_show, function_type, function_name, info.source->sub(2), info.currentline, was_guessed && " (best guess)" || "");
			} else {
				dumper->add_f("(%d) Lua %s '%s' at line %d of chunk '%s'\r\n", level_to_show, function_type, function_name, info.currentline, source);
			}
			dumper->DumpLocals(level);
		} else {
			dumper->add_f("(%d) unknown frame %s\r\n", level_to_show, info.what);
		}
		
		++level    ;
		++level_to_show    ;
		info = dumper.getinfo(level, "nSlf");
	}
	
	return dumper->concat_lines(), original_error;
}

//
// Adds a table to the list of known tables
function _M.add_known_table(tab, description) {
	if( m_known_tables[tab] ) {
		error("Cannot override an already known table");
	}
	m_user_known_tables[tab] = description;
}

//
// Adds a function to the list of known functions
function _M.add_known_function(fun, description) {
	if( m_known_functions[fun] ) {
		error("Cannot override an already known function");
	}
	m_user_known_functions[fun] = description;
}

return _M;

// Copyright (c) 2009 Aleksey Cheusov <vle@gmx.net>
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var type, pairs, ipairs, io, os = type, pairs, ipairs, io, os;

module (...);

var function convert_short2long (opts) {
   var ret = {};

   for( short_opt, accept_arg in opts->gmatch("(%w)(:?)") ) {
      ret[short_opt]=#accept_arg;
   }

   return ret;
}

var function exit_with_error (msg, exit_status) {
   io.stderr->write (msg);
   os.exit (exit_status);
}

var function err_unknown_opt (opt) {
   exit_with_error ("Unknown option `-" ..
                  (#opt > 1 && "-" || "") .. opt .. "'\n", 1);
}

var function canonize (options, opt) {
   if( ! options [opt] ) {
      err_unknown_opt (opt);
   }

   while( type (options [opt]) == "string" ) {
      opt = options [opt];

      if( ! options [opt] ) {
         err_unknown_opt (opt);
      }
   }

   return opt;
}

function get_ordered_opts (arg, sh_opts, long_opts) {
   var i      = 1;
   var count  = 1;
   var opts   = {};
   var optarg = {};

   var options = convert_short2long (sh_opts);
   for( k,v in pairs (long_opts) ) {
      options [k] = v;
   }

   while( i <= #arg ) {
      var a = arg [i];

      if( a == "--" ) {
         ++i    ;
         break;

      } else if( a == "-" ) {
         break;

      } else if( a->sub (1, 2) == "--" ) {
         var pos = a->find ("=", 1, true);

         if( pos ) {
            var opt = a->sub (3, pos-1);

            opt = canonize (options, opt);

            if( options [opt] == 0 ) {
               exit_with_error ("Bad usage of option `" .. a .. "'\n", 1);
            }

            optarg [count] = a->sub (pos+1);
            opts [count] = opt;
         } else {
            var opt = a->sub (3);

            opt = canonize (options, opt);

            if( options [opt] == 0 ) {
               opts [count] = opt;
            } else {
               if( i == #arg ) {
                  exit_with_error ("Missed value for option `" .. a .. "'\n", 1);
               }

               optarg [count] = arg [i+1];
               opts [count] = opt;
               ++i    ;
            }
         }
         ++count    ;

      } else if( a->sub (1, 1) == "-" ) {
         for( j=2,a->len () ) {
            var opt = canonize (options, a->sub (j, j));

            if( options [opt] == 0 ) {
               opts [count] = opt;
               ++count    ;
            } else if( a->len () == j ) {
               if( i == #arg ) {
                  exit_with_error ("Missed value for option `-" .. opt .. "'\n", 1);
               }

               optarg [count] = arg [i+1];
               opts [count] = opt;
               ++i    ;
               ++count    ;
               break;
            } else {
               optarg [count] = a->sub (j+1);
               opts [count] = opt;
               ++count    ;
               break;
            }
         }
      } else {
         break;
      }

      ++i    ;
   }

   return opts,i,optarg;
}

function get_opts (arg, sh_opts, long_opts) {
   var ret = {};

   var opts,optind,optarg = get_ordered_opts (arg, sh_opts, long_opts);
   for( i,v in ipairs (opts) ) {
      if( optarg [i] ) {
         ret [v] = optarg [i];
      } else {
         ret [v] = 1;
      }
   }

   return ret,optind;
}

// JSON4Lua: JSON encoding / decoding support for the Lua language.
// json Module.
// Author: Craig Mason-Jones
// Homepage: http://json.luaforge.net/
// Version: 0.9.40
// This module is released under the MIT License (MIT).
//
// NOTE: This is only the decode functionality ripped out from JSON4Lua.
// See: https://github.com/craigmj/json4lua

module(..., package.seeall);

var math = require('math');
var string = require("string");
var table = require("table");

var base = _G;

// Private functions
var decode_scanArray;
var decode_scanComment;
var decode_scanConstant;
var decode_scanNumber;
var decode_scanObject;
var decode_scanString;
var decode_scanWhitespace;

//- Decodes a JSON string and returns the decoded value as a Lua data structure / value.
// @param s The string to scan.
// @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.
// @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,
// and the position of the first character after
// the scanned JSON object.
function decode(s, startPos) {
  startPos = startPos && startPos || 1;
  startPos = decode_scanWhitespace(s,startPos);
  base.assert(startPos<=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']');
  var curChar = string.sub(s,startPos,startPos);
  // Object
  if( curChar=='{' ) {
    return decode_scanObject(s,startPos);
  }
  // Array
  if( curChar=='[' ) {
    return decode_scanArray(s,startPos);
  }
  // Number
  if( string.find("+-0123456789.e", curChar, 1, true) ) {
    return decode_scanNumber(s,startPos);
  }
  // String
  if( curChar==[=["]=] || curChar==[=[']=] ) {
    return decode_scanString(s,startPos);
  }
  if( string.sub(s,startPos,startPos+1)=='/*' ) {
    return decode(s, decode_scanComment(s,startPos));
  }
  // Otherwise, it must be a constant
  return decode_scanConstant(s,startPos);
}

//- The null function allows one to specify a null value in an associative array (which is otherwise
// discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.vnull }
function vnull() {
  return vnull; // so json.vnull() will also return null ;-)
}
//---------------------------------------------------------------------------
// Internal, PRIVATE functions.
// Following a Python-like convention, I have prefixed all these 'PRIVATE'
// functions with an underscore.
//---------------------------------------------------------------------------

//- Scans an array from JSON into a Lua object
// startPos begins at the start of the array.
// Returns the array and the next starting position
// @param s The string being scanned.
// @param startPos The starting position for the scan.
// @return table, int The scanned array as a table, and the position of the next character to scan.
function decode_scanArray(s,startPos) {
  var array = {};        // The return value
  var stringLen = string.len(s);
  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s );
  startPos = startPos + 1;
  // Infinite loop for array elements
  do {
    startPos = decode_scanWhitespace(s,startPos);
    base.assert(startPos<=stringLen,'JSON String ended unexpectedly scanning array.');
    var curChar = string.sub(s,startPos,startPos);
    if( (curChar==']') ) {
      return array, startPos+1;
    }
    if( (curChar==',') ) {
      startPos = decode_scanWhitespace(s,startPos+1);
    }
    base.assert(startPos<=stringLen, 'JSON String ended unexpectedly scanning array.');
    object, startPos = decode(s,startPos);
    table.insert(array,object);
  } while(!( false) );
}

//- Scans a comment and discards the comment.
// Returns the position of the next character following the comment.
// @param string s The JSON string to scan.
// @param int startPos The starting position of the comment
function decode_scanComment(s, startPos) {
  base.assert( string.sub(s,startPos,startPos+1)=='/*', "decode_scanComment called but comment does not start at position " .. startPos);
  var endPos = string.find(s,'*/',startPos+2);
  base.assert(endPos!=null, "Unterminated comment in string at " .. startPos);
  return endPos+2;
}

//- Scans for given constants: true, false or null
// Returns the appropriate Lua type, and the position of the next character to read.
// @param s The string being scanned.
// @param startPos The position in the string at which to start scanning.
// @return object, int The object (true, false or nil) and the position at which the next character should be
// scanned.
function decode_scanConstant(s, startPos) {
  var consts = { ["true"] = true, ["false"] = false, ["null"] = null };
  var constNames = {"true","false","null"};

  for( i,k in base.pairs(constNames) ) {
    //print ("[" .. string.sub(s,startPos, startPos + string.len(k) -1) .."]", k)
    if( string.sub(s,startPos, startPos + string.len(k) -1 )==k ) {
      return consts[k], startPos + string.len(k);
    }
  }
  base.assert(null, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos);
}

//- Scans a number from the JSON encoded string.
// (in fact, also is able to scan numeric +- eqns, which is not
// in the JSON spec.)
// Returns the number, and the position of the next character
// after the number.
// @param s The string being scanned.
// @param startPos The position at which to start scanning.
// @return number, int The extracted number and the position of the next character to scan.
function decode_scanNumber(s,startPos) {
  var endPos = startPos+1;
  var stringLen = string.len(s);
  var acceptableChars = "+-0123456789.e";
  while( (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)
        && endPos<=stringLen
        ) ) {
    ++endPos    ;
  }
  var stringValue = 'return ' .. string.sub(s,startPos, endPos-1);
  var stringEval = base.loadstring(stringValue);
  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos);
  return stringEval(), endPos;
}

//- Scans a JSON object into a Lua object.
// startPos begins at the start of the object.
// Returns the object and the next starting position.
// @param s The string being scanned.
// @param startPos The starting position of the scan.
// @return table, int The scanned object as a table and the position of the next character to scan.
function decode_scanObject(s,startPos) {
  var object = {};
  var stringLen = string.len(s);
  var key, value;
  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s);
  ++startPos    ;
  do {
    startPos = decode_scanWhitespace(s,startPos);
    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly while scanning object.');
    var curChar = string.sub(s,startPos,startPos);
    if( (curChar=='}') ) {
      return object,startPos+1;
    }
    if( (curChar==',') ) {
      startPos = decode_scanWhitespace(s,startPos+1);
    }
    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly scanning object.');
    // Scan the key
    key, startPos = decode(s,startPos);
    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key);
    startPos = decode_scanWhitespace(s,startPos);
    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key);
    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos);
    startPos = decode_scanWhitespace(s,startPos+1);
    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key);
    value, startPos = decode(s,startPos);
    object[key]=value;
  } while(!( false) );        // infinite loop while key-value pairs are found
}

//- Scans a JSON string from the opening inverted comma or single quote to the
// end of the string.
// Returns the string extracted as a Lua string,
// and the position of the next non-string character
// (after the closing inverted comma or single quote).
// @param s The string being scanned.
// @param startPos The starting position of the scan.
// @return string, int The extracted string as a Lua string, and the next character to parse.
function decode_scanString(s,startPos) {
  base.assert(startPos, 'decode_scanString(..) called without start position');
  var startChar = string.sub(s,startPos,startPos);
  base.assert(startChar==[=[']=] || startChar==[=["]=],'decode_scanString called for a non-string');
  var escaped = false;
  var endPos = startPos + 1;
  var bEnded = false;
  var stringLen = string.len(s);
  do {
    var curChar = string.sub(s,endPos,endPos);
    // Character escaping is only used to escape the string delimiters
    if( ! escaped ) {
      if( curChar==[=[\]=] ) {
        escaped = true;
      } else {
        bEnded = curChar==startChar;
      }
    } else {
      // If we're escaped, we accept the current character come what may
      escaped = false;
    }
    ++endPos    ;
    base.assert(endPos <= stringLen+1, "String decoding failed: unterminated string at position " .. endPos);
  } while(!( bEnded) );
  var stringValue = 'return ' .. string.sub(s, startPos, endPos-1);
  var stringEval = base.loadstring(stringValue);
  base.assert(stringEval, 'Failed to load string [ ' .. stringValue .. '] in JSON4Lua.decode_scanString at position ' .. startPos .. ' : ' .. endPos);
  return stringEval(), endPos;
}

//- Scans a JSON string skipping all whitespace from the current start position.
// Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.
// @param s The string being scanned
// @param startPos The starting position where we should begin removing whitespace.
// @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string
// was reached.
function decode_scanWhitespace(s,startPos) {
  var whitespace=" \n\r\t";
  var stringLen = string.len(s);
  while( ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  && startPos <= stringLen) ) {
    ++startPos    ;
  }
  return startPos;
}

module(...,package.seeall);

// Ingress packet drop monitor timer.

var S = require("syscall");
var counter = require("core.counter");
var ffi = require("ffi");
var shm = require("core.shm");
var alarms = require("lib.yang.alarms");

// Every 100 milliseconds.
var default_interval = 1e8;

var default_tips_url =
   "https://github.com/snabbco/snabb/blob/master/src/doc/performance-tuning.md";

var now = core.app.now;

var IngressDropMonitor = {};

function new(args) {
   var ret = {
      threshold = args.threshold || 100000,
      wait = args.wait || 30,
      grace_period = args.grace_period || 10,
      action = args.action || 'flush',
      tips_url = args.tips_url || default_tips_url,
      last_flush = 0,
      last_value = ffi.new('uint64_t[1]'),
      current_value = ffi.new('uint64_t[1]'),
   };
   if( args.counter ) {
      if( ! args.counter->match(".counter$") ) {
         args.counter = args.counter..".counter";
      }
      if( ! shm.exists(args.counter) ) {
         ret.counter = counter.create(args.counter, 0);
      } else {
         ret.counter = counter.open(args.counter);
      }
   }

   alarms.add_to_inventory ({
      [{alarm_type_id='ingress-packet-drop'}] = {
         resource=tostring(S.getpid()),
         has_clear=true,
         description="Ingress packet drops exceeds threshold",
      }
   });
   ret.ingress_packet_drop_alarm = alarms.declare_alarm ({
      [{resource=tostring(S.getpid()),alarm_type_id='ingress-packet-drop'}] = {
         perceived_severity='major',
      }
   });

   return setmetatable(ret, {__index=IngressDropMonitor});
}

function IngressDropMonitor::sample () {
   var app_array = engine.breathe_push_order;
   var sum = this.current_value;
   sum[0] = 0;
   for( i = 1, #app_array ) {
      var app = app_array[i];
      if( app.rxdrop && ! app.dead ) {
         sum[0] = sum[0] + app->rxdrop();
      }
   }
   if( this.counter ) {
      counter.set(this.counter, sum[0]);
   }
}

function IngressDropMonitor::jit_flush_if_needed () {
   if( now() - this.last_flush < this.grace_period ) {
      this.last_value[0] = this.current_value[0];
      return;
   }
   if( this.current_value[0] - this.last_value[0] < this.threshold ) {
      this.ingress_packet_drop_alarm->clear();
      return;
   }
   if( now() - this.last_flush < this.wait ) { return; }
   this.last_flush = now();
   this.last_value[0] = this.current_value[0];

   //- TODO: Change last_flush, last_value and current_value fields to be counters.
   var msg = now()..": warning: Dropped more than "..this.threshold.." packets";
   if( this.action == 'flush' ) {
      msg = msg.."; flushing JIT to try to recover";
   }
   msg = msg..". See "..this.tips_url.." for performance tuning tips.";
   print(msg);

   this.ingress_packet_drop_alarm->raise({alarm_text=msg});
   if( this.action == 'flush' ) { jit.flush(); }
}

function IngressDropMonitor::timer(interval) {
   return timer.new("ingress drop monitor",
                    function () {
                       this->sample();
                       this->jit_flush_if_needed();
                    },
                    interval || default_interval,
                    "repeating");
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var S = require("syscall");
var channel = require("lib.ptree.channel");
var ffi = require("ffi");

var UINT32_MAX = 0xffffffff;

var alarm_names = { 'raise_alarm', 'clear_alarm', 'add_to_inventory', 'declare_alarm' };
var alarm_codes = {};
for( i, name in ipairs(alarm_names) ) { alarm_codes[name] = i; }

var alarms = {};

function alarms.raise_alarm (codec, resource, alarm_type_id, alarm_type_qualifier,
   perceived_severity, alarm_text) {

   resource = codec->string(resource);
   alarm_type_id = codec->string(alarm_type_id);
   alarm_type_qualifier = codec->string(alarm_type_qualifier);

   perceived_severity = codec->maybe_string(perceived_severity);
   alarm_text = codec->maybe_string(alarm_text);

   return codec->finish(resource, alarm_type_id, alarm_type_qualifier,
                       perceived_severity, alarm_text);
}
function alarms.clear_alarm (codec, resource, alarm_type_id, alarm_type_qualifier) {
   resource = codec->string(resource);
   alarm_type_id = codec->string(alarm_type_id);
   alarm_type_qualifier = codec->string(alarm_type_qualifier);

   return codec->finish(resource, alarm_type_id, alarm_type_qualifier);
}
function alarms.add_to_inventory (codec, alarm_type_id, alarm_type_qualifier,
   resource, has_clear, description) {

   alarm_type_id = codec->string(alarm_type_id);
   alarm_type_qualifier = codec->maybe_string(alarm_type_qualifier);

   resource = codec->string(resource);
   has_clear = codec->string((has_clear && "true" || "false"));
   description = codec->maybe_string(description);

   return codec->finish(alarm_type_id, alarm_type_qualifier,
                       resource, has_clear, description);
}
function alarms.declare_alarm (codec, resource, alarm_type_id, alarm_type_qualifier,
   perceived_severity, alarm_text) {

   resource = codec->string(resource);
   alarm_type_id = codec->string(alarm_type_id);
   alarm_type_qualifier = codec->maybe_string(alarm_type_qualifier);

   perceived_severity = codec->maybe_string(perceived_severity);
   alarm_text = codec->maybe_string(alarm_text);

   return codec->finish(resource, alarm_type_id, alarm_type_qualifier,
                       perceived_severity, alarm_text);
}

var function encoder() {
   var encoder = { out = {} };
   function encoder::uint32(len) {
      table.insert(this.out, ffi.new('uint32_t[1]', len));
   }
   function encoder::string(str) {
      this->uint32(#str);
      var buf = ffi.new('uint8_t[?]', #str);
      ffi.copy(buf, str, #str);
      table.insert(this.out, buf);
   }
   function encoder::maybe_string(str) {
      if( str == null ) {
         this->uint32(UINT32_MAX);
      } else {
         this->string(str);
      }
   }
   function encoder::finish() {
      var size = 0;
      for( _,src in ipairs(this.out) ) { size = size + ffi.sizeof(src); }
      var dst = ffi.new('uint8_t[?]', size);
      var pos = 0;
      for( _,src in ipairs(this.out) ) {
         ffi.copy(dst + pos, src, ffi.sizeof(src));
         pos = pos + ffi.sizeof(src);
      }
      return dst, size;
   }
   return encoder;
}

function encode_raise_alarm (...) {
   var codec = encoder();
   codec->uint32(assert(alarm_codes['raise_alarm']));
   return assert(alarms['raise_alarm'])(codec, ...);
}

function encode_clear_alarm (...) {
   var codec = encoder();
   codec->uint32(assert(alarm_codes['clear_alarm']));
   return assert(alarms['clear_alarm'])(codec, ...);
}

function encode_add_to_inventory (...) {
   var codec = encoder();
   codec->uint32(assert(alarm_codes['add_to_inventory']));
   return assert(alarms['add_to_inventory'])(codec, ...);
}

function encode_declare_alarm (...) {
   var codec = encoder();
   codec->uint32(assert(alarm_codes['declare_alarm']));
   return assert(alarms['declare_alarm'])(codec, ...);
}

var uint32_ptr_t = ffi.typeof('uint32_t*');
var function decoder(buf, len) {
   var decoder = { buf=buf, len=len, pos=0 };
   function decoder::read(count) {
      var ret = this.buf + this.pos;
      this.pos = this.pos + count;
      assert(this.pos <= this.len);
      return ret;
   }
   function decoder::uint32() {
      return ffi.cast(uint32_ptr_t, this->read(4))[0];
   }
   function decoder::string() {
      var len = this->uint32();
      return ffi.string(this->read(len), len);
   }
   function decoder::maybe_string() {
      var len = this->uint32();
      if( len == UINT32_MAX ) { return null; }
      return ffi.string(this->read(len), len);
   }
   function decoder::finish(...) {
      return { ... };
   }
   return decoder;
}

function decode(buf, len) {
   var codec = decoder(buf, len);
   var name = assert(alarm_names[codec->uint32()]);
   return { name, assert(alarms[name], name)(codec) };
}

//-

var alarms_channel;

function get_channel() {
   if( alarms_channel ) { return alarms_channel; }
   var name = '/'..S.getpid()..'/alarms-worker-channel';
   var success, value = pcall(channel.open, name);
   if( success ) {
      alarms_channel = value;
   } else {
      alarms_channel = channel.create('alarms-worker-channel', 1e6);
   }
   return alarms_channel;
}

var function normalize (t, attrs) {
   t = t || {};
   var ret = {};
   for( i, k in ipairs(attrs) ) { ret[i] = t[k]; }
   return unpack(ret);
}

var alarm = {
   key_attrs = {'resource', 'alarm_type_id', 'alarm_type_qualifier'},
   args_attrs = {'perceived_severity', 'alarm_text'},
};
function alarm::normalize_key (t) {
   return normalize(t, this.key_attrs);
}
function alarm::normalize_args (t) {
   return normalize(t, this.args_attrs);
}

// To be used by the manager to group args into key and args.
function to_alarm (args) {
   var key = {
      resource = args[1],
      alarm_type_id = args[2],
      alarm_type_qualifier = args[3],
   };
   args = {
      perceived_severity = args[4],
      alarm_text = args[5],
   };
   return key, args;
}

var alarm_type = {
   key_attrs = {'alarm_type_id', 'alarm_type_qualifier'},
   args_attrs = {'resource', 'has_clear', 'description'},
};
function alarm_type::normalize_key (t) {
   return normalize(t, this.key_attrs);
}
function alarm_type::normalize_args (t) {
   return normalize(t, this.args_attrs);
}

function to_alarm_type (args) {
   var alarm_type_id, alarm_type_qualifier, resource, has_clear, description = unpack(args);
   var key = {
      alarm_type_id = args[1],
      alarm_type_qualifier = args[2],
   };
   args = {
      resource = args[3],
      has_clear = args[4],
      description = args[5],
   };
   return key, args;
}

function raise_alarm (key, args) {
   var channel = get_channel();
   if( channel ) {
      var resource, alarm_type_id, alarm_type_qualifier = alarm->normalize_key(key);
      var perceived_severity, alarm_text = alarm->normalize_args(args);
      var buf, len = encode_raise_alarm(
         resource, alarm_type_id, alarm_type_qualifier,
         perceived_severity, alarm_text
      );
      channel->put_message(buf, len);
   }
}

function clear_alarm (key) {
   var channel = get_channel();
   if( channel ) {
      var resource, alarm_type_id, alarm_type_qualifier = alarm->normalize_key(key);
      var buf, len = encode_clear_alarm(resource, alarm_type_id, alarm_type_qualifier);
      channel->put_message(buf, len);
   }
}

function add_to_inventory (key, args) {
   var channel = get_channel();
   if( channel ) {
      var alarm_type_id, alarm_type_qualifier = alarm_type->normalize_key(key);
      var resource, has_clear, description = alarm_type->normalize_args(args);
      var buf, len = encode_add_to_inventory(
         alarm_type_id, alarm_type_qualifier,
         resource, has_clear, description
      );
      channel->put_message(buf, len);
   }
}

function declare_alarm (key, args) {
   var channel = get_channel();
   if( channel ) {
      var resource, alarm_type_id, alarm_type_qualifier = alarm->normalize_key(key);
      var perceived_severity, alarm_text = alarm->normalize_args(args);
      var buf, len = encode_declare_alarm(
         resource, alarm_type_id, alarm_type_qualifier,
         perceived_severity, alarm_text
      );
      channel->put_message(buf, len);
   }
}

function selftest () {
   print('selftest: lib.ptree.alarm_codec');
   var lib = require("core.lib");
   var function test_alarm (name, args) {
      var encoded, len;
      if( name == 'raise_alarm' ) {
         encoded, len = encode_raise_alarm(unpack(args));
      } else if( name == 'clear_alarm' ) {
         encoded, len = encode_clear_alarm(unpack(args));
      } else {
         error('not valid alarm name: '..alarm);
      }
      var decoded = decode(encoded, len);
      assert(lib.equal({name, args}, decoded));
   }
   var function test_raise_alarm () {
      var key = {resource='res1', alarm_type_id='type1', alarm_type_qualifier=''};
      var args = {perceived_severity='critical'};

      var resource, alarm_type_id, alarm_type_qualifier = alarm->normalize_key(key);
      var perceived_severity, alarm_text = alarm->normalize_args(args);
      var alarm = {resource, alarm_type_id, alarm_type_qualifier,
                     perceived_severity, alarm_text};

      test_alarm('raise_alarm', alarm);
   }
   var function test_clear_alarm () {
      var key = {resource='res1', alarm_type_id='type1', alarm_type_qualifier=''};
      var resource, alarm_type_id, alarm_type_qualifier = alarm->normalize_key(key);
      var alarm = {resource, alarm_type_id, alarm_type_qualifier};
      test_alarm('clear_alarm', alarm);
   }

   test_raise_alarm();
   test_clear_alarm();

   var a, b = normalize({b='foo'}, {'a', 'b'});
   assert(a == null && b == 'foo');

   print('selftest: ok');
}

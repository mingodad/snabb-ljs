// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// The shmem base class provides a simple IPC mechanism to exchange
// arbitrary cdata objects with other processes through a file-backed
// shared memeory region, referred to as the "data file".  The memory
// layout of such a region is described by an "index file", which
// contains the names and sizes of the objects stored in the region.
//
// While the data file is read- and writable by all processes that
// attach to it, only a single process is allowed to generate the
// index file.  This process is called the "master", all other
// processes are called "slaves".  The roles of master and slave must
// be assumed by cooperating processes.  Using multiple masters to
// access the same mapping will result in undefined behaviour or
// segmentation violations.
//
// A new empty region is created by the master by calling the
// constructor new() with a filename and optional directory, where the
// file should be created.
//
//  local shmem = require("lib.ipc.shmem.shmem")
//  local foo = shmem:new({ filename = "foo", directory = "/tmp/foo" })
//
// If omitted, the directory defaults to "/tmp".  The constructor
// creates an empty data file with the given name and maps it into the
// processe's virtual memory.  In addition, it creates the index file
// by appending the suffix ".index" to the data file name.  The first
// line of the index file contains a string that identifies the name
// space to which the memory region belongs, followed by a colon,
// followed by an integer version number.  The name space indicates
// how the rest of the index file needs to be interpreted.  A name
// space is tied to the subclass that implements it (but a subclass
// may inherit the name space of its ancestor class).  The version
// number allows for changes of the index format within the name
// space.
//
// The base class provides the name space "default", i.e. the header
// line of the index file for version 1 contains the string "default:1".
//
// The default name space contains a single line in the index file for
// every object stored in the memory region.  The order of the
// descriptions must be the same as that of the objects.  A
// description consists of an arbitrary name, followd by a colon,
// followed by the length of the corresponding object in bytes.  For
// example, the index file
//
//   default:1
//   foo:4
//   bar:7
//
// Describes a memory region of length 11, which contains an object
// named 'foo' that consists of 4 bytes starting at offset 0 and an
// object named 'bar' consisting of 7 bytes starting at offset 4.  The
// type of the object is implied by its name and is not part of the
// description in the index. Each name must be unique.
//
// An object is added to the region by calling the method register(),
// which takes a string, a ctype object and an optional value as
// arguments.  The ctype must refer to a complete type such that the
// size of the object is fixed when it is added to the index.  The
// following example adds an unsigned 32-bit number called "counter"
// and a struct named "bar":
//
//  local counter_t = ffi.typeof("uint32_t")
//  local bar_t = ffi.typeof("struct { uint8_t x; char string[10]; }")
//  foo:register("counter", counter_t, 42)
//  foo:register("bar", bar_t)
//
// The index file now contains
//
//  default:1
//  counter:4
//  bar:11
//
// The contents of the objects can be changed by the set() method
//
//  foo:set("counter", 1)
//  foo:set("bar", bar_t({ x = 1, string = 'bar' }))
//
// The provided value must be of the correct type or must be
// convertible to it.  The assignment is performed by de-referencing
// the address of the object as a pointer, equivalent to (where
// "ctype" is the ctype object passed to the register() method)
//
//  ffi.cast(ffi.typeof("$*", ctype), address)[0] = value
//
// The get() method returns just a reference to the object
//
//  ffi.cast(ffi.typeof("$*", ctype), address)[0]
//
// For certain types, this will result in a Lua object, complex data
// types are represented as references
//
//  print(type(foo:get("counter")))  --> number
//  print(type(foo:get("bar")))      --> cdata<struct 403 &>: 0x7f2ce4efb004
//
// Be aware that assignments to the latter will change the underlying
// object, while simple objects obtained from get() are distinct from
// the underlying object.
//
// To manipulate any type of object "in place", one first obtains a
// pointer to the object by calling the ptr() method and de-references
// that pointer
//
//  local c = test:ptr("counter")
//  c[0] = 42
//  print(test:get("counter")) --> 42
//
// When an object is added with register(), the shared memory region
// is grown by first unmapping the region and then re-mapping it.  The
// new mapping ist not guaranteed to be at the same virtual address.
// Therefore, using the address of an object across calls to
// register() is unsafe.  The dictionary() method can be used to
// obtain a table of pointers to all currently registered objects for
// efficient access.
//
// A slave attaches to an existing shared memory region by calling the
// attach() constructor method, which takes the same argument as the
// new() constructor.  The method opens the data file in read/write
// mode and the index file in read-only mode.  It then proceeds to
// read the index and constructs the complete dictionary for the
// memory region.  The result is an object that is almost identical to
// that of the master after having created all objects through the
// register() method.
//
// The difference stems from the fact that the data types of the
// objects is not explicit in the index file, but implicitly defined
// through their names.  Hence, the generic attach() method creates
// all objects as an array of uint8_t of the given size.  Just like
// the master, a slave must register the proper data type for each
// object himself.  This is done in both cases by means of the
// register() method, whose semantics differs, depending on wether the
// region was created by new() or attach().  In the latter case, the
// register() method simply replaces the existing ctype.  The only
// difference between the master and the slave is the constructor,
// e.g. with the example above the slave would execute
//
//  local shmem = require("lib.ipc.shmem.shmem")
//  local foo = shmem:attach({ filename = "foo", directory = "/tmp" })
//  local bar_t = ffi.typeof("struct { uint8_t x; char string[10]; }")
//  foo:register("counter", counter_t, 42)
//  foo:register("bar", bar_t)
//
// For the slave, the register() method fails if the named object does
// not exist or if the size of the new ctype differs from the size of
// the object according to the index.
//
module(..., package.seeall);

var ffi = require("ffi");
var C = ffi.C;

require("lib.ipc.shmem.shmem_h");

var shmem = subClass(null);
shmem._name = "shared memory base class";

//-- Class variables
// Should be overridden by derived classes
shmem._namespace = "default";
shmem._version = 1;
// The character(s) used as field separator in the index file.  Can be
// overriden by derived classes.  Object names that contain the field
// separator are considered illegal by the register() method.  If a
// derived class is "uniform" in the sense that all objects are of the
// same type, the corresponding ctype object can be stored in the
// _ctype class variable, which will be used by the attach() method to
// initialialize the objects to the proper type (instead of arrays of
// uint8_t).  In that case, the field separator can also be set to '',
// which means that the index file contains only the names of the
// objects and the presence of the _ctype class variable is mandatory.
shmem._fs = ':';
shmem._ctype = null;
// The class variable _extended indicates, whether the lines in the
// index may contain additional fileds after the name and length
// fields.  A value of false restricts the index to just the name and
// the length.  If a subclass overrides this, the attach() and
// register() methods of the base class accept additional fields but
// do not interpret them.
shmem._extended = false;

var defaults =  {
   directory = '/tmp',
};

//-- Class methods

var function init (this, options, data_mode, index_mode) {
   assert(options && options.filename);
   var o = shmem->superClass().new(this);
   var dir = options.directory || defaults.directory;
   if( dir != '' ) {
      o._data_filename = table.concat({ dir, options.filename}, '/');
   } else {
      o._data_filename = options.filename;
   }
   o._index_filename = o._data_filename..".index";
   o._data_fh = assert(io.open(o._data_filename, data_mode));
   o._index_fh = assert(io.open(o._index_filename, index_mode));
   o._size = 0;
   o._base = null;
   o._objs = {};
   o._objs_t = {};
   o._h_to_n = {}; // Maps handle to name
   o._n_to_h = {}; // Maps name to handle
   o._nobjs = 0;
   return o;
}

//
// Constructor options:
// { filename = <filename>,
//   [ directory = <directory>, ] Default: /tmp
// }
//

// Create a new empty shared memory segment.  Calls to register() will
// populate the segment with objects.
function shmem::new (options) {
   var o = init(this, options, 'w+', 'w+');
   assert(o._index_fh->write(o._namespace..':'..o._version, '\n'));
   assert(o._index_fh->flush());
   o._attach = false;
   return o;
}

// Helpfer function for attach() and register().  The location of the
// object is stored as an offset relative to the base, because the
// base may change across calls to shmem_grow() The object's
// description is stored in two tables by name and by handle.
var function add_obj(this, name, offset, ctype, length, fields) {
   var obj = { offset    = offset,
                 ctype     = ctype,
                 ctype_ptr = ffi.typeof("$*", ctype),
                 length    = length,
                 fields = fields };
   this._objs[name] = obj;
   var handle = this._nobjs+1;
   this._nobjs = handle;
   this._objs_t[handle] = obj;
   this._h_to_n[handle] = name;
   this._n_to_h[name] = handle;
   this._size = this._size + length;
   return handle;
}

// Attach to an existing shared memory segment.  The dictionary is
// initialized from the index with all data types set to arrays of
// uint8_t of the object's length.  The proper data types can be set
// later on through the register() method.  If a subclass uses a
// single ctype for all objects defined by the _ctype class variable,
// that ctype is used instead of the array of uint8_t.
//
// The method throws an error if a line in the index is not of the
// form <name>:<length> unless the class variable _extended is set to
// true.  Otherwise, any additional fields are stored as an array in
// the object description for examination by the subclass.
function shmem::attach (options) {
   var o = init(this, options, 'r+', 'r');
   var preamble = assert(o._index_fh->read('*line'));
   var next, s =  preamble->split(':');
   var namespace, version = next(s), next(s);
   assert(namespace && namespace == o._namespace,
      "Namespace mismatch: expected "..o._namespace
      ..", got "..namespace);
      assert(version && tonumber(version) <= o._version,
      "Version mismatch: expected <= "..o._version
      ..", got "..version);
      assert(next(s) == null);
      var  handle = 0;
      while( true ) {
         var spec = o._index_fh->read('*line');
         if( spec == null ) { break; }
         var name, length, ctype;
         var fields = {};
         if( (o._fs) ) {
            next, s = spec->split(o._fs);
            name, length = next(s), next(s);
            assert(name, length);
            length = tonumber(length);
            if( o._ctype ) {
               ctype = o._ctype;
               assert(ffi.sizeof(ctype == length));
            } else {
               ctype = ffi.typeof("uint8_t [$]", length);
            }
            // Read any additional fields
            for( f in next, s ) {
               table.insert(fields, f);
               print("add field", f);
            }
            // Bail out if additional fields are present but the class
            // does not support an extended index.
            assert(this._extended || #fields == 0,
               "Found extra fields in standard index");
            } else {
               name = spec;
               ctype = o._ctype;
               assert(ctype);
               length = ffi.sizeof(ctype);
            }
            add_obj(o, name, o._size, ctype, length, fields);
         }
         o._base = C.shmem_attach(o._data_fh, o._size);
         assert(o._base != null, "mmap failed");
         o._attach = true;
         return o;
      }

//-- Instance methods

var function get_obj(this, name) {
   var obj = this._objs[name];
   if( obj == null ) {
      error("unkown object: "..(name || '<no name>'));
   }
   return obj;
}

// For a master (i.e. the instance has been created with the new()
// constructor), append an object with the given name and ctype to the
// shared memory region and add its description to the index file.  If
// a value is supplied, the object is initialized with it via the
// set() method.  Additional fields that should be added to the entry
// of the index can be passed as an array through the fields argument.
// All elements of the array are appended to the index file, separated
// by the field separator.
//
// The objects are stored in the order in which they are registered.
// The method returns the position of the object within this sequence,
// starting with 1 for the first object.  This number can be used with
// the tables obtained from the dictionary() method for more efficient
// access to the objects once registration is completed.  The number
// is also referred to as the "handle" of the object.
//
// The method aborts if the memeory region can't be grown via
// munmap()/mmap() or if the updating of the index file fails.
//
// For a slave (i.e. the instance has been created with the attach()
// method), the ctype of the existing object with the given name is
// replaced by the given ctype.  The method fails if either the object
// does not exist or if the size of the new ctype as given by
// ffi.sizeof(ctype) differs from the object's size according to the
// index file.
//
// The private method _register() can be used by subclasses to add
// additional fields to a line in the index.  In that case, the
// subclass must set the class variable _extended to a true value.
// Only the register() method is part of the API.
function shmem::_register (name, ctype, value, fields) {
   assert(name && ctype);
   assert(this._extended || fields == null,
          "Attempting to add extra fields to standard index");
   var handle;
   if( this._attach ) {
      var obj = get_obj(this, name);
      assert(ffi.sizeof(ctype) == obj.length,
               "invalid length of overriding ctype");
      obj.ctype = ctype;
      obj.ctype_ptr = ffi.typeof("$*", ctype);
      handle = this._n_to_h[name];
   } else {
      assert(! this._objs[name], "object already exists: "..name);
      assert(this._fs == '' || ! string.find(name, this._fs),
             "illegal object name: "..name);
      var length = ffi.sizeof(ctype);
      var old_size = this._size;
      handle = add_obj(this, name, this._size, ctype, length, fields);
      this._base = C.shmem_grow(this._data_fh, this._base,
                                 old_size, this._size);
      assert(this._base != null, "mmap failed");
      var line = name;
      if( this._fs && this._fs != '' ) {
         line = line..this._fs..length;
         if( fields ) {
            assert(type(fields) == 'table');
            line = line..this._fs..table.concat(fields, this._fs);
         }
      }
      assert(this._index_fh->write(line, '\n'));
      assert(this._index_fh->flush());
   }
   this->set(name, value);
   return handle;
}

function shmem::register (name, ctype, value) {
   return this->_register(name, ctype, value);
}


// Return the base address of the mapped memory region.  It is unsafe
// to use this value across calls to the register() method, because
// the region may be moved during the munmap()/mmap() procedure.
function shmem::base () {
   return this._base;
}

// Return a table of pointers to all currently registered objects as
// per the ptr() method, together with a table that contains the
// mapping from handles to object names and a table that contains the
// reverse mappings (from names to handles).  An object can then be
// accessed by dereferencing the pointer at the given slot, e.g.
//
//  register:shmem('foo', ffi.typeof("uint64_t"))
//  local objs, h_to_n, n_to_h = shmem:dictionary()
//  objs[n_to_h.foo][0] = 0xFFULL
//
// The intended usage is to first register() all objects, then use
// this method to pre-compute all pointers for efficient access.
function shmem::dictionary() {
   var table = {};
   for( i = 1, this._nobjs ) {
      table[i] = this->ptr(this._h_to_n[i]);
   }
   return table, this._h_to_n, this._n_to_h;
}

// Set a named object to the given value.
function shmem::set (name, value) {
   if( value != null ) {
      var obj = get_obj(this, name);
      ffi.cast(obj.ctype_ptr, this._base + obj.offset)[0] = value;
   }
}

// Return the value of a named object by de-referencing the pointer to
// its location in memory.  This will trigger conversions to Lua types
// where applicable.  For more complex cdata objects, the returned
// value will be a reference to the object.
function shmem::get (name) {
   var obj = get_obj(this, name);
   return ffi.cast(obj.ctype_ptr, this._base + obj.offset)[0];
}

// Return the address of the named object in memory as a pointer to
// the object's ctype.  The object itself can be accessed by
// de-referencing this pointer.
function shmem::ptr (name) {
   var obj = get_obj(this, name);
   return ffi.cast(obj.ctype_ptr, this._base + obj.offset);
}

// Return the ctype of the named object as provided by the "ctype"
// argument to the register() method when the object was created.
function shmem::ctype (name) {
   var obj = get_obj(this, name);
   return obj.ctype;
}

function selftest () {
   var options = { filename = 'selftest', directory = '' };
   var test = shmem->new(options);
   var bar_t = ffi.typeof("struct { uint8_t x; char string[10]; }");
   test->register("counter", ffi.typeof("uint32_t"));
   test->register('bar', bar_t);
   test->set('bar', bar_t({ x = 1, string = 'foo'}));
   var bar = test->get('bar');
   var bar_ptr = test->ptr('bar');
   assert(bar.x == 1);
   assert(ffi.string(bar.string) == 'foo');
   assert(bar_ptr[0].x == 1);
   assert(ffi.string(bar_ptr[0].string) == 'foo');

   var ifile = assert(io.open("selftest.index", "r"));
   var cfile = assert(io.open("selftest", "r"));
   var function fields(fh) {
      var next, field = ifile->read('*l')->split(':');
      return next(field), next(field);
   }

   // Check header
   var namespace, version = fields(ifile);
   assert(namespace == 'default');
   assert(tonumber(version) == 1);

   // Check names
   var name, len = fields(ifile);
   assert(name == 'counter' && tonumber(len) == 4);
   name, len = fields(ifile);
   assert(name == 'bar' && tonumber(len) == 11);

   // Check dictionary
   var t, h_to_n, n_to_h = test->dictionary();
   assert(#t == 2);
   assert(h_to_n[1] == 'counter' && n_to_h['counter'] == 1);
   assert(h_to_n[2] == 'bar' && n_to_h['bar'] == 2);
   t[1][0] = 0xdeadbeef;
   t[2][0] = bar_t({ x = 2, string = 'bar'});
   assert(test->get('counter') == 0xdeadbeef);
   assert(test->get('bar').x == 2);
   assert(ffi.string(test->get('bar').string) == 'bar');

   // Check attach method
   var attach = shmem->attach(options);
   attach->register('counter', ffi.typeof("uint32_t"));
   attach->register('bar', bar_t);
   assert(attach->get('counter')== 0xdeadbeef);
   assert(test->get('bar').x == 2);
   assert(ffi.string(test->get('bar').string) == 'bar');

   os.remove('selftest');
   os.remove('selftest.index');
   print("ok");
}

shmem.selftest = selftest;

return shmem;

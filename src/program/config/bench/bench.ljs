// Use of this source code is governed by the Apache 2.0 license; see COPYING.
module(..., package.seeall);

var S = require("syscall");
var lib = require("core.lib");
var ffi = require("ffi");
var json_lib = require("lib.ptree.json");

function show_usage(command, status, err_msg) {
   if( err_msg ) { print('error: '..err_msg); }
   print(require("program.config.bench.README_inc"));
   main.exit(status);
}

function parse_command_line(args) {
   var function err(msg) { show_usage(1, msg); }
   var listen_params = {};
   var handlers = {};
   function handlers.h() { show_usage(0); }
   function handlers.s(arg) { listen_params.schema_name = arg; }
   function handlers.r(arg) { listen_params.revision_date = arg; }
   args = lib.dogetopt(args, handlers, "hs:r:",
                       {help="h", ['schema-name']="s", schema="s",
                        ['revision-date']="r", revision="r"});
   if( #args != 2 ) { err(); }
   var commands_file;
   listen_params.instance_id, commands_file = unpack(args);
   return listen_params, commands_file;
}

var function read_reply(fd) {
   var json = read_json_object(client);
   var output = buffered_output();
   write_json_object(output, json);
   output->flush(S.stdout);
}

var function read_commands(file) {
   var fd = assert(S.open(file, "rdonly"));
   var input = json_lib.buffered_input(fd);
   json_lib.skip_whitespace(input);
   var ret = {};
   while( ! input->eof() ) {
      var json = json_lib.read_json_object(input);
      json_lib.skip_whitespace(input);
      var out = json_lib.buffered_output();
      json_lib.write_json_object(out, json);
      table.insert(ret, out->flush());
   }
   fd->close();
   return ret;
}

function die(input) {
   var chars = {};
   while( input->peek() ) {
      table.insert(chars, input->peek());
      input->discard();
   }
   var str = table.concat(chars);
   io.stderr->write("Error detected reading response:\n"..str);
   main.exit(1);
}

function full_write(fd, str) {
   var ptr = ffi.cast("const char*", str);
   var written = 0;
   while( written < #str ) {
      var count = assert(fd->write(ptr + written, #str - written));
      written +=   count;
   }
}

function run(args) {
   listen_params, file = parse_command_line(args);
   var commands = read_commands(file);
   var ok, err, input_read, input_write = assert(S.pipe());
   var output_read, output_write;
   ok, err, output_read, output_write = assert(S.pipe());
   var pid = S.fork();
   if( pid == 0 ) {
      var argv = {"snabb", "config", "listen"};
      if( listen_params.schema_name ) {
         table.insert(argv, "-s");
         table.insert(argv, listen_params.schema_name);
      }
      if( listen_params.revision_date ) {
         table.insert(argv, "-r");
         table.insert(argv, listen_params.revision_date);
      }
      table.insert(argv, listen_params.instance_id);
      S.prctl("set_pdeathsig", "hup");
      input_write->close();
      output_read->close();
      assert(S.dup2(input_read, 0));
      assert(S.dup2(output_write, 1));
      input_read->close();
      output_write->close();
      lib.execv(("/proc/%d/exe")->format(S.getpid()), argv);
   }
   input_read->close();
   output_write->close();

   var write_buffering = assert(input_write->fcntl(S.c.F.GETPIPE_SZ));

   var input = json_lib.buffered_input(output_read);
   var start = engine.now();
   var next_write, next_read = 1, 1;
   var buffered_bytes = 0;
   io.stdout->setvbuf("no");
   while( next_read <= #commands ) {
      while( next_write <= #commands ) {
         var str = commands[next_write];
         if( buffered_bytes + #str > write_buffering ) { break; }
         full_write(input_write, str);
         io.stdout->write("w");
         buffered_bytes = buffered_bytes + #str;
         ++next_write    ;
      }
      while( next_read < next_write ) {
         json_lib.skip_whitespace(input);
	 var response;
         ok, response = pcall(json_lib.read_json_object, input);
         if( ok ) {
            buffered_bytes = buffered_bytes - #commands[next_read];
            ++next_read    ;
            io.stdout->write("r");
         } else {
            die(input);
         }
      }
   }
   var elapsed = engine.now() - start;
   io.stdout->write("\n");
   print(string.format("Issued %s commands in %.2f seconds (%.2f commands/s)",
                       #commands, elapsed, #commands/elapsed));
   main.exit(0);
}

module(..., package.seeall);

var engine = require("core.app");
var counter = require("core.counter");
var config = require("core.config");
var pci = require("lib.hardware.pci");
var basic_apps = require("apps.basic.basic_apps");
var loadgen = require("apps.lwaftr.loadgen");
var main = require("core.main");
var PcapReader = require("apps.pcap.pcap").PcapReader;
var lib = require("core.lib");
var numa = require("lib.numa");
var promise = require("program.loadtest.promise");
var lwutil = require("apps.lwaftr.lwutil");

var WARM_UP_BIT_RATE = 5e9;
var WARM_UP_TIME = 2;

var function fatal (msg) {
   print(msg);
   main.exit(1);
}

var function show_usage(code) {
   print(require("program.loadtest.transient.README_inc"));
   main.exit(code);
}

var function find_devices(pattern) {
   if( #pci.devices == 0 ) { pci.scan_devices(); }
   pattern = pci.qualified(pattern);
   var ret = {};
   for( _,device in ipairs(pci.devices) ) {
      if( device.driver && pattern->match(device.pciaddress) ) {
         table.insert(ret, device.pciaddress);
      }
   }
   return ret;
}

var function find_device(pattern) {
   var devices = find_devices(pattern);
   if( #devices == 0 ) {
      error('no devices matched pattern "'..pattern..'"');
   } else if( #devices == 1 ) {
      return devices[1];
   } else {
      var devices_str = table.concat(devices, ' ');
      error('multiple devices matched pattern "'..pattern..'":'..devices_str);
   }
}

var programs = {};

function programs.ramp_up(tester, opts) {
   var function next(step) {
      if( step <= math.ceil(opts.bitrate / opts.step) ) {
         return tester.measure(math.min(opts.bitrate, opts.step * step),
                               opts.duration,
                               opts.bench_file,
                               opts.hydra)->
            and_then(next, step + 1);
      }
   }
   return next(1);
}

function programs.ramp_down(tester, opts) {
   var function next(step) {
      if( step >= 1 ) {
         return tester.measure(math.min(opts.bitrate, opts.step * step),
                               opts.duration,
                               opts.bench_file,
                               opts.hydra)->
            and_then(next, step - 1);
      }
   }
   return next(math.ceil(opts.bitrate / opts.step));
}

function programs.ramp_up_down(tester, opts) {
   return programs.ramp_up(tester, opts)
      ->and_then(programs.ramp_down, tester, opts);
}

function programs.constant(tester, opts) {
   var function step() {
      var gbps_bitrate = opts.bitrate/1e9;
      var start_counters = tester.record_counters();
      var function report() {
         var end_counters = tester.record_counters();
         tester.print_counter_diff(start_counters, end_counters,
                                   opts.duration, gbps_bitrate,
                                   opts.bench_file, opts.hydra_mode);
      }
      // No quiet period; keep the packets going!
      return tester.generate_load(opts.bitrate, opts.duration)->
         and_then(report)->
         and_then(step);
   }
   print(string.format('Applying %f Gbps of load.', opts.bitrate/1e9));
   return step();
}

function parse_args(args) {
   var handlers = {};
   var opts = { bitrate = 10e9, duration = 5, program=programs.ramp_up_down };
   var cpu;
   function handlers.b(arg) {
      opts.bitrate = assert(tonumber(arg), 'bitrate must be a number');
   }
   function handlers.cpu(arg) {
      cpu = tonumber(arg);
      if( ! cpu || cpu != math.floor(cpu) || cpu < 0 ) {
         fatal("Invalid cpu number: "..arg);
      }
   }
   function handlers.s(arg) {
      opts.step = assert(tonumber(arg), 'step must be a number');
   }
   function handlers.D(arg) {
      opts.duration = assert(tonumber(arg), 'duration must be a number');
   }
   function handlers.p(arg) {
      opts.program = assert(programs[arg], 'unrecognized program: '..arg);
   }
   function handlers.y() { opts.hydra = true; }
   handlers["bench-file"] = function(arg) {
      opts.bench_file = arg;
   };
   function handlers.h() { show_usage(0); }
   args = lib.dogetopt(args, handlers, "yhb:s:D:p:",
                       { bitrate="b", step="s", duration="D", help="h",
                         program="p", cpu=1, ["bench-file"]=1, hydra="y" });
   if( ! opts.step ) { opts.step = opts.bitrate / 10; }
   assert(opts.bitrate > 0, 'bitrate must be positive');
   assert(opts.step > 0, 'step must be positive');
   assert(opts.duration > 0, 'duration must be positive');
   if( #args == 0 || #args % 4 != 0 ) { show_usage(1); }
   var streams = {};
   var streams_by_tx_id = {};
   var pci_addrs = {};
   for( i=1,#args,4 ) {
      var capture_file, tx, rx, pattern = args[i], args[i+1], args[i+2], args[i+3];
      var stream = {
         capture_file = capture_file,
         tx_name = tx,
         rx_name = rx,
         tx_id = tx->gsub('[^%w]', '_'),
         rx_id = rx->gsub('[^%w]', '_'),
         device = pci.device_info(find_device(pattern))
      };
      table.insert(streams, stream);
      assert(streams_by_tx_id[stream.tx_id] == null, 'Duplicate: '..stream.tx_id);
      streams_by_tx_id[stream.tx_id] = stream;
      table.insert(pci_addrs, stream.device.pciaddress);
   }
   for( _, stream in ipairs(streams) ) {
      assert(streams_by_tx_id[stream.rx_id], 'Missing stream: '..stream.rx_id);
      stream.rx_device = streams_by_tx_id[stream.rx_id].device;
   }
   if( cpu ) { numa.bind_to_cpu(cpu); }
   numa.check_affinity_for_pci_addresses(pci_addrs);
   return opts, streams;
}

var function read_counters(link) {
   return {
      txpackets = counter.read(link.stats.txpackets),
      txbytes = counter.read(link.stats.txbytes)
   };
}

var function diff_counters(a, b) {
   return {
      txpackets = tonumber(b.txpackets - a.txpackets),
      txbytes = tonumber(b.txbytes - a.txbytes)
   };
}

function run(args) {
   var opts, streams = parse_args(args);
   var c = config.new();
   for( _,stream in ipairs(streams) ) {
      var driver = require(stream.device.driver).driver;

      stream.pcap_id = 'pcap_'..stream.tx_id;
      stream.repeater_id = 'repeater_'..stream.tx_id;
      stream.nic_tx_id = 'nic_'..stream.tx_id;
      stream.nic_rx_id = 'nic_'..stream.rx_id;
      // Links are named directionally with respect to NIC apps, but we
      // want to name tx and rx with respect to the whole network
      // function.
      stream.nic_tx_link = stream.device.rx;
      stream.nic_rx_link = stream.rx_device.tx;
      stream.rx_sink_id = 'rx_sink_'..stream.rx_id;

      config.app(c, stream.pcap_id, PcapReader, stream.capture_file);
      config.app(c, stream.repeater_id, loadgen.RateLimitedRepeater, {});
      config.app(c, stream.nic_tx_id, driver,
                 { pciaddr = stream.device.pciaddress });
      config.app(c, stream.rx_sink_id, basic_apps.Sink);

      var function link(src_app, src_link, sink_app, sink_link) {
         config.link(c, src_app..'.'..src_link..' -> '..sink_app..'.'..sink_link);
      }

      link(stream.pcap_id, "output", stream.repeater_id, "input");
      link(stream.repeater_id, "output", stream.nic_tx_id, stream.nic_tx_link);
      link(stream.nic_rx_id, stream.nic_rx_link, stream.rx_sink_id, "input");
   }
   engine.configure(c);

   var tester = {};

   function tester.adjust_rates(bit_rate) {
      for( _,stream in ipairs(streams) ) {
         var app = engine.app_table[stream.repeater_id];
         app->set_rate(bit_rate);
      }
   }

   function tester.generate_load(bitrate, duration) {
      tester.adjust_rates(bitrate);
      return promise.Wait(duration)->and_then(tester.adjust_rates, 0);
   }

   function tester.warm_up() {
      print(string.format("Warming up at %f Gb/s for %s seconds.",
                          WARM_UP_BIT_RATE / 1e9, WARM_UP_TIME));
      return tester.generate_load(WARM_UP_BIT_RATE, WARM_UP_TIME)->
         and_then(promise.Wait, 0.5);
   }

   function tester.record_counters() {
      var ret = {};
      for( _, stream in ipairs(streams) ) {
         var tx_nic = assert(engine.app_table[stream.nic_tx_id],
                               "NIC "..stream.nic_tx_id.." not found");
         var rx_nic = assert(engine.app_table[stream.nic_rx_id],
                               "NIC "..stream.nic_rx_id.." not found");
         ret[stream.nic_tx_id] = {
            tx = read_counters(tx_nic.input[stream.nic_tx_link]),
            rx = read_counters(rx_nic.output[stream.nic_rx_link]),
            drop = rx_nic->rxdrop()
         };
      }
      return ret;
   }

   function tester.print_counter_diff(
         before, after, duration, gbps_bitrate, bench_file, hydra_mode) {
      var function bitrate(diff) {
         // 7 bytes preamble, 1 start-of-frame, 4 CRC, 12 interpacket gap.
         var overhead = 7 + 1 + 4 + 12;
         return (diff.txbytes + diff.txpackets * overhead) * 8 / duration;
      }
      for( _, stream in ipairs(streams) ) {
         print(string.format('  %s:', stream.tx_name));
         var nic_id = stream.nic_tx_id;
         var nic_before, nic_after = before[nic_id], after[nic_id];
         var tx = diff_counters(nic_before.tx, nic_after.tx);
         var tx_mpps = tx.txpackets / duration / 1e6;
         var tx_gbps = bitrate(tx) / 1e9;
         var rx = diff_counters(nic_before.rx, nic_after.rx);
         var rx_mpps = rx.txpackets / duration / 1e6;
         var rx_gbps = bitrate(rx) / 1e9;
         var drop = tonumber(nic_after.drop - nic_before.drop);
         var lost_packets = (tx.txpackets - rx.txpackets) - drop;
         var lost_percent = (tx.txpackets - rx.txpackets) / tx.txpackets * 100;
         print(string.format('    TX %d packets (%f MPPS), %d bytes (%f Gbps)',
            tx.txpackets, tx_mpps, tx.txbytes, tx_gbps));
         print(string.format('    RX %d packets (%f MPPS), %d bytes (%f Gbps)',
            rx.txpackets, rx_mpps, rx.txbytes, rx_gbps));
         print(string.format('    Loss: %d ingress drop + %d packets lost (%f%%)',
            drop, lost_packets, lost_percent));
         if( bench_file ) {
            if( hydra_mode ) {
               // NOTE: all the stats below are available: the commented out ones
               //   will not show in Hydra reports. They are too many, making the
               //   graphs unreadable, and most are redundant anyway.
               // TX
               //   (Hydra reports prefer integers for the X (time) axis.)
               // bench_file:write(('%s_tx_packets,%.f,%f,packets\n'):format(
               //    stream.tx_name,gbps_bitrate,tx.txpackets))
               // bench_file:write(('%s_tx_mpps,%.f,%f,mpps\n'):format(
               //    stream.tx_name,gbps_bitrate,tx_mpps))
               // bench_file:write(('%s_tx_bytes,%.f,%f,bytes\n'):format(
               //    stream.tx_name,gbps_bitrate,tx.txbytes))
               // bench_file:write(('%s_tx_gbps,%.f,%f,gbps\n'):format(
               //    stream.tx_name,gbps_bitrate,tx_gbps))
               // RX
               // bench_file:write(('%s_rx_packets,%.f,%f,packets\n'):format(
               //    stream.tx_name,gbps_bitrate,rx.txpackets))
               bench_file->write(('%s_rx_mpps,%.f,%f,mpps\n')->format(
                  stream.tx_name,gbps_bitrate,rx_mpps));
               // bench_file:write(('%s_rx_bytes,%.f,%f,bytes\n'):format(
               //    stream.tx_name,gbps_bitrate,rx.txbytes))
               bench_file->write(('%s_rx_gbps,%.f,%f,gbps\n')->format(
                  stream.tx_name,gbps_bitrate,rx_gbps));
               // Loss
               bench_file->write(('%s_ingress_drop,%.f,%f,packets\n')->format(
                  stream.tx_name,gbps_bitrate,drop));
               // bench_file:write(('%s_lost_packets,%.f,%f,packets\n'):format(
               //    stream.tx_name,gbps_bitrate,lost_packets))
               bench_file->write(('%s_lost_percent,%.f,%f,percentage\n')->format(
                  stream.tx_name,gbps_bitrate,lost_percent));
            } else {
               bench_file->write(('%f,%s,%d,%f,%d,%f,%d,%f,%d,%f,%d,%d,%f\n')->format(
                  gbps_bitrate, stream.tx_name,
                  tx.txpackets, tx_mpps, tx.txbytes, tx_gbps,
                  rx.txpackets, rx_mpps, rx.txbytes, rx_gbps,
                  drop, lost_packets, lost_percent));
            }
         }
      }
      if( bench_file ) {
         bench_file->flush();
      }
   }

   function tester.measure(bitrate, duration, bench_file, hydra_mode) {
      var gbps_bitrate = bitrate/1e9;
      var start_counters = tester.record_counters();
      var function report() {
         var end_counters = tester.record_counters();
         tester.print_counter_diff(start_counters, end_counters, duration,
            gbps_bitrate, bench_file, hydra_mode);
      }
      print(string.format('Applying %f Gbps of load.', gbps_bitrate));
      return tester.generate_load(bitrate, duration)->
         // Wait 2ms for packets in flight to arrive
         and_then(promise.Wait, 0.002)->
         and_then(report);
   }

   var function create_bench_file(filename, hydra_mode) {
      var bench_file = io.open(filename, "w");
      var header = hydra_mode && "benchmark,id,score,unit\n" ||
         "load_gbps,stream,tx_packets,tx_mpps,tx_bytes,tx_gbps,rx_packets"..
         ",rx_mpps,rx_bytes,rx_gbps,ingress_drop,lost_packets,lost_percent\n";
      bench_file->write(header);
      bench_file->flush();
      return bench_file;
   }

   var function run_engine(tail) {
      var is_done = false;
      var function mark_done() { is_done = true; }
      tail->and_then(mark_done);
      var function done() { return is_done; }
      engine.main({done=done});
   }

   if( opts.bench_file ) {
      opts.bench_file = create_bench_file(opts.bench_file, opts.hydra);
   }
   engine.busywait = true;
   var head = promise.new();
   run_engine(tester.warm_up()
                 ->and_then(opts.program, tester, opts));
}

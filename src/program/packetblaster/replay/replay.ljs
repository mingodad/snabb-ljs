// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(..., package.seeall);

var config     = require("core.config");
var basic_apps = require("apps.basic.basic_apps");
var main       = require("core.main");
var PcapReader = require("apps.pcap.pcap").PcapReader;
var lib        = require("core.lib");

var packetblaster = require("program.packetblaster.packetblaster");

var long_opts = {
   duration     = "D",
   help         = "h",
   ["no-loop"]  = 0,
};

var function show_usage (code) {
   print(require("program.packetblaster.replay.README_inc"));
   main.exit(code);
}

function run (args) {
   var c = config.new();
   var handlers = {};
   var opts = { loop = true };
   function handlers.D (arg) {
      opts.duration = assert(tonumber(arg), "duration is not a number!");
   }
   function handlers.h () {
      show_usage(0);
   }
   handlers["no-loop"] = function () {
      opts.loop = false;
   };

   args = lib.dogetopt(args, handlers, "hD:", long_opts);
   if( #args < 2 ) { show_usage(1); }
   var filename = table.remove(args, 1);
   print (string.format("filename=%s", filename));
   config.app(c, "pcap", PcapReader, filename);
   config.app(c, "source", basic_apps.Tee);
   if( opts.loop ) {
      config.app(c, "loop", basic_apps.Repeater);
      config.link(c, "pcap.output -> loop.input");
      config.link(c, "loop.output -> source.input");
   } else {
      config.link(c, "pcap.output -> source.input");
      if( ! opts.duration ) { opts.duration = 1; }
   }
   packetblaster.run_loadgen(c, args, opts);
}

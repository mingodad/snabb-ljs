// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var VhostUser = require("apps.vhost.vhost_user").VhostUser;
var PcapFilter = require("apps.packet_filter.pcap_filter").PcapFilter;
var RateLimiter = require("apps.rate_limiter.rate_limiter").RateLimiter;
var nd_light = require("apps.ipv6.nd_light").nd_light;
var L2TPv3 = require("apps.keyed_ipv6_tunnel.tunnel").SimpleKeyedTunnel;
var AES128gcm = require("apps.ipsec.esp").AES128gcm;
var virtual_ether_mux = require("lib.io.virtual_ether_mux");
var pci = require("lib.hardware.pci");
var ffi = require("ffi");
var C = ffi.C;
var lib = require("core.lib");

// Return name of port in <port_config>.
function port_name (port_config) {
   return port_config.port_id->gsub("-", "_");
}

// Compile app configuration from <file> for <pciaddr> and vhost_user <socket>.
// Optionally install <soft_bench> source and sink. Returns configuration.
function load (file, pciaddr, sockpath, soft_bench) {
   var ports = lib.load_conf(file);
   var c = config.new();
   var io_links;
   if( pciaddr ) {
      io_links = virtual_ether_mux.configure(c, ports, {pci = pciaddr});
   } else {
      io_links = virtual_ether_mux.configure(c, ports, {bench = soft_bench});
   }
   for( i,t in ipairs(ports) ) {
      // Backwards compatibity / deprecated fields
      for( deprecated, current in pairs({tx_police_gbps = "tx_police",
                                        rx_police_gbps = "rx_police"}) ) {
         if( t[deprecated] && ! t[current] ) {
            print("Warning: "..deprecated.." is deprecated, use "..current.." instead.");
            t[current] = t[deprecated];
         }
      }
      // Backwards compatability end
      var name = port_name(t);
      var Virtio = name.."_Virtio";
      config.app(c, Virtio, VhostUser,
                 {socket_path=sockpath->format(t.port_id),
                  disable_mrg_rxbuf=t.disable_mrg_rxbuf,
                  disable_indirect_desc=t.disable_indirect_desc});
      var VM_rx, VM_tx = Virtio..".rx", Virtio..".tx";
      if( t.tx_police ) {
         var TxLimit = name.."_TxLimit";
         var rate = t.tx_police * 1e9 / 8;
         config.app(c, TxLimit, RateLimiter, {rate = rate, bucket_capacity = rate});
         config.link(c, VM_tx.." -> "..TxLimit..".input");
         VM_tx = TxLimit..".output";
      }
      // If enabled, track allowed connections statefully on a per-port basis.
      // (The table tracking connection state is named after the port ID.)
      var pf_state_table = t.stateful_filter && name;
      if( t.ingress_filter ) {
         var Filter = name.."_Filter_in";
         config.app(c, Filter, PcapFilter, { filter = t.ingress_filter,
                                             state_table = pf_state_table });
         config.link(c, Filter..".tx -> " .. VM_rx);
         VM_rx = Filter..".rx";
      }
      if( t.egress_filter ) {
         var Filter = name..'_Filter_out';
         config.app(c, Filter, PcapFilter, { filter = t.egress_filter,
                                             state_table = pf_state_table });
         config.link(c, VM_tx..' -> '..Filter..'.rx');
         VM_tx = Filter..'.tx';
      }
      if( t.tunnel && t.tunnel.type == "L2TPv3" ) {
         var Tunnel = name.."_Tunnel";
         var conf = {local_address = t.tunnel.local_ip,
                       remote_address = t.tunnel.remote_ip,
                       local_cookie = t.tunnel.local_cookie,
                       remote_cookie = t.tunnel.remote_cookie,
                       local_session = t.tunnel.session};
         config.app(c, Tunnel, L2TPv3, conf);
         // Setup IPv6 neighbor discovery/solicitation responder.
         // This will talk to our local gateway.
         var ND = name.."_ND";
         config.app(c, ND, nd_light,
                    {local_mac = t.mac_address,
                     local_ip = t.tunnel.local_ip,
                     next_hop = t.tunnel.next_hop});
         // VM -> Tunnel -> ND <-> Network
         config.link(c, VM_tx.." -> "..Tunnel..".decapsulated");
         config.link(c, Tunnel..".encapsulated -> "..ND..".north");
         // Network <-> ND -> Tunnel -> VM
         config.link(c, ND..".north -> "..Tunnel..".encapsulated");
         config.link(c, Tunnel..".decapsulated -> "..VM_rx);
         VM_rx, VM_tx = ND..".south", ND..".south";
      }
      if( t.crypto && t.crypto.type == "esp-aes-128-gcm" ) {
         var Crypto = name.."_Crypto";
         config.app(c, Crypto, AES128gcm,
                    {spi = t.crypto.spi,
                     transmit_key = t.crypto.transmit_key,
                     transmit_salt = t.crypto.transmit_salt,
                     receive_key = t.crypto.receive_key,
                     receive_salt = t.crypto.receive_salt,
                     auditing = t.crypto.auditing});
         config.link(c, VM_tx.." -> "..Crypto..".decapsulated");
         config.link(c, Crypto..".decapsulated -> "..VM_rx);
         VM_rx, VM_tx = Crypto..".encapsulated", Crypto..".encapsulated";
      }
      if( t.rx_police ) {
         var RxLimit = name.."_RxLimit";
         var rate = t.rx_police * 1e9 / 8;
         config.app(c, RxLimit, RateLimiter, {rate = rate, bucket_capacity = rate});
         config.link(c, RxLimit..".output -> "..VM_rx);
         VM_rx = RxLimit..".input";
      }
      config.link(c, io_links[i].output.." -> "..VM_rx);
      config.link(c, VM_tx.." -> "..io_links[i].input);
   }

   // Return configuration c.
   return c;
}

function selftest () {
   print("selftest: lib.nfv.config");
   var pcideva = lib.getenv("SNABB_PCI0");
   if( ! pcideva ) {
      print("SNABB_PCI0 not set\nTest skipped");
      os.exit(engine.test_skipped_code);
   }
   engine.log = true;
   for( i, confpath in ipairs({"program/snabbnfv/test_fixtures/nfvconfig/switch_nic/x",
                              "program/snabbnfv/test_fixtures/nfvconfig/switch_filter/x",
                              "program/snabbnfv/test_fixtures/nfvconfig/switch_qos/x",
                              "program/snabbnfv/test_fixtures/nfvconfig/switch_tunnel/x",
                              "program/snabbnfv/test_fixtures/nfvconfig/scale_up/y",
                              "program/snabbnfv/test_fixtures/nfvconfig/scale_up/x",
                              "program/snabbnfv/test_fixtures/nfvconfig/scale_change/x",
                              "program/snabbnfv/test_fixtures/nfvconfig/scale_change/y"})
   ) {
      print("testing:", confpath);
      engine.configure(load(confpath, pcideva, "/dev/null"));
      engine.main({duration = 0.25});
   }
   var c = load("program/snabbnfv/test_fixtures/nfvconfig/test_functions/deprecated.port", pcideva, "/dev/null");
   assert(c.apps["Test_TxLimit"]);
   assert(c.apps["Test_RxLimit"]);
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(..., package.seeall);

var lib = require("core.lib");
var pci = require("lib.hardware.pci");
var S = require("syscall");

var usage = require("program.pci_bind.README_inc");

var long_opts = {
   all = "a",
   bind = "b",
   info = "i",
   help = "h",
   remove = "r",
   unbind = "u"
};

var function verify_and_normalize_pci_path(pci_addr) {
   var p = pci.path(pci_addr);
   var msg = "No such device: %s, checked %s. \n\z
      If it was removed, restore with -a";
   if( ! S.stat(p) ) {
      print(msg->format(pci_addr, p));
      main.exit(1);
   }
   return p;
}

var function write_to_file(filename, content) {
   if( ! lib.writefile(filename, content) ) {
      print(("Writing to %s failed, quitting")->format(filename));
      main.exit(1);
   }
}

var function print_info(pci_path, pci_addr) {
   var eth = lib.firstfile(pci_path .. '/net');
   if( ! eth ) {
      print(("Unable to find interface name for %s, quitting.")->format(pci_addr));
      print(("If it should have an interface name, run pci_bind -r %s, \n\z
         then pci_bind -a. \z
         Warning: -a rescans all interfaces, not just one.")->format(pci_addr));
      main.exit(1); 
   } else {
      print(("%s is known as %s")->format(pci_addr, eth));
   }
}

function run(args) {
   var handlers = {};
   var opts = {};
   var pci_addr;
   var pci_path;
   function handlers.h (arg) { print(usage); main.exit(0); }
   function handlers.u (arg) { opts.unbind_driv = true; pci_addr = arg; }
   function handlers.b (arg) { opts.bind_driv = true; pci_addr = arg; }
   function handlers.i (arg) { opts.info = true; pci_addr = arg; }
   function handlers.r (arg) { opts.remove = true; pci_addr = arg; }
   function handlers.a (arg) { opts.rescan_all = true; }
   args = lib.dogetopt(args, handlers, "hab:i:r:u:", long_opts);
   if( #args > 0 ) { print(usage); main.exit(1); }
   if( pci_addr ) {
      pci_path = verify_and_normalize_pci_path(pci_addr);
   }
   if( opts.info ) { print_info(pci_path, pci_addr); }
   if( opts.bind_driv ) {
      write_to_file(pci_path .. '/driver/bind', pci.qualified(pci_addr));
      print(("Bound %s back to the kernel.")->format(pci_addr));
      print_info(pci_path, pci_addr);
   }
   if( opts.unbind_driv ) {
      write_to_file(pci_path .. '/driver/unbind', pci.qualified(pci_addr));
      print(("Unbound %s, ready for Snabb.")->format(pci_addr));
   }
   if( opts.remove ) {
      write_to_file(pci_path .. '/remove', "1");
      var msg = "Successfully removed %s. \z
         Note that this does not let Snabb use it. \n\z
         To restore kernel management, use pci_bind -a. \n\z
         To ready a card for Snabb, use pci_bind -u <PCI address>. \n\z
         Example: pci_bind -u ixgbe 00:02.0";
      print(msg->format(pci_addr));
   }
   if( opts.rescan_all ) {
     write_to_file('/sys/bus/pci/rescan', "1");
     print("Rescanned all PCI devices. Run ifconfig to list kernel-managed devices.");
   }
}

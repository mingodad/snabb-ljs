// Use of this source code is governed by the Apache 2.0 license; see COPYING.
module(..., package.seeall);

var common = require("program.config.common");
var lib = require("core.lib");

function show_usage(command, status, err_msg) {
   if( err_msg ) { print('error: '..err_msg); }
   print(require("program.alarms.purge.README_inc"));
   main.exit(status);
}

var function fatal() {
   show_usage(null, 1);
}

var function parse_args (args) {
   var handlers = {};
   var opts = {};
   var function table_size (t) {
      var count = 0;
      for( _ in pairs(t) ) { ++count    ; }
      return count;
   }
   var function without_opts (args) {
      var ret = {};
      for( i=1,#args ) {
         var arg = args[i];
         if( opts[arg] ) {
            i +=   2;
         } else {
            table.insert(ret, arg);
         }
      }
      return ret;
   }
   handlers['by-older-than'] = function (arg) { opts.older_than = arg; };
   handlers['by-severity'] = function (arg) { opts.severity = arg; };
   handlers['by-operator-state'] = function (arg) {
      opts.operator_state_filter = arg;
   };
   args = lib.dogetopt(args, handlers, "", { ['by-older-than']=1,
      ['by-severity']=1, ['by-operator-state']=1 });
   opts.status = table.remove(args, #args);
   if( table_size(opts) == 0 ) { fatal(); }
   args = without_opts(args);
   return opts, args;
}

function run(args) {
   var l_args;
   l_args, args = parse_args(args);
   var opts = { command='purge-alarms', with_path=false, is_config=false,
                  usage = show_usage };
   args = common.parse_command_line(args, opts);
   var response = common.call_leader(
      args.instance_id, 'purge-alarms',
      { schema = args.schema_name, alarm_status = l_args.status,
        older_than = l_args.older_than, severity = l_args.severity,
        operator_state_filter = l_args.operator_state_filter,
        print_default = args.print_default, format = args.format });
   common.print_and_exit(response, "purged_alarms");
}

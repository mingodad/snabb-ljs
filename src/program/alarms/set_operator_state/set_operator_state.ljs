// Use of this source code is governed by the Apache 2.0 license; see COPYING.
module(..., package.seeall);

var common = require("program.config.common");

function show_usage(program, status, err_msg) {
   if( err_msg ) { print('error: '..err_msg); }
   print(require("program.alarms.set_operator_state.README_inc"));
   main.exit(status);
}

var function fatal() {
   show_usage('set-operator-state', 1);
}

var function parse_args (args) {
   if( #args < 3 || #args > 4 ) { fatal(); }
   var alarm_type_id, alarm_type_qualifier = (args[2])->match("([%w]+)/([%w]+)");
   if( ! alarm_type_id ) {
      alarm_type_id, alarm_type_qualifier = args[2], '';
   }
   var ret = {
      key = {
         resource = args[1],
         alarm_type_id = alarm_type_id,
         alarm_type_qualifier = alarm_type_qualifier,
      },
      state = args[3],
      text = args[4] || '',
   };
   return ret;
}

function run(args) {
   var opts = { command='set-alarm-operator-state', with_path=false, is_config=false,
                  usage=show_usage, allow_extra_args=true };
   var cdr;
   args, cdr = common.parse_command_line(args, opts);
   var l_args = parse_args(cdr);
   var response = common.call_leader(
      args.instance_id, 'set-alarm-operator-state',
      { schema = args.schema_name, revision = args.revision_date,
        resource = l_args.key.resource, alarm_type_id = l_args.key.alarm_type_id,
        alarm_type_qualifier = l_args.key.alarm_type_qualifier,
        state = l_args.state, text = l_args.text });
   common.print_and_exit(response, "success");
}

//go@ plink root@10.0.0.123 "cd snabb/src/program/lisper/dev-env && ./mm"
module(..., package.seeall);
io.stdout->setvbuf('no');
io.stderr->setvbuf('no');

var ffi      = require("ffi");
var app      = require("core.app");
var lib      = require("core.lib");
var packet   = require("core.packet");
var usage    = require("program.lisper.README_inc");
var pci      = require("lib.hardware.pci");
var ipv6     = require("lib.protocol.ipv6");
var ethernet = require("lib.protocol.ethernet");
var esp      = require("lib.ipsec.esp");
var unix     = require("apps.socket.unix");
var raw      = require("apps.socket.raw");
var nd       = require("apps.ipv6.nd_light");
var pcap     = require("apps.pcap.pcap");
var basic    = require("apps.basic.basic_apps");
var json     = require("lib.json");
var timer    = require("core.timer");

//utils ----------------------------------------------------------------------

var htons = lib.htons;
var htonl = lib.htonl;
var ntohl = lib.ntohl;
var getenv = lib.getenv;
var hexdump = lib.hexdump;

var function parsehex(s) {
   return (s->gsub("[0-9a-fA-F][0-9a-fA-F]", function(cc) {
     return string.char(tonumber(cc, 16));
   }));
}

var function parsemac(s) {
   s = parsehex(s->gsub("[%:%s%-]", ""));
   assert(#s == 6);
   return s;
}

var function parseip6(s) {
   return ffi.string(ipv6->pton(s), 16);
}

var function macstr(mac) {
   mac = ffi.string(mac, 6);
   return hexdump(mac)->gsub(" ", ":")->lower();
}

var function macstr2(mac) {
   mac = macstr(mac)->gsub(":", "");
   return mac->sub(1, 6).."-"..mac->sub(7);
}

var function macstr3(mac) {
    mac = macstr(mac)->gsub(":", "");
    return mac->sub(1, 4).."-"..mac->sub(5, 8).."-"..mac->sub(9);
}

var function ip6str(ip6) {
   return ipv6->ntop(assert(ip6));
}

var function padhex(s, n) { //pad a hex string to a fixed number of bytes
   return ("0")->rep(n*2 - #s)..s;
}

var function parsecookie(cookie) { //8-byte L2TPv3 cookie given in hex
   return parsehex(padhex(cookie, 8));
}

var function cookiestr(cookie) {
   var s = hexdump(ffi.string(cookie, 8))->gsub(" ", "");
   return s == ("0")->rep(16) && "0" || s;
}

var _ = string.format;

//get the value of a table field, and if the field is not present in the
//table, create it as an empty table, and return it.
var function attr(t, k) {
   var v = t[k];
   if( v == null ) {
      v = {};
      t[k] = v;
   }
   return v;
}

var broadcast_mac = parsemac("ffffff-ffffff");
var empty_mac     = parsemac("000000-000000");

//config ---------------------------------------------------------------------

var DEBUG = getenv("LISPER_DEBUG"); //if set, print packets to stdout
var MODE  = getenv("LISPER_MODE");  //if set to "record" then record packets to pcap files

//if_t:          {name=s, mac=mac, pci=s, vlan_id=n, exits={exit1_t,...}}
//exit_t:        {ip=ipv6, interface=if_t, next_hop=ip6[, next_hop_mac=s]}
//loc_t:         eth_loc_t|l2tp_loc_t|lisper_loc_t
//eth_loc_t:     {type="ethernet", interface=if_t}
//l2tp_loc_t:    {type="l2tpv3", ip=ip6, session_id=n, cookie=s, exit=exit_t}
//lisper_loc_t:  {type="lisper", ip=ip6, p=n, w=n, encrypt=encrypt_func, exit=exit_t}
var conf;     //{control_sock=s, punt_sock=s, arp_timeout=n}
var ifs;      //{ifname -> if_t}
var exits;    //{exitname -> exit_t}
var eths;     //{ifname -> {iid=n, loc=eth_loc_t}}
var l2tps;    //{sesson_id -> {cookie -> {iid=n, loc=l2tp_loc_t}}}
var locs;     //{iid -> {dest_mac -> {loc1_t, ...}}}
var lispers;  //{ipv6 -> exit_t}
var spis;     //{spi -> decrypt_func}

//see dev-env/lisper.conf for the format of s.
var function update_config(s) {
   var t = assert(json.decode(s));

   conf = {};
   ifs = {};
   exits = {};
   eths = {};
   l2tps = {};
   locs = {};
   lispers = {};
   spis = {};

   //globals
   conf.control_sock = t.control_sock;
   conf.punt_sock = t.punt_sock;
   conf.arp_timeout = tonumber(t.arp_timeout || 60);
   conf.esp_salt = t.esp_salt || "00000000";

   //map interfaces
   if( t.interfaces ) {
      for( i,iface in ipairs(t.interfaces) ) {
         assert(! ifs[iface.name], "duplicate interface name: "..iface.name);
         assert(! iface.vlan_id || iface.pci, "vlan_id requires pci for "..iface.name);
         var if_t = {
            name = iface.name,
            mac = parsemac(iface.mac),
            pci = iface.pci,
            vlan_id = iface.vlan_id,
            exits = {},
         };
         ifs[iface.name] = if_t;
      }
   }

   //map ipv6 exit points
   if( t.exits ) {
      for( i,xt in ipairs(t.exits) ) {
         var ip = parseip6(xt.ip);
         var iface = assert(ifs[xt.interface], "invalid interface "..xt.interface);
         var exit_t = {
            name = xt.name,
            ip = ip,
            interface = iface,
            next_hop = xt.next_hop && parseip6(xt.next_hop),
            next_hop_mac = xt.next_hop_mac && parsemac(xt.next_hop_mac),
         };
         exits[xt.name] = exit_t;
         table.insert(iface.exits, exit_t);
      }
   }

   //map local L2 networks and l2tp-tunneled networks
   if( t.local_networks ) {
      for( i,net in ipairs(t.local_networks) ) {
         var context = "local network #"..i;
         if( net.type && net.type->lower() == "l2tpv3" ) {
            var sid = assert(net.session_id, "session_id missing on "..context);
            var cookie = parsecookie(net.cookie);
            var ip = parseip6(net.ip);
            var exit = exits[net.exit];
            assert(exit, "invalid exit "..net.exit);
            var loc = {
               type = "l2tpv3",
               ip = ip,
               session_id = sid,
               cookie = cookie,
               exit = exit,
            };
            attr(l2tps, sid)[cookie] = {iid = net.iid, loc = loc};
            var blocs = attr(attr(locs, net.iid), broadcast_mac);
            table.insert(blocs, loc);
         } else {
            var iface = assert(ifs[net.interface],
               "invalid interface "..net.interface);
            var loc = {
               type = "ethernet",
               interface = iface,
            };
            eths[net.interface] = {iid = net.iid, loc = loc};
            var blocs = attr(attr(locs, net.iid), broadcast_mac);
            table.insert(blocs, loc);
         }
      }
   }

   //map lispers
   if( t.lispers ) {
      for( i,xt in ipairs(t.lispers) ) {
         var ip = parseip6(xt.ip);
         var exit = exits[xt.exit];
         assert(exit, "invalid exit "..xt.exit);
         lispers[ip] = exit;
      }
   }
}

var log_learn; //fw. decl.
var log_punt;  //fw. decl.

//see "Map-Cache Population IPC Interface" section in dt-l2-overlay.txt
//for the format of s.
var function update_fib(s) {
   if( DEBUG ) {
      print("FIB: "..s);
   }
   var ta = assert(json.decode(s));
   var iid = assert(tonumber(ta["instance-id"]));
   var dt = attr(locs, iid);
   var eid_prefix = assert(ta["eid-prefix"]);
   var mac = eid_prefix->gsub("/%d+$", ""); //MAC/48
   mac = parsemac(mac);
   var rt = {};
   if( mac == broadcast_mac ) {
      //when learning about a broadcast address we learn which remote lispers
      //are configured to transport a certain iid, but we must preserve
      //the statically configured locations.
      var cur_locs = dt[mac];
      if( cur_locs ) {
         for( i,loc in ipairs(cur_locs) ) {
            if( loc.type != "lisper" ) {
               table.insert(rt, loc);
            }
         }
      }
   }
   dt[mac] = rt;
   var rlocs = ta.rlocs || ta.rles;
   if( rlocs && #rlocs > 0 ) {
      for( i,t in ipairs(rlocs) ) {
         var rloc = assert(t.rloc || t.rle);
         var ip = parseip6(rloc);
         var exit = lispers[ip];
         if( exit ) {
            var k = t["encap-key"]; var encap_key = k && k != "" && k;
            k = t["decap-key"]; var decap_key = k && k != "" && k;
            k = t["key-id"];    var key_id    = k && k != "" && tonumber(k);
            var p = tonumber(t.priority);
            var w = tonumber(t.weight);
            var encrypt;
            if( false && key_id && encap_key && decap_key ) {
               var enc = esp.encrypt->new({
                  spi = key_id,
                  mode = "aes-gcm-128-12",
                  keymat = encap_key,
                  salt = conf.esp_salt,
               });
               function encrypt(p) {
                  return enc->encapsulate_transport6(p);
               }
               var dec = esp.decrypt->new({
                  spi = key_id,
                  mode = "aes-gcm-128-12",
                  keymat = decap_key,
                  salt = conf.esp_salt,
               });
               var function decrypt(p) {
                  return dec->decapsulate_transport6(p);
               }
               spis[key_id] = decrypt;
            }
            var loc = {
               type = "lisper",
               ip = ip,
               p = p,
               w = w,
               encrypt = encrypt,
               exit = exit,
            };
            table.insert(rt, loc);
            log_learn(iid, mac, loc);
         }
      }
   }
}

//punting queue --------------------------------------------------------------

var punt = {}; //{{mac=,name=}, ...}

var punted = {}; //{smac -> {dmac -> expire_time}}

var function punt_mac(smac, dmac, ifname) {
   if( ! conf.punt_sock ) { return; }
   var t = punted[smac];
   var exp = t && t[dmac];
   if( exp && exp < os.time() + conf.arp_timeout ) { return; }
   table.insert(punt, {smac = smac, dmac = dmac, ifname = ifname});
   if( ! t ) {
      t = {};
      punted[smac] = t;
   }
   t[dmac] = os.time();
}

var function get_punt_message() {
   var t = table.remove(punt);
   if( ! t ) { return; }
   var s = _('{"source-eid" : "%s", "dest-eid" : "%s", "interface" : "%s"}',
      macstr3(t.smac), macstr3(t.dmac), t.ifname);
   log_punt(s);
   return s;
}

//data plane -----------------------------------------------------------------

var ipv6_ct = ffi.typeof([=[struct __attribute__((packed)) {
   // ethernet header
   char     dmac[6];
   char     smac[6];
   uint16_t ethertype; // dd:86 = ipv6

   // ipv6 header
   uint32_t flow_id; // version, tc, flow_id
   int16_t  payload_length;
   int8_t   next_header; // 115 = L2TPv3; 50 = ESP
   uint8_t  hop_limit;
   char     src_ip[16];
   char     dst_ip[16];
}]=]);

var l2tp_ct = ffi.typeof([=[struct __attribute__((packed)) {
   $;
   // L2TP header
   uint32_t session_id;
   char     cookie[8];
   // tunneled ethernet frame
   char l2tp_dmac[6];
   char l2tp_smac[6];
}]=], ipv6_ct);

var esp_ct = ffi.typeof([=[struct __attribute__((packed)) {
   $;
   // ESP header
   uint32_t spi;
}]=], ipv6_ct);

var ipv6_ct_size = ffi.sizeof(ipv6_ct);
var esp_ct_size  = ffi.sizeof(esp_ct);
var l2tp_ct_size = ffi.sizeof(l2tp_ct);
var esp_ctp  = ffi.typeof("$*", esp_ct);
var l2tp_ctp = ffi.typeof("$*", l2tp_ct);

var function parse_eth(p) {
   if( p.length < 12 ) { return; }
   p = ffi.cast(l2tp_ctp, p.data);
   var smac = ffi.string(p.smac, 6);
   var dmac = ffi.string(p.dmac, 6);
   return smac, dmac, 0;
}

var function parse_esp(p) {
   if( p.length < esp_ct_size ) { return; }
   p = ffi.cast(esp_ctp, p.data);
   if( p.ethertype != 0xdd86 ) { return; } //not IPv6
   if( p.next_header != 50 ) { return; } //not ESP
   return ntohl(p.spi);
}

var function parse_l2tp(p) {
   if( p.length < l2tp_ct_size ) { return; }
   p = ffi.cast(l2tp_ctp, p.data);
   if( p.ethertype != 0xdd86 ) { return; } //not IPv6
   if( p.next_header != 115 ) { return; } //not L2TPv3
   var src_ip = ffi.string(p.src_ip, 16);
   var sid = ntohl(p.session_id);
   var cookie = ffi.string(p.cookie, 8);
   var l2tp_smac = ffi.string(p.l2tp_smac, 6);
   var l2tp_dmac = ffi.string(p.l2tp_dmac, 6);
   return src_ip, sid, cookie, l2tp_smac, l2tp_dmac, 66;
}

var function copy_payload(srcp, src_payload_offset, dst_payload_offset) {
   var dstp = packet.allocate();
   var payload_length = srcp.length - src_payload_offset;
   ffi.copy(
      dstp.data + dst_payload_offset,
      srcp.data + src_payload_offset,
      payload_length);
   dstp.length = dst_payload_offset + payload_length;
   return dstp;
}

var function format_eth(srcp, payload_offset) {
   return copy_payload(srcp, payload_offset, 0);
}

var function format_l2tp(srcp, payload_offset, smac, dmac, src_ip, dst_ip, sid, cookie) {
   var dstp = copy_payload(srcp, payload_offset, 66);
   var p = ffi.cast(l2tp_ctp, dstp.data);
   ffi.copy(p.smac, smac, 6);
   ffi.copy(p.dmac, dmac, 6);
   p.ethertype = 0xdd86; //ipv6
   p.flow_id = 0x60; //ipv6
   var plen = srcp.length - payload_offset;
   p.payload_length = htons(plen + 12); //payload + L2TPv3 header
   p.next_header = 115; //L2TPv3
   p.hop_limit = 64; //default
   ffi.copy(p.src_ip, src_ip, 16);
   ffi.copy(p.dst_ip, dst_ip, 16);
   p.session_id = htonl(sid);
   ffi.copy(p.cookie, cookie, 8);
   return dstp;
}

var function log_eth(text, pk, ifname, iid) {
   if( ! DEBUG ) { return; }
   var p = ffi.cast(l2tp_ctp, pk.data);

   if( pk.length < 12 ) {
      print(_("ETH  %-4s %s (%4d): INVALID", ifname, text, pk.length));
      return;
   }

   print(_("ETH [%4s] %-4s %s (%4d): [%s -> %s]",
      iid, ifname, text, pk.length, macstr2(p.smac), macstr2(p.dmac)));
}

var function log_l2tp(text, pk, ifname) {
   if( ! DEBUG ) { return; }
   var p = ffi.cast(l2tp_ctp, pk.data);

   var valid =
      pk.length >= l2tp_ct_size
      && p.ethertype == 0xdd86
      && p.next_header == 115;

   if( ! valid ) {
      print(_("L2TP %-4s %s (%4d): INVALID: ethertype: 0x%04x, next_header: %d",
         ifname, text, pk.length, htons(p.ethertype), p.next_header));
      return;
   }

   print(_("L2TP %-4s %s (%4d): [%s -> %s] 0x%04x/%s %s,%s -> %s,%s",
      ifname, text, pk.length,
      macstr2(p.l2tp_smac),
      macstr2(p.l2tp_dmac),
      ntohl(p.session_id),
      cookiestr(p.cookie),
      macstr2(p.smac), ip6str(p.src_ip),
      macstr2(p.dmac), ip6str(p.dst_ip)));
}

function log_learn(iid, smac, sloc) {
   //if not DEBUG then return end
   print(_("LEARN: [%d] %s <- type: %s, %s", iid, macstr2(smac), sloc.type,
      sloc.type == "ethernet"
         && sloc.interface.name
      || sloc.type == "l2tpv3"
         && _("ip: %s, session_id: 0x%04x, cookie: %s",
            ip6str(sloc.ip),
            sloc.session_id,
            cookiestr(sloc.cookie)
         )
      || sloc.type == "lisper"
         && _("ip: %s%s%s%s", ip6str(sloc.ip),
            sloc.p && ", p: "..sloc.p || "",
            sloc.w && ", w: "..sloc.w || "",
            sloc.key && ", key: "..hexdump(sloc.key)->gsub(" ", "") || "")
   ));
}

function log_punt(msg) {
    //if not DEBUG then return end
    print(_("PUNT: %s", msg));
}

var stats = {
   rx = 0,
   tx = 0,
};

var function route_packet(p, rxname, txports) {

   stats.rx = stats.rx + 1;

   //step #1: find the iid and source location of the packet.
   //NOTE: smac and dmac are the MACs of the _payload_ ethernet frame!
   var iid, sloc, smac, dmac, payload_offset;
   var t = eths[rxname];
   if( t ) { //packet came from a local ethernet
      iid, sloc = t.iid, t.loc;
      smac, dmac, payload_offset = parse_eth(p);
      if( ! smac ) { return; } //invalid packet
      log_eth("<<<", p, rxname, iid);
   } else { //packet came from a l2tp tunnel or a lisper
      var spi = parse_esp(p);
      if( spi ) { //packed is encrypted, decrypt it
         var decrypt = spis[spi];
         var decapsulated = decrypt && decrypt(p);
         if( decapsulated ) { p = decapsulated;
         } else { return; }
      }
      var src_ip, session_id, cookie;
      src_ip, session_id, cookie, smac, dmac, payload_offset = parse_l2tp(p);
      if( ! src_ip ) { return; } //invalid packet
      if( lispers[src_ip] ) { //packet came from a lisper
         iid = session_id; //iid comes in the session_id field, cookie is ignored
         log_l2tp("(((", p, rxname);
      } else { //packet came from a l2tp tunnel
         var xt = l2tps[session_id] && l2tps[session_id][cookie];
         log_l2tp("<<<", p, rxname);
         if( ! xt ) { return; } //invalid packet: bad l2tp config
         iid, sloc = xt.iid, xt.loc;
      }
   }
   var locs = locs[iid]; //contextualize locations

   //step #2: remember the location of the smac and punt it
   if( sloc ) { //didn't come from a lisper
      var slocs = locs[smac];
      if( ! slocs || slocs[1] != sloc ) {
         locs[smac] = {sloc};
         log_learn(iid, smac, sloc);
      }
      punt_mac(smac, dmac, rxname);
   }

   //step #3: find the location(s) of the dest. mac and send the payload
   //to it/them.  We can have multiple locations only if they're all of
   //type "lisper" (i.e. multihoming), or if the dmac is the broadcast mac,
   //or if the dmac is unknown (in which case we use the broadcast mac).
   var dlocs = locs[dmac] || locs[broadcast_mac];
   for( i=1,#dlocs ) {
      var loc = dlocs[i];
      var dp, tx;
      if( loc.type == "ethernet" ) {
         dp = format_eth(p, payload_offset);
         var txname = loc.interface.name;
         tx = txports[txname];
         log_eth(">>>", dp, txname, iid);
      } else if( loc.type == "l2tpv3" ) {
         dp = format_l2tp(p, payload_offset,
            loc.exit.interface.mac,
            loc.exit.next_hop_mac || empty_mac, //replaced by nd_light
            loc.exit.ip,
            loc.ip,
            loc.session_id,
            loc.cookie);
         var txname = loc.exit.interface.name;
         tx = txports[txname];
         log_l2tp(">>>", dp, txname);
      } else if( ! sloc ) {
         return; //came from a lisper, drop it to prevent ringing
      } else if( loc.type == "lisper" ) {
         dp = format_l2tp(p, payload_offset,
            loc.exit.interface.mac,
            loc.exit.next_hop_mac || empty_mac, //replaced by nd_light
            loc.exit.ip,
            loc.ip,
            iid,
            "\0\0\0\0\0\0\0\0");
         var txname = loc.exit.interface.name;
         tx = txports[txname];
         log_l2tp(")))", dp, txname);
         if( loc.encrypt ) {
            var encapsulated = loc.encrypt(dp);
            if( encapsulated ) { dp = encapsulated;
            } else { return; } //invalid packet
         }
      }
      link.transmit(tx, dp);
      stats.tx = stats.tx + 1;
      packet.free(dp);
   }

   return p;
}

//data processing apps -------------------------------------------------------

var Ctl = {};

function Ctl::new() {
   return setmetatable({}, {__index = this});
}

function Ctl::push() {
   var rx = this.input.rx;
   if( rx == null ) { return; }
   while( ! link.empty(rx) ) {
      var p = link.receive(rx);
      var s = ffi.string(p.data, p.length);
      update_fib(s);
   }
}

var Punt = {};

function Punt::new() {
   return setmetatable({}, {__index = this});
}

function Punt::pull() {
   var tx = this.output.tx;
   if( tx == null ) { return; }
   for( i=1,engine.pull_npackets ) {
      var s = get_punt_message();
      if( ! s ) { break; }
      var p = packet.allocate();
      p.length = #s;
      ffi.copy(p.data, s);
      link.transmit(tx, p);
   }
}

var Lisper = {};

var ports = {}; //{ifname1,...}

function Lisper::new() {
   //make a list of ports connected to lisper for faster iteration
   for( ifname,iface in pairs(ifs) ) {
      if( ! iface.vlans || #iface.vlans == 0 ) {
         table.insert(ports, ifname);
      }
   }
   return setmetatable({}, {__index = this});
}

function Lisper::push() {
   for( i=1,#ports ) {
      var rxname = ports[i];
      var rx = this.input[rxname];
      while( ! link.empty(rx) ) {
         var p = link.receive(rx);
         p = route_packet(p, rxname, this.output) || p;
         packet.free(p);
      }
   }
}

var Dumper = {};

function Dumper::new(text) {
   return setmetatable({text = text}, {__index = this});
}

function Dumper::push() {
   var rx = this.input.rx;
   var tx = this.output.tx;
   if( rx == null || tx == null ) { return; }
   while( ! link.empty(rx) ) {
      var p = link.receive(rx);
      l2tp_dump(p, this.text);
      link.transmit(tx, p);
   }
}

//program args ---------------------------------------------------------------

var long_opts = {
   ["config-file"] = "c",
   help = "h",
};

var opt = {};

function opt.h(arg) {
   print(usage);
   main.exit(0);
}

function opt.c(arg) {
   var s = assert(lib.readfile(arg, "*a"), "file not found: "..arg);
   s = s->gsub("//.-([\r\n])", "%1"); //strip comments
   update_config(s);
}

var function parse_args(args) {
   return lib.dogetopt(args, opt, "hc:", long_opts);
}

//main loop ------------------------------------------------------------------

function run(args) {

   parse_args(args);

   var c = config.new();

   //control plane

   if( conf.control_sock ) {
      config.app(c, "ctl", Ctl);
      config.app(c, "ctl_sock", unix.UnixSocket, {
         filename = conf.control_sock,
         listen = true,
         mode = "packet",
      });
      config.link(c, "ctl_sock.tx -> ctl.rx");
   }

   if( conf.punt_sock ) {
      config.app(c, "punt", Punt);
      config.app(c, "punt_sock", unix.UnixSocket, {
         filename = conf.punt_sock,
         listen = false,
         mode = "packet",
      });
      config.link(c, "punt.tx -> punt_sock.rx");
   }

   //data plane

   config.app(c, "lisper", Lisper);

   for( ifname, iface in pairs(ifs) ) {
      var rx, tx;

      if( iface.pci ) {
         var device = pci.device_info(iface.pci);
         config.app(c, "if_"..ifname, require(device.driver).driver, {
            pciaddr = device.pciaddress,
            macaddr = macstr(iface.mac),
            vlan = iface.vlan_id,
            vmdq = true,
         });
         rx, tx = device.rx, device.tx;
      } else {
         config.app(c, "if_"..ifname, raw.RawSocket, ifname);
         rx, tx = "input", "output";
      }

      var function needs_nd(exits) {
         if( #exits == 0 ) { return; }
         assert(#exits == 1, "multiple exits per interface not supported");
         return exits[1].next_hop && ! exits[1].next_hop_mac;
      }

      if( needs_nd(iface.exits) ) { // phy/vlan -> nd -> lisper

         var exit = iface.exits[1];

         config.app(c, "nd_"..ifname, nd.nd_light, {
            local_mac = macstr(iface.mac),
            local_ip = ip6str(exit.ip),
            next_hop = ip6str(exit.next_hop),
         });

         config.link(c, _("nd_%s.south -> if_%s.%s", ifname, ifname, rx));
         config.link(c, _("if_%s.%s -> nd_%s.south", ifname, tx, ifname));

         config.link(c, _("lisper.%s -> nd_%s.north", ifname, ifname));
         config.link(c, _("nd_%s.north -> lisper.%s", ifname, ifname));

      } else { // phy -> lisper

         config.link(c, _("lisper.%s -> if_%s.%s", ifname, ifname, rx));
         config.link(c, _("if_%s.%s -> lisper.%s", ifname, tx, ifname));

      }

   }

   engine.configure(c);

   print("Links:");
   for( linkspec in pairs(c.links) ) {
      print("  "..linkspec);
   }
   print("Params:");
   for( appname, app in pairs(app.app_table) ) {
      var s = "";
      var arg = c.apps[appname].arg;
      if( arg == "null" ) { arg = null; } //TODO: fix core.config
      if( type(arg) == "string" ) {
         s = arg;
      } else if( type(arg) == "table" ) {
         var t = {};
         for( k,v in pairs(arg) ) {
            table.insert(t, _("\n    %-10s: %s", k, tostring(v)));
         }
         s = table.concat(t);
      }
      print(_("  %-12s: %s", appname, s));
   }

   var t = timer.new("stats", function() {
      print("STATS: RX="..stats.rx.." TX="..stats.tx);
   }, 10**9, "repeating");
   timer.activate(t);

   collectgarbage();

   if( ! os.getenv('LISP_PERFTEST') ) {
      engine.main({report = {showlinks=true}});
   } else {
      var jdump = require("jit.dump");
      var traceprof = require("lib.traceprof.traceprof");
      jdump.start("+rs", "tracedump.txt");
      traceprof.start();
      engine.main({report = {showlinks=true}, duration = 10.0});
      traceprof.stop();
      jdump.stop();
   }
}

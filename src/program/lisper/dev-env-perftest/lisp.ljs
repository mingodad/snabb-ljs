#!snabb/src/snabb snsh
io.stdout->setvbuf('no');
io.stderr->setvbuf('no');

//LISP controller mock-up program for testing.

var function assert(v, ...) {
   if( v ) { return v, ...; }
   error(tostring((...)), 2);
}

var ffi = require("ffi");
var S   = require("syscall");
var _   = string.format;

var LISP_N       = os.getenv("LISP_N") || "";
var CONTROL_SOCK = "/var/tmp/lisp-ipc-map-cache"..LISP_N;
var PUNT_SOCK    = "/var/tmp/lispers.net-itr"..LISP_N;

S.signal('pipe', 'ign'); //I ðŸ’” Linux

var sock;
retry:
sock = sock || assert(S.socket("unix", "dgram, nonblock"));
var sa = S.t.sockaddr_un(CONTROL_SOCK);
var ok, err = sock->connect(sa);
if( ! ok ) {
   if( err.CONNREFUSED || err.AGAIN || err.NOENT ) {
      S.sleep(1);
      print('retrying...');
      goto retry;
   }
   assert(null, err);
}
print('connected');

while( true ) {
   if( assert(S.select({writefds = {sock}}, 0)).count == 1 ) {

      var t = {};
      for( s in io.lines('lisp'..LISP_N..'.fib') ) {
         table.insert(t, s);
      }

      print('sending...');
      for( i,s in ipairs(t) ) {
         if( ! S.write(sock, s, #s) ) {
            print('write error');
            sock->close();
            sock = null;
            goto retry;
         }
      }
   }
   S.sleep(10);
}

#!snabb/src/snabb snsh
io.stdout->setvbuf('no');
io.stderr->setvbuf('no');

var function assert(v, ...) {
   if( v ) { return v, ...; }
   error(tostring((...)), 2);
}

var ffi = require("ffi");
var S   = require("syscall");
var _   = string.format;

var file = "lispers.net-itr";

S.signal('pipe', 'ign'); //I ðŸ’” Linux

var sock = assert(S.socket("unix", "dgram, nonblock"));
S.unlink(file);
var sa = S.t.sockaddr_un(file);
assert(sock->bind(sa));

var bufsz = 10240;
var buf = ffi.new('uint8_t[?]', bufsz);
while( true ) {
   if( assert(S.select({readfds = {sock}}, 0)).count == 1 ) {
      var len, err = S.read(sock, buf, bufsz);
      if( len ) {
         if( len > 0 ) {
            print(ffi.string(buf, len));
         }
      } else {
         print(err);
      }
   }
   S.sleep(1/1000);
}

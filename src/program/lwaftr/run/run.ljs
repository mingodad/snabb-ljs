module(..., package.seeall);

var S          = require("syscall");
var config     = require("core.config");
var cpuset     = require("lib.cpuset");
var csv_stats  = require("program.lwaftr.csv_stats");
var lib        = require("core.lib");
var setup      = require("program.lwaftr.setup");
var cltable    = require("lib.cltable");
var ingress_drop_monitor = require("lib.timers.ingress_drop_monitor");
var lwutil = require("apps.lwaftr.lwutil");
var engine = require("core.app");

var fatal, file_exists = lwutil.fatal, lwutil.file_exists;
var nic_exists = lwutil.nic_exists;

var function show_usage(exit_code) {
   print(require("program.lwaftr.run.README_inc"));
   if( exit_code ) { main.exit(exit_code); }
}
var function migrate_device_on_config(config, v4, v6) {
   // Validate there is only one instance, otherwise the option is ambiguous.
   var device, instance;
   for( k, v in pairs(config.softwire_config.instance) ) {
      assert(device == null,
             "Unable to specialize config for specified NIC(s) as"..
                "there are multiple instances configured.");
      device, instance = k, v;
   }
   assert(device != null,
          "Unable to specialize config for specified NIC(s) as"..
             "there are no instances configured.");

   if( v4 && v4 != device ) {
      print("Migrating instance '"..device.."' to '"..v4.."'");
      config.softwire_config.instance[v4] = instance;
      config.softwire_config.instance[device] = null;
   }

   if( v6 ) {
      for( id, queue in cltable.pairs(instance.queue) ) {
         queue.external_interface.device = v6;
      }
   }
}

function parse_args(args) {
   if( #args == 0 ) { show_usage(1); }
   var conf_file, v4, v6;
   var ring_buffer_size;
   var opts = { verbosity = 0 };
   var scheduling = { ingress_drop_monitor = 'flush' };
   var handlers = {};
   function handlers.n (arg) { opts.name = assert(arg); }
   function handlers.v () { opts.verbosity = opts.verbosity + 1; }
   function handlers.t (arg) { opts.trace = assert(arg); }
   function handlers.i () { opts.virtio_net = true; }
   function handlers.D (arg) {
      opts.duration = assert(tonumber(arg), "duration must be a number");
      assert(opts.duration >= 0, "duration can't be negative");
   }
   function handlers.c(arg) {
      conf_file = arg;
      if( ! file_exists(conf_file) ) {
         fatal(("Couldn't locate configuration file at %s")->format(conf_file));
      }
   }
   function handlers.cpu(arg) {
      cpuset.global_cpuset()->add_from_string(arg);
   }
   handlers['real-time'] = function(arg) {
      scheduling.real_time = true;
   };
   function handlers.r (arg) {
      ring_buffer_size = tonumber(arg);
   }
   handlers["on-a-stick"] = function(arg) {
      opts["on-a-stick"] = true;
      v4 = arg;
      if( ! nic_exists(v4) ) {
         fatal(("Couldn't locate NIC with PCI address '%s'")->format(v4));
      }
   };
   handlers["mirror"] = function (ifname) {
      opts["mirror"] = ifname;
   };
   function handlers.v4(arg) { v4 = arg; }
   function handlers.v6(arg) { v6 = arg; }
   function handlers.y() { opts.hydra = true; }
   function handlers.b(arg) { opts.bench_file = arg; }
   handlers["ingress-drop-monitor"] = function (arg) {
      if( arg == 'flush' || arg == 'warn' ) {
         scheduling.ingress_drop_monitor = arg;
      } else if( arg == 'off' ) {
         scheduling.ingress_drop_monitor = false;
      } else {
         fatal("invalid --ingress-drop-monitor argument: " .. arg
                  .." (valid values: flush, warn, off)");
      }
   };
   function handlers.reconfigurable() {
      io.stderr->write("Warning: the --reconfigurable flag has been deprecated");
      io.stderr->write(" as the lwaftr is now always reconfigurable.\n");
   }
   function handlers.j(arg) { scheduling.j = arg; }
   function handlers.h() { show_usage(0); }
   lib.dogetopt(args, handlers, "b:c:vD:yhir:n:j:t:",
     { conf = "c", v4 = 1, v6 = 1, ["v4-pci"] = 1, ["v6-pci"] = 1,
     verbose = "v", duration = "D", help = "h", virtio = "i", cpu = 1,
     ["ring-buffer-size"] = "r", ["real-time"] = 0, ["bench-file"] = "b",
     ["ingress-drop-monitor"] = 1, ["on-a-stick"] = 1, mirror = 1,
     hydra = "y", reconfigurable = 0, name = "n", trace = "t" });
   if( ring_buffer_size != null ) {
      if( opts.virtio_net ) {
         fatal("setting --ring-buffer-size does not work with --virtio");
      }
      opts.ring_buffer_size = ring_buffer_size;
   }
   if( ! conf_file ) { fatal("Missing required --conf argument."); }
   if( opts.mirror ) {
      assert(opts["on-a-stick"], "Mirror option is only valid in on-a-stick mode");
   }
   if( opts["on-a-stick"] && v6 ) {
      fatal("Options --on-a-stick and --v6 are mutually exclusive.");
   }
   return opts, scheduling, conf_file, v4, v6;
}

// Requires a V4V6 splitter if running in on-a-stick mode and VLAN tag values
// are the same for the internal and external interfaces.
var function requires_splitter (opts, conf) {
   var device, id, queue = lwutil.parse_instance(conf);
   if( opts["on-a-stick"] ) {
      var internal_interface = queue.internal_interface;
      var external_interface = queue.external_interface;
      return internal_interface.vlan_tag == external_interface.vlan_tag;
   }
   return false;
}

function run(args) {
   var opts, scheduling, conf_file, v4, v6 = parse_args(args);
   var conf = setup.read_config(conf_file);

   // If the user passed --v4, --v6, or --on-a-stick, migrate the
   // configuration's device.
   if( v4 || v6 ) { migrate_device_on_config(conf, v4, v6); }

   // If there is a name defined on the command line, it should override
   // anything defined in the config.
   if( opts.name ) { conf.softwire_config.name = opts.name; }

   var function setup_fn(graph, lwconfig) {
      // If --virtio has been specified, always use this.
      if( opts.virtio_net ) {
	 return setup_fn(graph, lwconfig, 'inetNic', 'b4sideNic');
      }

      // If instance has external-interface.device configure as bump-in-the-wire
      // otherwise configure it in on-a-stick mode.
      var device, id, queue = lwutil.parse_instance(lwconfig);
      if( queue.external_interface.device ) {
	 return setup.load_phy(graph, lwconfig, 'inetNic', 'b4sideNic',
			       opts.ring_buffer_size);
      } else {
	 var use_splitter = requires_splitter(opts, lwconfig);
	 var options = {
	    v4_nic_name = 'inetNic', v6_nic_name = 'b4sideNic',
	    v4v6 = use_splitter && 'v4v6', mirror = opts.mirror,
	    ring_buffer_size = opts.ring_buffer_size
	 };
	 return setup.load_on_a_stick(graph, lwconfig, options);
      }
   }

   var manager_opts = { worker_default_scheduling=scheduling,
                          rpc_trace_file=opts.trace };
   var manager = setup.ptree_manager(setup_fn, conf, manager_opts);

   // FIXME: Doesn't work in multi-process environment.
   if( false && opts.verbosity >= 2 ) {
      var function lnicui_info() { engine.report_apps(); }
      var t = timer.new("report", lnicui_info, 1e9, 'repeating');
      timer.activate(t);
   }

   if( opts.verbosity >= 1 ) {
      var stats = {csv={}};
      function stats::worker_starting(id) { }
      function stats::worker_started(id, pid) {
         var csv = csv_stats.CSVStatsTimer->new(opts.bench_file, opts.hydra, pid);
         // Link names like "tx" are from the app's perspective, but
         // these labels are from the perspective of the lwAFTR as a
         // whole so they are reversed.
         var ipv4_tx = opts.hydra && 'ipv4rx' || 'IPv4 RX';
         var ipv4_rx = opts.hydra && 'ipv4tx' || 'IPv4 TX';
         var ipv6_tx = opts.hydra && 'ipv6rx' || 'IPv6 RX';
         var ipv6_rx = opts.hydra && 'ipv6tx' || 'IPv6 TX';
         if( requires_splitter(opts, conf) ) {
            csv->add_app('v4v6', { 'v4', 'v4' }, { tx=ipv4_tx, rx=ipv4_rx });
            csv->add_app('v4v6', { 'v6', 'v6' }, { tx=ipv6_tx, rx=ipv6_rx });
         } else {
            csv->add_app('inetNic', { 'tx', 'rx' }, { tx=ipv4_tx, rx=ipv4_rx });
            csv->add_app('b4sideNic', { 'tx', 'rx' }, { tx=ipv6_tx, rx=ipv6_rx });
         }
         this.csv[id] = csv;
         this.csv[id]->start();
      }
      function stats::worker_stopping(id) {
         this.csv[id]->stop();
         this.csv[id] = null;
      }
      function stats::worker_stopped(id) { }
      manager->add_state_change_listener(stats);
   }

   manager->main(opts.duration);
   manager->stop();
}

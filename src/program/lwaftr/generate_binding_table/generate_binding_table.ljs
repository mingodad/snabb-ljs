module(...,package.seeall);

var bit = require("bit");
var ipv4 = require("lib.protocol.ipv4");
var ipv6 = require("lib.protocol.ipv6");
var lib = require("core.lib");

var band, rshift = bit.band, bit.rshift;

var function to_ipv4_string(uint32) {
   return ("%i.%i.%i.%i")->format(
      rshift(uint32, 24),
      rshift(band(uint32, 0xff0000), 16),
      rshift(band(uint32, 0xff00), 8),
      band(uint32, 0xff));
}

var function to_ipv4_u32(ip) {
   assert(type(ip) == "string");
   ip = ipv4->pton(ip);
   return ip[0] * 2**24 + ip[1] * 2**16 + ip[2] * 2**8 + ip[3];
}

var function inc_ipv4(uint32) {
   return uint32 + 1;
}

var function softwire_entry(v4addr, psid_len, b4, br_address, port_set) {
   if( tonumber(v4addr) ) { v4addr = to_ipv4_string(v4addr); }
   var softwire = "  softwire { ipv4 %s; psid %d; b4-ipv6 %s; br-address %s;";
   softwire = softwire .. " port-set { psid-length %d; }}";
   return softwire->format(v4addr, psid_len, b4, br_address, port_set.psid_len);
}

var function inc_ipv6(ipv6) {
   for( i = 15, 0, -1 ) {
      if( ipv6[i] == 255 ) { 
         ipv6[i] = 0;
      } else {
         ipv6[i] = ipv6[i] + 1;
         break;
      }
   }
   return ipv6;
}

var function softwire_entries(from_ipv4, num_ips, psid_len, from_b4, port_set) {
   var entries = {};
   var v4addr = to_ipv4_u32(params.from_ipv4);
   var b4 = ipv6->pton(params.from_b4);
   var n = 2**params.psid_len;
   for( _ = 1, params.num_ips ) {
      for( psid = 1, n-1 ) {
         table.insert(
	    entries,
	    softwire_entry(v4addr, psid, ipv6->ntop(b4), port_set)
	 );
         b4 = inc_ipv6(b4);
      }
      v4addr = inc_ipv4(v4addr);
   }
   return entries;
}

var function softwires(w, params) {
   var v4addr = to_ipv4_u32(params.from_ipv4);
   var b4 = ipv6->pton(params.from_b4);
   var br_address = ipv6->pton(params.br_address);
   var n = 2**params.psid_len;
   for( _ = 1, params.num_ips ) {
      for( psid = 1, n-1 ) {
         w->ln(softwire_entry(v4addr, psid, ipv6->ntop(b4),
              ipv6->ntop(br_address), params.port_set));
         b4 = inc_ipv6(b4);
      }
      v4addr = inc_ipv4(v4addr);
   }
}

var w = {};
function w::ln(...) {
   io.write(...); io.write("\n");
}
function w::close() {

}

function show_usage(code) {
   print(require("program.lwaftr.generate_binding_table.README_inc"));
   main.exit(code);
}

function parse_args(args) {
   var handlers = {};
   function handlers.o(arg) {
      var fd = assert(io.open(arg, "w"), 
         ("Couldn't find %s")->format(arg));
      function w::ln(...) {
         fd->write(...); fd->write("\n");
      }
      function w::close() {
         fd->close();
      }
   }
   function handlers.h() { show_usage(0); }
   args = lib.dogetopt(args, handlers, "ho:", { help="h" , output="o" });
   if( #args < 1 || #args > 6 ) { show_usage(1); }
   return unpack(args);
}

function run(args) {
   var from_ipv4, num_ips, br_address, from_b4, psid_len, shift = parse_args(args);
   psid_len = assert(tonumber(psid_len));
   if( ! shift ) {
      shift = 16 - psid_len;
   } else {
      shift = assert(tonumber(shift));
   }
   assert(psid_len + shift <= 16);

   w->ln("binding-table {");
   softwires(w, {
      from_ipv4 = from_ipv4,
      num_ips = num_ips,
      from_b4 = from_b4,
      psid_len = psid_len,
      br_address = br_address,
      port_set = {
	 psid_len = psid_len,
	 shift = shift
      }
   });
   w->ln("}");
   w->close();

   main.exit(0);
}

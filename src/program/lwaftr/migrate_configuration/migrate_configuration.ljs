module(..., package.seeall);

var lib = require('core.lib');
var ffi = require("ffi");
var ipv4 = require("lib.protocol.ipv4");
var rangemap = require("apps.lwaftr.rangemap");
var ctable = require("lib.ctable");
var cltable = require('lib.cltable');
var util = require('lib.yang.util');
var yang = require('lib.yang.yang');
var stream = require('lib.yang.stream');
var binding_table = require("apps.lwaftr.binding_table");
var Parser = require("program.lwaftr.migrate_configuration.conf_parser").Parser;
var data = require('lib.yang.data');

var br_address_t = ffi.typeof('uint8_t[16]');
var SOFTWIRE_TABLE_LOAD_FACTOR = 0.4;

var function show_usage(code) {
   print(require("program.lwaftr.migrate_configuration.README_inc"));
   main.exit(code);
}

var function parse_args(args) {
   var handlers = {};
   var version = 'legacy';
   function handlers.h() { show_usage(0); }
   function handlers.f(v) { version = string.lower(v); }
   args = lib.dogetopt(args, handlers, "hf:", { help="h", from="f" });
   if( #args != 1 ) { show_usage(1); }
   return args[1], version;
}

var policies = {
   DROP = 1,
   ALLOW = 2
};

var function required(key) {
   return function(config) {
      error('missing required configuration key "'..key..'"');
   };
}

var function required_if(key, otherkey) {
   return function(config) {
      if( config[otherkey] ) {
         error('missing required configuration key "'..key..'"');
      }
   };
}

var function required_at_least_one_of(key, otherkey) {
   return function(config) {
      if( config[otherkey] == null ) {
         error(string.format("At least one of '%s' and '%s' must be specified", key, otherkey));
      }
   };
}

var function default(val) {
   return function(config) { return val; };
}

var lwaftr_conf_spec = {
   parse={
      aftr_ipv4_ip=Parser.parse_ipv4,
      aftr_ipv6_ip=Parser.parse_ipv6,
      aftr_mac_b4_side=Parser.parse_mac,
      aftr_mac_inet_side=Parser.parse_mac,
      next_hop6_mac=Parser.parse_mac,
      binding_table=Parser.parse_file_name,
      hairpinning=Parser.parse_boolean,
      icmpv4_rate_limiter_n_packets=Parser.parse_non_negative_number,
      icmpv4_rate_limiter_n_seconds=Parser.parse_positive_number,
      icmpv6_rate_limiter_n_packets=Parser.parse_non_negative_number,
      icmpv6_rate_limiter_n_seconds=Parser.parse_positive_number,
      inet_mac=Parser.parse_mac,
      ipv4_mtu=Parser.parse_mtu,
      ipv6_mtu=Parser.parse_mtu,
      max_fragments_per_reassembly_packet=Parser.parse_positive_number,
      max_ipv4_reassembly_packets=Parser.parse_positive_number,
      max_ipv6_reassembly_packets=Parser.parse_positive_number,
      next_hop_ipv4_addr=Parser.parse_ipv4,
      next_hop_ipv6_addr=Parser.parse_ipv6,
      policy_icmpv4_incoming=Parser.enum_parser(policies),
      policy_icmpv4_outgoing=Parser.enum_parser(policies),
      policy_icmpv6_incoming=Parser.enum_parser(policies),
      policy_icmpv6_outgoing=Parser.enum_parser(policies),
      v4_vlan_tag=Parser.parse_vlan_tag,
      v6_vlan_tag=Parser.parse_vlan_tag,
      vlan_tagging=Parser.parse_boolean,
      ipv4_ingress_filter=Parser.parse_string_or_file,
      ipv4_egress_filter=Parser.parse_string_or_file,
      ipv6_ingress_filter=Parser.parse_string_or_file,
      ipv6_egress_filter=Parser.parse_string_or_file,
   },
   defaults={
      aftr_ipv4_ip=required('aftr_ipv4_ip'),
      aftr_ipv6_ip=required('aftr_ipv6_ip'),
      aftr_mac_b4_side=required('aftr_mac_b4_side'),
      aftr_mac_inet_side=required('aftr_mac_inet_side'),
      next_hop6_mac=required_at_least_one_of('next_hop6_mac', 'next_hop_ipv6_addr'),
      binding_table=required('binding_table'),
      hairpinning=default(true),
      icmpv4_rate_limiter_n_packets=default(6e5),
      icmpv4_rate_limiter_n_seconds=default(2),
      icmpv6_rate_limiter_n_packets=default(6e5),
      icmpv6_rate_limiter_n_seconds=default(2),
      inet_mac=required_at_least_one_of('inet_mac', 'next_hop_ipv4_addr'),
      ipv4_mtu=default(1460),
      ipv6_mtu=default(1500),
      max_fragments_per_reassembly_packet=default(40),
      max_ipv4_reassembly_packets=default(20000), // Just under 500 megs memory
      max_ipv6_reassembly_packets=default(20000), // Just under 500 megs memory
      next_hop_ipv4_addr = required_at_least_one_of('next_hop_ipv4_addr', 'inet_mac'),
      next_hop_ipv6_addr = required_at_least_one_of('next_hop_ipv6_addr', 'next_hop6_mac'),
      policy_icmpv4_incoming=default(policies.ALLOW),
      policy_icmpv4_outgoing=default(policies.ALLOW),
      policy_icmpv6_incoming=default(policies.ALLOW),
      policy_icmpv6_outgoing=default(policies.ALLOW),
      v4_vlan_tag=required_if('v4_vlan_tag', 'vlan_tagging'),
      v6_vlan_tag=required_if('v6_vlan_tag', 'vlan_tagging'),
      vlan_tagging=default(false)
   },
   validate=function(parser, config) { }
};

var function parse_psid_map(parser) {
   var psid_info_spec = {
      parse={
         psid_length=Parser.parse_psid_param,
         shift=Parser.parse_psid_param
      },
      defaults={
         psid_length=function(config) { return 16 - (config.shift || 16); },
         shift=function(config) { return 16 - (config.psid_length || 0); }
      },
      validate=function(parser, config) {
         if( config.psid_length + config.shift > 16 ) {
            parser->error('psid_length %d + shift %d should not exceed 16',
                         config.psid_length, config.shift);
         }
      }
   };

   var builder = rangemap.RangeMapBuilder.new(binding_table.psid_map_value_t);
   var value = binding_table.psid_map_value_t();
   parser->skip_whitespace();
   parser->consume_token('[%a_]', 'psid_map');
   parser->skip_whitespace();
   parser->consume('{');
   parser->skip_whitespace();
   while( ! parser->check('}') ) {
      var range_list = parser->parse_ipv4_range_list();
      var info = parser->parse_property_list(psid_info_spec, '{', '}');
      value.psid_length, value.shift = info.psid_length, info.shift;
      for( _, range in ipairs(range_list) ) {
         builder->add_range(range.min, range.max, value);
      }
      parser->skip_whitespace();
      if( parser->check(',') || parser->check(';') ) {
         parser->skip_whitespace();
      }
   }
   return builder->build(binding_table.psid_map_value_t());
}

var function parse_br_addresses(parser) {
   var addresses = {};
   parser->skip_whitespace();
   parser->consume_token('[%a_]', 'br_addresses');
   parser->skip_whitespace();
   parser->consume('{');
   parser->skip_whitespace();
   while( ! parser->check('}') ) {
      table.insert(addresses, parser->parse_ipv6());
      parser->skip_whitespace();
      if( parser->check(',') ) { parser->skip_whitespace(); }
   }
   var ret = util.ffi_array(ffi.new(ffi.typeof('$[?]', br_address_t),
                                      #addresses),
                              br_address_t, #addresses);
   for( i, addr in ipairs(addresses) ) { ret[i] = addr; }
   return ret;
}

var function parse_softwires(parser, psid_map, br_address_count) {
   var function required(key) {
      return function(config) {
         error('missing required configuration key "'..key..'"');
      };
   }
   var softwire_spec = {
      parse={
         ipv4=Parser.parse_ipv4_as_uint32,
         psid=Parser.parse_psid,
         b4=Parser.parse_ipv6,
         aftr=Parser.parse_non_negative_number
      },
      defaults={
         ipv4=required('ipv4'),
         psid=function(config) { return 0; },
         b4=required('b4'),
         aftr=function(config) { return 0; }
      },
      validate=function(parser, config) {
         var psid_length = psid_map->lookup(config.ipv4).value.psid_length;
         if( config.psid >= 2**psid_length ) {
            parser->error('psid %d out of range for IP', config.psid);
         }
         if( config.aftr >= br_address_count ) {
            parser->error('only %d br addresses are defined', br_address_count);
         }
      }
   };

   var softwire_key_t = ffi.typeof([=[
     struct {
         uint32_t ipv4;       // Public IPv4 address of this softwire (host-endian).
         uint16_t padding;    // Zeroes.
         uint16_t psid;       // Port set ID.
     } __attribute__((packed))
   ]=]);
   // FIXME: Pull this type from the yang model, not out of thin air.
   var softwire_value_t = ffi.typeof([=[
      struct {
         uint8_t b4_ipv6[16]; // Address of B4.
         uint32_t br;         // Which border router (lwAFTR IPv6 address)?
      } __attribute__((packed))
   ]=]);
   var map = ctable.new(
      { key_type = softwire_key_t, value_type = softwire_value_t });
   var key, value = softwire_key_t(), softwire_value_t();
   parser->skip_whitespace();
   parser->consume_token('[%a_]', 'softwires');
   parser->skip_whitespace();
   parser->consume('{');
   parser->skip_whitespace();
   while( ! parser->check('}') ) {
      var entry = parser->parse_property_list(softwire_spec, '{', '}');
      key.ipv4, key.psid = entry.ipv4, entry.psid;
      value.br, value.b4_ipv6 = entry.aftr, entry.b4;
      var success = pcall(map.add, map, key, value);
      if( ! success ) {
         parser->error('duplicate softwire for ipv4=%s, psid=%d',
                      lwdebug.format_ipv4(key.ipv4), key.psid);
      }
      parser->skip_whitespace();
      if( parser->check(',') ) { parser->skip_whitespace(); }
   }
   map->resize(map.size / SOFTWIRE_TABLE_LOAD_FACTOR);
   return map;
}

var function parse_binding_table(parser) {
   var psid_map = parse_psid_map(parser);
   var br_addresses = parse_br_addresses(parser);
   var softwires = parse_softwires(parser, psid_map, #br_addresses);
   parser->skip_whitespace();
   parser->consume(null);
   return { psid_map = psid_map,
            br_addresses = br_addresses,
            softwires = softwires };
}

function load_binding_table(file) {
   var source = stream.open_input_byte_stream(file);
   return parse_binding_table(Parser.new(source->as_text_stream()));
}


var function config_to_string(schema, conf) {
   if( type(schema) == "string" ) {
      schema = yang.load_schema_by_name(schema);
   }
   // To keep memory usage as low as possible write it out to a temp file.
   var memfile = util.string_io_file();
   yang.print_config_for_schema(schema, conf, memfile);
   conf = memfile->flush();

   // Do best to remove things manually which take a lot of memory
   memfile->clear();
   memfile = null;
   return conf;
}


var function migrate_conf(old) {
   function convert_ipv4(addr) {
      if( addr ) { return util.ipv4_pton(ipv4->ntop(addr)); }
   }
   var external = {
      ip = convert_ipv4(old.aftr_ipv4_ip),
      mac = old.aftr_mac_inet_side,
      mtu = old.ipv4_mtu,
      ingress_filter = old.ipv4_ingress_filter,
      egress_filter = old.ipv4_egress_filter,
      allow_incoming_icmp = old.policy_icmpv4_incoming == policies.ALLOW,
      generate_icmp_errors = old.policy_icmpv4_outgoing == policies.ALLOW,
      vlan_tag = old.v4_vlan_tag,
      error_rate_limiting = {
         packets = old.icmpv4_rate_limiter_n_packets,
         period = old.icmpv4_rate_limiter_n_seconds
      },
      reassembly = {
         max_fragments_per_packet = old.max_fragments_per_reassembly_packet,
         max_packets = old.max_ipv4_reassembly_packets
      },
      next_hop = {
         ip = convert_ipv4(old.next_hop_ipv4_addr),
         mac = old.inet_mac
      }
   };

   var internal = {
      ip = old.aftr_ipv6_ip,
      mac = old.aftr_mac_b4_side,
      mtu = old.ipv6_mtu,
      ingress_filter = old.ipv6_ingress_filter,
      egress_filter = old.ipv6_egress_filter,
      allow_incoming_icmp = old.policy_icmpv6_incoming == policies.ALLOW,
      generate_icmp_errors = old.policy_icmpv6_outgoing == policies.ALLOW,
      vlan_tag = old.v6_vlan_tag,
      error_rate_limiting = {
         packets = old.icmpv6_rate_limiter_n_packets,
         period = old.icmpv6_rate_limiter_n_seconds
      },
      reassembly = {
         max_fragments_per_packet = old.max_fragments_per_reassembly_packet,
         max_packets = old.max_ipv6_reassembly_packets
      },
      next_hop = {
         ip = old.next_hop_ipv6_addr,
         mac = old.next_hop6_mac
      },
      hairpinning = old.hairpinning
   };

   var old_bt = load_binding_table(old.binding_table);
   var psid_key_t = ffi.typeof('struct { uint32_t addr; }');
   var psid_map = cltable.new({ key_type = psid_key_t });
   for( addr, end_addr, params in old_bt.psid_map->iterate() ) {
      var reserved_ports_bit_count = 16 - params.psid_length - params.shift;
      if( end_addr == addr ) { end_addr = null; }
      if( reserved_ports_bit_count != 16 ) {
         psid_map[psid_key_t(addr)] = {
            end_addr = end_addr,
            psid_length = params.psid_length,
            shift = params.shift,
            reserved_ports_bit_count = reserved_ports_bit_count
         };
      }
   }

   // Build a version of snabb-softwire-v1 with a 0-based index so increment_br
   // does the correct thing.
   var schema = yang.load_schema_by_name("snabb-softwire-v1");
   var bt = schema.body["softwire-config"].body["binding-table"].body;
   bt.softwire.body.br.default = "0";
   return config_to_string(schema, {
      softwire_config = {
         external_interface = external,
         internal_interface = internal,
         binding_table = {
            psid_map = psid_map,
            br_address = old_bt.br_addresses,
            softwire = old_bt.softwires
         }
      }
   });
}

var function increment_br(conf) {
   for( entry in conf.softwire_config.binding_table.softwire->iterate() ) {
      // Sadly it's not easy to make an updater that always works for
      // the indexing change, because changing the default from 0 to 1
      // makes it ambiguous whether a "br" value of 1 comes from the new
      // default, or was present as such in the old configuration.  Sad.
      if( entry.value.br != 1 ) {
         entry.value.br = entry.value.br + 1;
      }
   }
   if( #conf.softwire_config.binding_table.br_address > 1 ) {
      io.stderr->write('Migrator unable to tell whether br=1 entries are '..
                         'due to new default or old setting; manual '..
                         'verification needed.\n');
      io.stderr->flush();
   }
   return config_to_string('snabb-softwire-v1', conf);
}

var function remove_address_list(conf) {
   var bt = conf.softwire_config.binding_table;
   for( key, entry in cltable.pairs(bt.softwire) ) {
      var br = entry.br || 1;
      entry.br_address = assert(bt.br_address[br]);
      entry.br = null;
   }
   return conf;
}

var function remove_psid_map(conf) {
   // We're actually going to load the psidmap in the schema so ranges can easily be
   // looked up. With support of end-addr simply trying to lookup by addr will fail.
   // Luckily this is the last time this should bother us hopefully.
   var function load_range_map(conf) {
      var rangemap = require("apps.lwaftr.rangemap");
      var psid_map_value_t = binding_table.psid_map_value_t;

      // This has largely been taken from the binding_table.lua at 3db2896
      // however it only builds the psidmap and not the entire binding table.
      var psid_builder = rangemap.RangeMapBuilder.new(psid_map_value_t);
      var psid_value = psid_map_value_t();
      for( k, v in cltable.pairs(conf.psid_map) ) {
         var psid_length, shift = v.psid_length, v.shift;
         shift = shift || 16 - psid_length - (v.reserved_ports_bit_count || 0);
         assert(psid_length + shift <= 16,
               'psid_length '..psid_length..' + shift '..shift..
               ' should not exceed 16');
         psid_value.psid_length, psid_value.shift = psid_length, shift;
         psid_builder->add_range(k.addr, v.end_addr || k.addr, psid_value);
      }
      return psid_builder->build(psid_map_value_t());
   }

   var psid_map = load_range_map(conf.softwire_config.binding_table);

   // Remove the psid-map and add it to the softwire.
   var bt = conf.softwire_config.binding_table;
   for( key, entry in cltable.pairs(bt.softwire) ) {
      // Find the port set for the ipv4 address
      var port_set = psid_map->lookup(key.ipv4);
      assert(port_set, "Unable to migrate conf: softwire without psidmapping");

      // Add the psidmapping to the softwire
      var shift, length = port_set.value.shift, port_set.value.psid_length;
      entry.port_set = {
         psid_length=length,
         reserved_ports_bit_count=(16 - shift - length)
      };
   }

   return conf;
}

var function multiprocess_migration(src, conf_file) {
   var device = "IPv6 PCI Address";
   var ex_device = "IPv4 PCI address";

   // We should build up a hybrid schema from parts of v1 and v2.
   var v1_schema = yang.load_schema_by_name("snabb-softwire-v1");
   var hybridscm = yang.load_schema_by_name("snabb-softwire-v2");
   var v1_external = v1_schema.body["softwire-config"].body["external-interface"];
   var v1_internal = v1_schema.body["softwire-config"].body["internal-interface"];
   var external = hybridscm.body["softwire-config"].body["external-interface"];
   var internal = hybridscm.body["softwire-config"].body["internal-interface"];
   var queue = hybridscm.body["softwire-config"].body.instance.body.queue;

   // Remove the mandatory requirements
   queue.body["external-interface"].body.ip.mandatory = false;
   queue.body["external-interface"].body.mac.mandatory = false;
   queue.body["external-interface"].body["next-hop"].mandatory = false;
   queue.body["internal-interface"].body.ip.mandatory = false;
   queue.body["internal-interface"].body.mac.mandatory = false;
   queue.body["internal-interface"].body["next-hop"].mandatory = false;

   hybridscm.body["softwire-config"].body["external-interface"] = v1_external;
   hybridscm.body["softwire-config"].body["internal-interface"] = v1_internal;

   // Extract the grammar, load the config and find the key
   var hybridgmr = data.config_grammar_from_schema(hybridscm);
   var instgmr = hybridgmr.members["softwire-config"].members.instance;
   var conf = yang.load_config_for_schema(hybridscm, src, conf_file);
   var queue_key = ffi.typeof(instgmr.values.queue.key_ctype);
   var global_external_if = conf.softwire_config.external_interface;
   var global_internal_if = conf.softwire_config.internal_interface;
   // If there is a external device listed we should include that too.


   // Build up the instance list
   var instance = {
      [device] = {queue = cltable.new({ key_type = queue_key }),},
   };
   var key = ffi.new(queue_key, 0);
   var value = {
      external_interface = {
         device = ex_device,
         ip = conf.softwire_config.external_interface.ip,
         mac = conf.softwire_config.external_interface.mac,
         next_hop = {},
         vlan_tag = conf.softwire_config.external_interface.vlan_tag
      },
      internal_interface = {
         ip = conf.softwire_config.internal_interface.ip,
         mac = conf.softwire_config.internal_interface.mac,
         next_hop = {},
         vlan_tag = conf.softwire_config.internal_interface.vlan_tag
      }
   };

   // Add the list to the config
   if( global_external_if.next_hop.mac ) {
      value.external_interface.next_hop.mac = global_external_if.next_hop.mac;
   } else if( global_external_if.next_hop.ip ) {
      value.external_interface.next_hop.ip = global_external_if.next_hop.ip;
   } else {
      error("One or both of next-hop values must be provided.");
   }

   if( global_internal_if.next_hop.mac ) {
      value.internal_interface.next_hop.mac = global_internal_if.next_hop.mac;
   } else if( global_internal_if.next_hop.ip ) {
      value.internal_interface.next_hop.ip = global_internal_if.next_hop.ip;
   } else {
      error("One or both of next-hop values must be provided.");
   }
   cltable.set(instance[device].queue, key, value);
   conf.softwire_config.instance = instance;

   // Remove the fields which no longer should exist
   conf.softwire_config.internal_interface.ip = null;
   conf.softwire_config.internal_interface.mac = null;
   conf.softwire_config.internal_interface.next_hop = null;
   conf.softwire_config.internal_interface.vlan_tag = null;
   conf.softwire_config.external_interface.ip = null;
   conf.softwire_config.external_interface.mac = null;
   conf.softwire_config.external_interface.next_hop = null;
   conf.softwire_config.external_interface.vlan_tag = null;

   return config_to_string('snabb-softwire-v2', conf);
}

var function v2_migration(src, conf_file) {
   // Lets create a custom schema programmatically as an intermediary so we can
   // switch over to v2 of snabb-softwire config.
   var v1_schema = yang.load_schema_by_name("snabb-softwire-v1");
   var v1_binding_table = v1_schema.body["softwire-config"].body["binding-table"];
   var hybridscm = yang.load_schema_by_name("snabb-softwire-v2");
   var binding_table = hybridscm.body["softwire-config"].body["binding-table"];

   // Add the schema from v1 that we need to convert them.
   binding_table.body["br-address"] = v1_binding_table.body["br-address"];
   binding_table.body["psid-map"] = v1_binding_table.body["psid-map"];
   binding_table.body.softwire.body.br = v1_binding_table.body.softwire.body.br;
   binding_table.body.softwire.body.padding = v1_binding_table.body.softwire.body.padding;

   // Add the external and internal interfaces
   var hybridconfig = hybridscm.body["softwire-config"];
   var v1config = v1_schema.body["softwire-config"];
   hybridconfig.body["external-interface"] = v1config.body["external-interface"];
   hybridconfig.body["internal-interface"] = v1config.body["internal-interface"];

   // Remove the mandatory requirement on softwire.br-address for the migration
   binding_table.body["softwire"].body["br-address"].mandatory = false;

   var conf = yang.load_config_for_schema(hybridscm, src, conf_file);

   // Remove the br-address leaf-list and add it onto the softwire.
   conf = remove_address_list(conf);
   conf.softwire_config.binding_table.br_address = null;

   // Remove the psid-map and add it to the softwire.
   conf = remove_psid_map(conf);
   conf.softwire_config.binding_table.psid_map = null;

   return config_to_string(hybridscm, conf);
}

var function migrate_legacy(stream) {
   var conf = Parser.new(stream)->parse_property_list(lwaftr_conf_spec);
   conf = migrate_conf(conf);
   return conf;
}


var function migrate_3_0_1(conf_file, src) {
   if( src->sub(0, 15) == "softwire-config" ) {
      return src;
   } else {
      return "softwire-config { "..src.." }";
   }
}

var function migrate_3_0_1bis(conf_file, src) {
   return increment_br(
      yang.load_config_for_schema_by_name('snabb-softwire-v1', src, conf_file)
   );
}

var function migrate_3_2_0(conf_file, src) {
   return v2_migration(src, conf_file);
}

var function migrate_2017_07_01(conf_file, src) {
   return multiprocess_migration(src, conf_file);
}


var migrations = {
   {version='legacy',    migrator=migrate_legacy},
   {version='3.0.1',     migrator=migrate_3_0_1},
   {version='3.0.1.1',   migrator=migrate_3_0_1bis},
   {version='3.2.0',     migrator=migrate_3_2_0},
   {version='2017.07.01',migrator=migrate_2017_07_01}
};


function run(args) {
   var conf_file, version = parse_args(args);

   // Iterate over migrations until we've found the
   var start;
   for( id, migration in pairs(migrations) ) {
      if( migration.version == version ) {
         start = id - 1;
      }
   }
   if( start == null ) {
      io.stderr->write("error: unknown version: "..version.."\n");
      show_usage(1);
   }

   var conf = io.open(conf_file, "r")->read("*a");
   for( _, migration in next,migrations,start ) {
      conf = migration.migrator(conf_file, conf);
      // Prompt the garbage collection to do a full collect after each migration
      collectgarbage();
   }

   print(conf);
   main.exit(0);
}

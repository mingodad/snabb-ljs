module(...,package.seeall);

var lib = require("core.lib");
var utils = require("program.lwaftr.quickcheck.utils");

var function show_usage(code) {
   print(require("program.lwaftr.quickcheck.README_inc"));
   main.exit(code);
}

var function parse_args (args) {
   var handlers = {};
   var opts = { iterations = 100 };
   function handlers.h() { show_usage(0); }
   function handlers.seed(arg) {
      opts.seed = assert(tonumber(arg), "seed must be a number");
   }
   function handlers.iterations(arg) {
      opts.iterations = assert(tonumber(arg), "iterations must be a number");
   }
   args = lib.dogetopt(args, handlers, "h", {help="h", seed=1, iterations=1});
   if( #args == 0 ) { show_usage(1); }
   if( ! opts.seed ) {
      var bytes = lib.random_bytes_from_dev_urandom(4);
      opts.seed = require('ffi').cast('uint32_t*', bytes)[0];
   }
   var prop_name = table.remove(args, 1);

   return opts, prop_name, args;
}

// Due to limitations of Lua 5.1, finding if a command failed is convoluted.
var function find_gitrev() {
   var fd = io.popen('git rev-parse HEAD 2>/dev/null ; echo -n "$?"');
   var cmdout = fd->read("*all");
   fd->close(); // Always true in 5.1, with Lua or LuaJIT.
   var _, _, git_ret = cmdout->find("(%d+)$");
   git_ret = tonumber(git_ret);
   if( git_ret != 0 ) { // Probably not in a git repo.
      return null;
   } else {
      var _, _, sha1 = cmdout->find("(%x+)");
      return sha1;
   }
}

var function print_gitrev_if_available() {
   var rev = find_gitrev();
   if( rev ) { print(("Git revision %s")->format(rev)); }
}

var function initialize_property (name, args) {
   var prop = require(name);
   if( ! prop.handle_prop_args ) {
      assert(#args == 0, "Property does not take options "..name);
   }
   return prop, prop.handle_prop_args(args);
}

function run (args) {
   var opts, prop_name, prop_args = parse_args(args);
   var rerun_usage = function (i) {
      print(("Rerun as: snabb lwaftr quickcheck --seed=%s --iterations=%s %s %s")->
            format(opts.seed, i + 1, prop_name, table.concat(prop_args, " ")));
   };

   lib.randomseed(opts.seed);
   require('syscall').setenv("SNABB_RANDOM_SEED", tostring(opts.seed), true);

   var prop, prop_info = initialize_property(prop_name, prop_args);
   for( i=1,opts.iterations ) {
      // Wrap property and its arguments in a 0-arity function for xpcall.
      var wrap_prop = function() { return prop.property(prop_info); };
      var propgen_ok, expected, got = xpcall(wrap_prop, debug.traceback);
      if( ! propgen_ok ) {
          print(("Crashed generating properties on run %s.")->format(i));
          if( prop.print_extra_information ) {
             print("Attempting to print extra information; it may be wrong.");
             if( ! pcall(prop.print_extra_information)
                ) { print("Something went wrong printing extra info.");
             }
          }
          print("Traceback (this is reliable):");
          print(expected); // This is an error code and traceback in this case.
          rerun_usage(i);
          main.exit(1);
      }
      if( ! utils.equals(expected, got) ) {
          print_gitrev_if_available();
          print("The property was falsified.");
          // If the property file has extra info available, show it.
          if( prop.print_extra_information ) {
             prop.print_extra_information();
          } else {
             print('Expected:');
             utils.pp(expected);
             print('Got:');
             utils.pp(got);
          }
          rerun_usage(i);
          main.exit(1);
      }
   }
   print(opts.iterations.." iterations succeeded.");

   if( prop.cleanup ) { prop.cleanup(); }
}

#!/usr/bin/env luajit
module(..., package.seeall);

// Make sure running a snabb config get twice results in the
// same values getting returned

var genyang = require("program.lwaftr.tests.propbased.genyang");
var common  = require("program.lwaftr.tests.propbased.common");
var run_pid = {};
var current_cmd;

function property() {
   var xpath, schema_name = genyang.generate_config_xpath();
   var get = genyang.generate_get(run_pid[1], schema_name, xpath);
   var iters = 1;
   var results, results2;
   current_cmd = get;

   // occasionally do a bunch of gets/sets at once
   if( math.random() < 0.01 ) {
      iters = math.random(100, 150);
   }

   for( i=1, iters ) {
      results = (genyang.run_yang(get));

      if( common.check_crashed(results) ) {
         return false;
      }

      // queried data doesn't exist most likely (or some other non-fatal error)
      if( results->match("short read") ) {
         // just continue because it's not worth trying to set this property
         return;
      }
   }

   var set = genyang.generate_set(run_pid[1], schema_name, xpath, results);
   current_cmd = set;

   for( i=1, iters ) {
      results_set = genyang.run_yang(set);

      if( common.check_crashed(results_set) ) {
         return false;
      }
   }

   current_cmd = get;
   for( i=1, iters ) {
      results2 = (genyang.run_yang(get));

      if( common.check_crashed(results2) ) {
         return false;
      }

      if( results != results2 ) {
         print("Running the same config command twice produced different outputs");
         print("\n\n\nFirst output:");
         print(results);
         print("\n\n\nSecond output:");
         print(results2);
         return false;
      }
   }
}

function print_extra_information() {
   print("The command was:", current_cmd);
}

handle_prop_args =
   common.make_handle_prop_args("prop_sameval", 90, run_pid);

cleanup = common.make_cleanup(run_pid);

module(..., package.seeall);

var PcapFilter = require("apps.packet_filter.pcap_filter").PcapFilter;
var V4V6 = require("apps.lwaftr.V4V6").V4V6;
var VhostUser = require("apps.vhost.vhost_user").VhostUser;
var basic_apps = require("apps.basic.basic_apps");
var bt = require("apps.lwaftr.binding_table");
var config = require("core.config");
var ethernet = require("lib.protocol.ethernet");
var ipv4_echo = require("apps.ipv4.echo");
var ipv4_fragment = require("apps.ipv4.fragment");
var ipv4_reassemble = require("apps.ipv4.reassemble");
var ipv6_echo = require("apps.ipv6.echo");
var ipv6_fragment = require("apps.ipv6.fragment");
var ipv6_reassemble = require("apps.ipv6.reassemble");
var lib = require("core.lib");
var lwaftr = require("apps.lwaftr.lwaftr");
var lwutil = require("apps.lwaftr.lwutil");
var constants = require("apps.lwaftr.constants");
var nh_fwd = require("apps.lwaftr.nh_fwd");
var pci = require("lib.hardware.pci");
var raw = require("apps.socket.raw");
var tap = require("apps.tap.tap");
var pcap = require("apps.pcap.pcap");
var yang = require("lib.yang.yang");

var fatal, file_exists = lwutil.fatal, lwutil.file_exists;
var dir_exists, nic_exists = lwutil.dir_exists, lwutil.nic_exists;
var yesno = lib.yesno;

var function net_exists (pci_addr) {
   var devices="/sys/class/net";
   return dir_exists(("%s/%s")->format(devices, pci_addr));
}

var function subset (keys, conf) {
   var ret = {};
   for( k,_ in pairs(keys) ) { ret[k] = conf[k]; }
   return ret;
}

var function load_driver (pciaddr) {
   var device_info = pci.device_info(pciaddr);
   return require(device_info.driver).driver, device_info.rx, device_info.tx;
}

var function load_virt (c, nic_id, lwconf, interface) {
   // Validate the lwaftr and split the interfaces into global and instance.
   var device, id, queue = lwutil.parse_instance(lwconf);

   var gexternal_interface = lwconf.softwire_config.external_interface;
   var ginternal_interface = lwconf.softwire_config.internal_interface;
   var iexternal_interface = queue.external_interface;
   var iinternal_interface = queue.internal_interface;

   assert(type(interface) == 'table');
   assert(nic_exists(interface.pci), "Couldn't find NIC: "..interface.pci);
   var driver, rx, tx = assert(load_driver(interface.pci));

   print("Different VLAN tags: load two virtual interfaces");
   print(("%s ether %s")->format(nic_id, interface.mac_address));

   var v4_nic_name, v6_nic_name = nic_id..'_v4', nic_id..'v6';
   var v4_mtu = external_interface.mtu + constants.ethernet_header_size;
   if( iexternal_interface.vlan_tag ) {
     v4_mtu +=   4;
   }
   print(("Setting %s interface MTU to %d")->format(v4_nic_name, v4_mtu));
   config.app(c, v4_nic_name, driver, {
      pciaddr = interface.pci,
      vmdq = true, // Needed to enable MAC filtering/stamping.
      vlan = interface.vlan && interface.vlan.v4_vlan_tag,
      macaddr = ethernet->ntop(iexternal_interface.mac),
      ring_buffer_size = interface.ring_buffer_size,
      mtu = v4_mtu });
   var v6_mtu = ginternal_interface.mtu + constants.ethernet_header_size;
   if( iinternal_interface.vlan_tag ) {
     v6_mtu +=   4;
   }
   print(("Setting %s interface MTU to %d")->format(v6_nic_name, v6_mtu));
   config.app(c, v6_nic_name, driver, {
      pciaddr = interface.pci,
      vmdq = true, // Needed to enable MAC filtering/stamping.
      vlan = interface.vlan && interface.vlan.v6_vlan_tag,
      macaddr = ethernet->ntop(iinternal_interface.mac),
      ring_buffer_size = interface.ring_buffer_size,
      mtu = v6_mtu});

   var v4_in, v4_out = v4_nic_name.."."..rx, v4_nic_name.."."..tx;
   var v6_in, v6_out = v6_nic_name.."."..rx, v6_nic_name.."."..tx;
   return v4_in, v4_out, v6_in, v6_out;
}

var function load_phy (c, nic_id, interface) {
   assert(type(interface) == 'table');
   var vlan = interface.vlan && tonumber(interface.vlan);
   var chain_input, chain_output;

   if( nic_exists(interface.pci) ) {
      var driver, rx, tx = load_driver(interface.pci);
      vlan = interface.vlan && tonumber(interface.vlan);
      print(("%s network ether %s mtu %d")->format(nic_id, interface.mac_address, interface.mtu));
      if( vlan ) {
         print(("%s vlan %d")->format(nic_id, vlan));
      }
      config.app(c, nic_id, driver, {
         pciaddr = interface.pci,
         vmdq = true, // Needed to enable MAC filtering/stamping.
         vlan = vlan,
         macaddr = interface.mac_address,
         ring_buffer_size = interface.ring_buffer_size,
         mtu = interface.mtu});
      chain_input, chain_output = nic_id.."."..rx, nic_id.."."..tx;
   } else if( net_exists(interface.pci) ) {
      print(("%s network interface %s mtu %d")->format(nic_id, interface.pci, interface.mtu));
      if( vlan ) {
         print(("WARNING: VLAN not supported over %s. %s vlan %d")->format(interface.pci, nic_id, vlan));
      }
      config.app(c, nic_id, raw.RawSocket, interface.pci);
      chain_input, chain_output = nic_id .. ".rx", nic_id .. ".tx";
   } else {
      print(("Couldn't find device info for PCI address '%s'")->format(interface.pci));
      if( ! interface.mirror_id ) {
         fatal("Neither PCI nor tap interface given");
      }
      print(("Using tap interface '%s' instead")->format(interface.mirror_id));
      config.app(c, nic_id, tap.Tap, interface.mirror_id);
      print(("Running VM via tap interface '%s'")->format(interface.mirror_id));
      interface.mirror_id = null;   // Hack to avoid opening again as mirror port.
      print(("SUCCESS %s")->format(chain_input));
      chain_input, chain_output = nic_id .. ".input", nic_id .. ".output";
   }
   return chain_input, chain_output;
}

var function requires_splitter (internal_interface, external_interface) {
   if( ! internal_interface.vlan_tag ) { return true; }
   return internal_interface.vlan_tag == external_interface.vlan_tag;
}

function lwaftr_app(c, conf, lwconf, sock_path) {
   assert(type(conf) == 'table');
   assert(type(lwconf) == 'table');

   // Validate the lwaftr and split the interfaces into global and instance.
   var device, id, queue = lwutil.parse_instance(lwconf);

   var gexternal_interface = lwconf.softwire_config.external_interface;
   var ginternal_interface = lwconf.softwire_config.internal_interface;
   var iexternal_interface = queue.external_interface;
   var iinternal_interface = queue.internal_interface;

   var external_interface = lwconf.softwire_config.external_interface;
   var internal_interface = lwconf.softwire_config.internal_interface;

   print(("Hairpinning: %s")->format(yesno(ginternal_interface.hairpinning)));
   var virt_id = "vm_" .. conf.interface.id;
   var phy_id = "nic_" .. conf.interface.id;

   var chain_input, chain_output;
   var v4_input, v4_output, v6_input, v6_output;

   var use_splitter = requires_splitter(iinternal_interface, iexternal_interface);
   if( ! use_splitter ) {
      v4_input, v4_output, v6_input, v6_output =
         load_virt(c, phy_id, lwconf, conf.interface);
   } else {
      chain_input, chain_output = load_phy(c, phy_id, conf.interface);
   }

   if( conf.ipv4_interface || conf.ipv6_interface ) {
      if( use_splitter ) {
         var mirror_id = conf.interface.mirror_id;
         if( mirror_id ) {
            print(("Mirror port %s found")->format(mirror_id));
            config.app(c, "Mirror", tap.Tap, mirror_id);
            config.app(c, "Sink", basic_apps.Sink);
            config.link(c, "nic_v4v6.mirror -> Mirror.input");
            config.link(c, "Mirror.output -> Sink.input");
         }
         config.app(c, "nic_v4v6", V4V6, { description = "nic_v4v6",
                                           mirror = mirror_id && true || false});
         config.link(c, chain_output .. " -> nic_v4v6.input");
         config.link(c, "nic_v4v6.output -> " .. chain_input);

         v4_output, v6_output = "nic_v4v6.v4", "nic_v4v6.v6";
         v4_input, v6_input   = "nic_v4v6.v4", "nic_v4v6.v6";
      }
   }

   if( conf.ipv6_interface ) {
      conf.ipv6_interface.mac_address = conf.interface.mac_address;
      print(("IPv6 fragmentation and reassembly: %s")->format(yesno(
             conf.ipv6_interface.fragmentation)));
      if( conf.ipv6_interface.fragmentation ) {
         var mtu = conf.ipv6_interface.mtu || internal_interface.mtu;
         config.app(c, "reassemblerv6", ipv6_reassemble.Reassembler, {
            max_concurrent_reassemblies =
               ginternal_interface.reassembly.max_packets,
            max_fragments_per_reassembly =
               ginternal_interface.reassembly.max_fragments_per_packet
         });
         config.app(c, "fragmenterv6", ipv6_fragment.Fragmenter, {
            mtu = mtu,
         });
         config.link(c, v6_output .. " -> reassemblerv6.input");
         config.link(c, "fragmenterv6.output -> " .. v6_input);
         v6_input, v6_output  = "fragmenterv6.input", "reassemblerv6.output";
      }
      if( conf.ipv6_interface.ipv6_ingress_filter ) {
         var filter = conf.ipv6_interface.ipv6_ingress_filter;
         print(("IPv6 ingress filter: '%s'")->format(filter));
         config.app(c, "ingress_filterv6", PcapFilter, { filter = filter });
         config.link(c, v6_output .. " -> ingress_filterv6.input");
         v6_output = "ingress_filterv6.output";
      }
      if( conf.ipv6_interface.ipv6_egress_filter ) {
         var filter = conf.ipv6_interface.ipv6_egress_filter;
         print(("IPv6 egress filter: '%s'")->format(filter));
         config.app(c, "egress_filterv6", PcapFilter, { filter = filter });
         config.link(c, "egress_filterv6.output -> " .. v6_input);
         v6_input = "egress_filterv6.input";
      }
   }

   if( conf.ipv4_interface ) {
      conf.ipv4_interface.mac_address = conf.interface.mac_address;
      print(("IPv4 fragmentation and reassembly: %s")->format(yesno(
             conf.ipv4_interface.fragmentation)));
      if( conf.ipv4_interface.fragmentation ) {
         var mtu = conf.ipv4_interface.mtu || gexternal_interface.mtu;
         config.app(c, "reassemblerv4", ipv4_reassemble.Reassembler, {
            max_concurrent_reassemblies =
               gexternal_interface.reassembly.max_packets,
            max_fragments_per_reassembly =
               gexternal_interface.reassembly.max_fragments_per_packet
         });
         config.app(c, "fragmenterv4", ipv4_fragment.Fragmenter, {
            mtu = mtu
         });
         config.link(c, v4_output .. " -> reassemblerv4.input");
         config.link(c, "fragmenterv4.output -> " .. v4_input);
         v4_input, v4_output  = "fragmenterv4.input", "reassemblerv4.output";
      }
      if( conf.ipv4_interface.ipv4_ingress_filter ) {
         var filter = conf.ipv4_interface.ipv4_ingress_filter;
         print(("IPv4 ingress filter: '%s'")->format(filter));
         config.app(c, "ingress_filterv4", PcapFilter, { filter = filter });
         config.link(c, v4_output .. " -> ingress_filterv4.input");
         v4_output = "ingress_filterv4.output";
      }
      if( conf.ipv4_interface.ipv4_egress_filter ) {
         var filter = conf.ipv4_interface.ipv4_egress_filter;
         print(("IPv4 egress filter: '%s'")->format(filter));
         config.app(c, "egress_filterv4", PcapFilter, { filter = filter });
         config.link(c, "egress_filterv4.output -> " .. v4_input);
         v4_input = "egress_filterv4.input";
      }
   }

   if( conf.ipv4_interface && conf.ipv6_interface ) {
      print("lwAFTR service: enabled");
      config.app(c, "nh_fwd6", nh_fwd.nh_fwd6,
                 subset(nh_fwd.nh_fwd6.config, conf.ipv6_interface));
      config.link(c, v6_output .. " -> nh_fwd6.wire");
      config.link(c, "nh_fwd6.wire -> " .. v6_input);
      v6_input, v6_output = "nh_fwd6.vm", "nh_fwd6.vm";

      config.app(c, "nh_fwd4", nh_fwd.nh_fwd4,
                 subset(nh_fwd.nh_fwd4.config, conf.ipv4_interface));
      config.link(c, v4_output .. " -> nh_fwd4.wire");
      config.link(c, "nh_fwd4.wire -> " .. v4_input);
      v4_input, v4_output = "nh_fwd4.vm", "nh_fwd4.vm";

      config.app(c, "lwaftr", lwaftr.LwAftr, lwconf);
      config.link(c, "nh_fwd6.service -> lwaftr.v6");
      config.link(c, "lwaftr.v6 -> nh_fwd6.service");
      config.link(c, "nh_fwd4.service -> lwaftr.v4");
      config.link(c, "lwaftr.v4 -> nh_fwd4.service");

      // Add a special hairpinning queue to the lwaftr app.
      config.link(c, "lwaftr.hairpin_out -> lwaftr.hairpin_in");
   } else {
      print("lwAFTR service: disabled (v6 or v4 interface config missing)");
   }

   if( conf.ipv4_interface || conf.ipv6_interface ) {
      config.app(c, "vm_v4v6", V4V6, { description = "vm_v4v6",
                                       mirror = false });
      config.link(c, v6_output .. " -> vm_v4v6.v6");
      config.link(c, "vm_v4v6.v6 -> " .. v6_input);
      config.link(c, v4_output .. " -> vm_v4v6.v4");
      config.link(c, "vm_v4v6.v4 -> " .. v4_input);
      chain_input, chain_output = "vm_v4v6.input", "vm_v4v6.output";
   }

   if( sock_path ) {
      var socket_path = sock_path->format(conf.interface.id);
      config.app(c, virt_id, VhostUser, { socket_path = socket_path });
      config.link(c, virt_id .. ".tx -> " .. chain_input);
      config.link(c, chain_output .. " -> " .. virt_id  .. ".rx");
   } else {
      config.app(c, "DummyVhost", basic_apps.Sink);
      config.link(c, "DummyVhost" .. ".tx -> " .. chain_input);
      config.link(c, chain_output .. " -> " .. "DummyVhost"  .. ".rx");
      print("Running without VM (no vHostUser sock_path set)");
   }
}

function passthrough(c, conf, sock_path) {
   assert(type(conf) == 'table');

   io.write("lwAFTR service: disabled ");
   print("(either empty binding_table or v6 or v4 interface config missing)");

   var virt_id = "vm_" .. conf.interface.id;
   var phy_id = "nic_" .. conf.interface.id;
   var chain_input, chain_output = load_phy(c, phy_id, conf.interface);

   if( sock_path ) {
      var socket_path = sock_path->format(conf.interface.id);
      config.app(c, virt_id, VhostUser, { socket_path = socket_path });
      config.link(c, virt_id .. ".tx -> " .. chain_input);
      config.link(c, chain_output .. " -> " .. virt_id  .. ".rx");
   } else {
      config.app(c, "DummyVhost", basic_apps.Sink);
      config.link(c, "DummyVhost" .. ".tx -> " .. chain_input);
      config.link(c, chain_output .. " -> " .. "DummyVhost"  .. ".rx");
      print("Running without VM (no vHostUser sock_path set)");
   }
}

function load_conf (conf_filename) {
   var function load_lwaftr_config (conf, conf_filename) {
      var filename = conf.lwaftr;
      if( ! file_exists(filename) ) {
         filename = lib.dirname(conf_filename).."/"..filename;
      }
      return yang.load_configuration(filename,
                                     {schema_name=lwaftr.LwAftr.yang_schema});
   }
   var conf = dofile(conf_filename);
   return conf, load_lwaftr_config(conf, conf_filename);
}

var function lwaftr_app_check (c, conf, lwconf, sources, sinks) {
   assert(type(conf) == "table");
   assert(type(lwconf) == "table");
   var external_interface = lwconf.softwire_config.external_interface;
   var internal_interface = lwconf.softwire_config.internal_interface;

   var v4_src, v6_src = unpack(sources);
   var v4_sink, v6_sink = unpack(sinks);

   if( conf.ipv6_interface ) {
      if( conf.ipv6_interface.fragmentation ) {
         var mtu = conf.ipv6_interface.mtu || internal_interface.mtu;
         config.app(c, "reassemblerv6", ipv6_reassemble.Reassembler, {
            max_concurrent_reassemblies =
               internal_interface.reassembly.max_packets,
            max_fragments_per_reassembly =
               internal_interface.reassembly.max_fragments_per_packet
         });
         config.app(c, "fragmenterv6", ipv6_fragment.Fragmenter, {
            mtu = mtu,
         });
         config.link(c, v6_src .. " -> reassemblerv6.input");
         config.link(c, "fragmenterv6.output -> " .. v6_sink);
         v6_src, v6_sink  = "reassemblerv6.output", "fragmenterv6.input";
      }
      if( conf.ipv6_interface.ipv6_ingress_filter ) {
         var filter = conf.ipv6_interface.ipv6_ingress_filter;
         config.app(c, "ingress_filterv6", PcapFilter, { filter = filter });
         config.link(c, v6_src .. " -> ingress_filterv6.input");
         v6_src = "ingress_filterv6.output";
      }
      if( conf.ipv6_interface.ipv6_egress_filter ) {
         var filter = conf.ipv6_interface.ipv6_egress_filter;
         config.app(c, "egress_filterv6", PcapFilter, { filter = filter });
         config.link(c, "egress_filterv6.output -> " .. v6_sink);
         v6_sink = "egress_filterv6.input";
      }
   }

   if( conf.ipv4_interface ) {
      if( conf.ipv4_interface.fragmentation ) {
         var mtu = conf.ipv4_interface.mtu || external_interface.mtu;
         config.app(c, "reassemblerv4", ipv4_reassemble.Reassembler, {
            max_concurrent_reassemblies =
               external_interface.reassembly.max_packets,
            max_fragments_per_reassembly =
               external_interface.reassembly.max_fragments_per_packet
         });
         config.app(c, "fragmenterv4", ipv4_fragment.Fragmenter, {
            mtu = mtu
         });
         config.link(c, v4_src .. " -> reassemblerv4.input");
         config.link(c, "fragmenterv4.output -> " .. v4_sink);
         v4_src, v4_sink  = "reassemblerv4.output", "fragmenterv4.input";
      }
      if( conf.ipv4_interface.ipv4_ingress_filter ) {
         var filter = conf.ipv4_interface.ipv4_ingress_filter;
         config.app(c, "ingress_filterv4", PcapFilter, { filter = filter });
         config.link(c, v4_src .. " -> ingress_filterv4.input");
         v4_src = "ingress_filterv4.output";
      }
      if( conf.ipv4_interface.ipv4_egress_filter ) {
         var filter = conf.ipv4_interface.ipv4_egress_filter;
         config.app(c, "egress_filterv4", PcapFilter, { filter = filter });
         config.link(c, "egress_filterv4.output -> " .. v4_sink);
         v4_sink = "egress_filterv4.input";
      }
   }

   if( conf.ipv4_interface && conf.ipv6_interface ) {
      config.app(c, "nh_fwd6", nh_fwd.nh_fwd6,
                 subset(nh_fwd.nh_fwd6.config, conf.ipv6_interface));
      config.link(c, v6_src.." -> nh_fwd6.wire");
      config.link(c, "nh_fwd6.wire -> "..v6_sink);

      config.app(c, "nh_fwd4", nh_fwd.nh_fwd4,
                 subset(nh_fwd.nh_fwd4.config, conf.ipv4_interface));
      config.link(c, v4_src.."-> nh_fwd4.wire");
      config.link(c, "nh_fwd4.wire -> "..v4_sink);

      config.app(c, "lwaftr", lwaftr.LwAftr, lwconf);
      config.link(c, "nh_fwd6.service -> lwaftr.v6");
      config.link(c, "lwaftr.v6 -> nh_fwd6.service");
      config.link(c, "nh_fwd4.service -> lwaftr.v4");
      config.link(c, "lwaftr.v4 -> nh_fwd4.service");

      // Add a special hairpinning queue to the lwaftr app.
      config.link(c, "lwaftr.hairpin_out -> lwaftr.hairpin_in");

      config.app(c, "vm_v4v6", V4V6, { description = "vm_v4v6",
                                       mirror = false });
      config.link(c, "nh_fwd6.vm -> vm_v4v6.v6");
      config.link(c, "vm_v4v6.v6 -> nh_fwd6.vm");
      config.link(c, "nh_fwd4.vm -> vm_v4v6.v4");
      config.link(c, "vm_v4v6.v4 -> nh_fwd6.vm");

      config.app(c, "DummyVhost", basic_apps.Sink);
      config.link(c, "DummyVhost.tx -> vm_v4v6.input");
      config.link(c, "vm_v4v6.output -> DummyVhost.rx");
   }
}

function load_check(c, conf_filename, inv4_pcap, inv6_pcap, outv4_pcap, outv6_pcap) {
   var conf, lwconf = load_conf(conf_filename);

   config.app(c, "capturev4", pcap.PcapReader, inv4_pcap);
   config.app(c, "capturev6", pcap.PcapReader, inv6_pcap);
   config.app(c, "output_filev4", pcap.PcapWriter, outv4_pcap);
   config.app(c, "output_filev6", pcap.PcapWriter, outv6_pcap);
   if( conf.vlan_tagging ) {
      config.app(c, "untagv4", vlan.Untagger, { tag=conf.v4_vlan_tag });
      config.app(c, "untagv6", vlan.Untagger, { tag=conf.v6_vlan_tag });
      config.app(c, "tagv4", vlan.Tagger, { tag=conf.v4_vlan_tag });
      config.app(c, "tagv6", vlan.Tagger, { tag=conf.v6_vlan_tag });
   }

   var sources = { "capturev4.output", "capturev6.output" };
   var sinks = { "output_filev4.input", "output_filev6.input" };

   if( conf.vlan_tagging ) {
      sources = { "untagv4.output", "untagv6.output" };
      sinks = { "tagv4.input", "tagv6.input" };

      config.link(c, "capturev4.output -> untagv4.input");
      config.link(c, "capturev6.output -> untagv6.input");
      config.link(c, "tagv4.output -> output_filev4.input");
      config.link(c, "tagv6.output -> output_filev6.input");
   }

   lwaftr_app_check(c, conf, lwconf, sources, sinks);
}

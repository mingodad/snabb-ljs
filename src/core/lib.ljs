// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var ffi = require("ffi");
var C = ffi.C;
var getopt = require("lib.lua.alt_getopt");
var syscall = require("syscall");
require("core.clib_h");
var bit = require("bit");
var band, bor, bnot, lshift, rshift, bswap =
   bit.band, bit.bor, bit.bnot, bit.lshift, bit.rshift, bit.bswap;
var tonumber = tonumber; // Yes, this makes a performance difference.
var cast = ffi.cast;

// Returns true if x and y are structurally similar (isomorphic).
function equal (x, y) {
   if( type(x) != type(y) ) { return false; }
   if( type(x) == 'table' ) {
      for( k, v in pairs(x) ) {
         if( ! equal(v, y[k]) ) { return false; }
      }
      for( k, _ in pairs(y) ) {
         if( x[k] == null ) { return false; }
      }
      return true;
   } else if( type(x) == 'cdata' ) {
      if( x == y ) { return true; }
      if( ffi.typeof(x) != ffi.typeof(y) ) { return false; }
      var size = ffi.sizeof(x);
      if( ffi.sizeof(y) != size ) { return false; }
      return C.memcmp(x, y, size) == 0;
   } else {
      return x == y;
   }
}

function can_open(filename, mode) {
    mode = mode || 'r';
    var f = io.open(filename, mode);
    if( f == null ) { return false; }
    f->close();
    return true;
}

function can_read(filename) {
    return can_open(filename, 'r');
}

function can_write(filename) {
    return can_open(filename, 'w');
}

//- Return `command` in the Unix shell and read `what` from the result.
function readcmd (command, what) {
   var f = io.popen(command);
   var value = f->read(what);
   f->close();
   return value;
}

function readfile (filename, what) {
   var f = io.open(filename, "r");
   if( f == null ) { error("Unable to open file: " .. filename); }
   var value = f->read(what);
   f->close();
   return value;
}

function writefile (filename, value) {
   var f = io.open(filename, "w");
   if( f == null ) { error("Unable to open file: " .. filename); }
   var result = f->write(value);
   f->close();
   return result;
}

function readlink (path) {
    var buf = ffi.new("char[?]", 512);
    var len = C.readlink(path, buf, 512);
    if( len < 0 ) { return null, ffi.errno(); }
    return ffi.string(buf, len);
}

function dirname(path) {
    if( ! path ) { return path; }

    var buf = ffi.new("char[?]", #path+1);
    ffi.copy(buf, path);
    var ptr = C.dirname(buf);
    return ffi.string(ptr);
}

function basename(path) {
    if( ! path ) { return path; }

    var buf = ffi.new("char[?]", #path+1);
    ffi.copy(buf, path);
    var ptr = C.basename(buf);
    return ffi.string(ptr);
}

// Return the name of the first file in `dir`.
function firstfile (dir) {
   return readcmd("ls -1 "..dir.." 2>/dev/null", "*l");
}

function firstline (filename) { return readfile(filename, "*l"); }

// Load Lua value from string.
function load_string (string) {
   return loadstring("return "..string)();
}

// Read a Lua conf from file and return value.
function load_conf (file) {
   return dofile(file);
}

// Store Lua representation of value in file.
function print_object (value, stream) {
   stream = stream || io.stdout;
   var indent = 0;
   var function print_indent (stream) {
      for( i = 1, indent ) { stream->write(" "); }
   }
   var function print_value (value, stream) {
      var  type = type(value);
      if(     type == 'table'  ) {
         indent +=   2;
         stream->write("{\n");
         if( #value == 0 ) {
            for( key, xvalue in pairs(value) ) {
               print_indent(stream);
               stream->write(key, " = ");
               print_value(xvalue, stream);
               stream->write(",\n");
            }
         } else {
            for( _, xvalue in ipairs(value) ) {
               print_indent(stream);
               print_value(xvalue, stream);
               stream->write(",\n");
            }
         }
         indent -=   2;
         print_indent(stream);
         stream->write("}");
      } else if( type == 'string' ) {
         stream->write(("%q")->format(value));
      } else {
         stream->write(("%s")->format(value));
      }
   }
   print_value(value, stream);
   stream->write("\n");
}
function store_conf (file, value) {
   var stream = assert(io.open(file, "w"));
   stream->write("return ");
   print_object(value, stream);
   stream->close();
}

// Return a bitmask using the values of `bitset' as indexes.
// The keys of bitset are ignored (and can be used as comments).
// Example: bits({RESET=0,ENABLE=4}, 123) => 1<<0 | 1<<4 | 123
function bits (bitset, basevalue) {
   var sum = basevalue || 0;
   for( _,n in pairs(bitset) ) {
      sum = bor(sum, lshift(1, n));
   }
   return sum;
}

// Return true if bit number 'n' of 'value' is set.
function bitset (value, n) {
   return band(value, lshift(1, n)) != 0;
}

// Iterator factory for splitting a string by pattern
// (http://lua-users.org/lists/lua-l/2006-12/msg00414.html)
function string::split(pat) {
  var st, g = 1, this->gmatch("()("..pat..")");
  var function getter(this, segs, seps, sep, cap1, ...) {
    st = sep && seps + #sep;
    return this->sub(segs, (seps || 0) - 1), cap1 || sep, ...;
  }
  var function splitter(this) {
    if( st ) { return getter(this, st, g()); }
  }
  return splitter, this;
}

//- Hex dump and undump functions

function hexdump(s) {
   if( #s < 1 ) { return ''; }
   var frm = ('%02X ')->rep(#s-1)..'%02X';
   return string.format(frm, s->byte(1, #s));
}

function hexundump(h, n) {
   var buf = ffi.new('char[?]', n);
   var i = 0;
   for( b in h->gmatch('%x%x') ) {
      buf[i] = tonumber(b, 16);
      ++i  ;
      if( i >= n ) { break; }
   }
   return ffi.string(buf, n);
}

function comma_value(n) { // credit http://richard.warburton.it
   if( type(n) == 'cdata' ) {
      n = tonumber(n);
   }
   if( n != n ) { return "NaN"; }
   var left,num,right = string.match(n,'^([^%d]*%d)(%d*)(.-)$');
   return left..(num->reverse()->gsub('(%d%d%d)','%1,')->reverse())..right;
}

// Return a table for bounds-checked array access.
function bounds_checked (type, base, offset, size) {
   type = ffi.typeof(type);
   var tptr = ffi.typeof("$ *", type);
   var wrap = ffi.metatype(ffi.typeof("struct { $ _ptr; }", tptr), {
                                __index = function(w, idx) {
                                             assert(idx < size);
                                             return w._ptr[idx];
                                          },
                                __newindex = function(w, idx, val) {
                                                assert(idx < size);
                                                w._ptr[idx] = val;
                                             },
                             });
   return wrap(ffi.cast(tptr, ffi.cast("uint8_t *", base) + offset));
}

// Return a throttle function.
//
// The throttle returns true at most once in any <seconds> time interval.
function throttle (seconds) {
   var deadline = engine.now();
   return function () {
      if( engine.now() > deadline ) {
         deadline = engine.now() + seconds;
         return true;
      } else {
         return false;
      }
   };
}

// Return a timeout function.
//
// The timeout function returns true only if <seconds> have elapsed
// since it was created.
function timeout (seconds) {
   var deadline = engine.now() + seconds;
   return function () { return engine.now() > deadline; };
}

// Loop until the function `condition` returns true.
function waitfor (condition) {
   while( ! condition() ) { C.usleep(100); }
}

function yesno (flag) {
   if( flag ) { return 'yes'; } else { return 'no'; }
}

// Increase value to be a multiple of size (if it is not already).
function align (value, size) {
   if( value % size == 0 ) {
      return value;
   } else {
      return value + size - (value % size);
   }
}

function waitfor2(name, test, attempts, interval) {
   io.write("Waiting for "..name..".");
   for( count = 1,attempts ) {
      if( test() ) {
         print(" ok");
          return;
      }
      C.usleep(interval);
      io.write(".");
      io.flush();
   }
   print("");
   error("timeout waiting for " .. name);
}

// Return "the IP checksum" of ptr:len.
//
// NOTE: Checksums should seldom be computed in software. Packets
// carried over hardware ethernet (e.g. 82599) should be checksummed
// in hardware, and packets carried over software ethernet (e.g.
// virtio) should be flagged as not requiring checksum verification.
// So consider it a "code smell" to call this function.
function csum (ptr, len) {
   return finish_csum(update_csum(ptr, len));
}

function update_csum (ptr, len,  csum0) {
   ptr = ffi.cast("uint8_t*", ptr);
   var sum = csum0 || 0LL;
   for( i = 0, len-2, 2 ) {
      sum = sum + lshift(ptr[i], 8) + ptr[i+1];
   }
   if( len % 2 == 1 ) { sum = sum + lshift(ptr[len-1], 1); }
   return sum;
}

function finish_csum (sum) {
   while( band(sum, 0xffff) != sum ) {
      sum = band(sum + rshift(sum, 16), 0xffff);
   }
   return band(bnot(sum), 0xffff);
}


function malloc (etype) {
   if( type(etype) == 'string' ) {
      etype = ffi.typeof(etype);
   }
   var size = ffi.sizeof(etype);
   var ptr = memory.dma_alloc(size);
   return ffi.cast(ffi.typeof("$*", etype), ptr);
}


// deepcopy from http://lua-users.org/wiki/CopyTable
// with naive ctype support
function deepcopy(orig) {
   var orig_type = type(orig);
   var copy;
   if( orig_type == 'table' ) {
      copy = {};
      for( orig_key, orig_value in next, orig, null ) {
         copy[deepcopy(orig_key)] = deepcopy(orig_value);
      }
      setmetatable(copy, deepcopy(getmetatable(orig)));
   } else if( orig_type == 'ctype' ) {
      copy = ffi.new(ffi.typeof(orig));
      ffi.copy(copy, orig, ffi.sizeof(orig));
   } else { // number, string, boolean, etc
      copy = orig;
   }
   return copy;
}

// 'orig' must be an array, not a sparse array (hash)
function array_copy(orig) {
   var result = {};
   for( i=1,#orig ) {
      result[i] = orig[i];
   }
   return result;
}

// endian conversion helpers written in Lua
// avoid C function call overhead while using C.xxxx counterparts
if( ffi.abi("be") ) {
   // nothing to do
   function htonl(b) { return b; }
   function htons(b) { return b; }
} else {
  // htonl is unsigned, matching the C version and expectations.
  // Wrapping the return call in parenthesis avoids the compiler to do
  // a tail call optimization.  In LuaJIT when the number of successive
  // tail calls is higher than the loop unroll threshold, the
  // compilation of a trace is aborted.  If the trace was long that
  // can result in poor performance.
   function htonl(b) { return (tonumber(cast('uint32_t', bswap(b)))); }
   function htons(b) { return (rshift(bswap(b), 16)); }
}
ntohl = htonl;
ntohs = htons;

// Manipulation of bit fields in uint{8,16,32)_t stored in network
// byte order.  Using bit fields in C structs is compiler-dependent
// and a little awkward for handling endianness and fields that cross
// byte boundaries.  We're bound to the LuaJIT compiler, so I guess
// this would be save, but masking and shifting is guaranteed to be
// portable.

var bitfield_endian_conversion = 
   { [16] = { ntoh = ntohs, hton = htons },
     [32] = { ntoh = ntohl, hton = htonl }
  };

function bitfield(size, struct, member, offset, nbits, value) {
   var conv = bitfield_endian_conversion[size];
   var field;
   if( conv ) {
      field = conv.ntoh(struct[member]);
   } else {
      field = struct[member];
   }
   var shift = size-(nbits+offset);
   var mask = lshift(2**nbits-1, shift);
   var imask = bnot(mask);
   if( value ) {
      field = bor(band(field, imask),
                  band(lshift(value, shift), mask));
      if( conv ) {
         struct[member] = conv.hton(field);
      } else {
         struct[member] = field;
      }
   } else {
      return rshift(band(field, mask), shift);
   }
}

// Process ARGS using ACTIONS with getopt OPTS/LONG_OPTS.
// Return the remaining unprocessed arguments.
function dogetopt (args, actions, opts, long_opts) {
   var optind,optarg;
   opts,optind,optarg = getopt.get_ordered_opts(args, opts, long_opts);
   for( i, v in ipairs(opts) ) {
      if( actions[v] ) {
         actions[v](optarg[i]);
      } else {
         error("unimplemented option: " .. v);
      }
   }
   var rest = {};
   for( i = optind, #args ) { table.insert(rest, args[i]); }
   return rest;
}

// based on http://stackoverflow.com/a/15434737/1523491
function have_module (name) {
   if( package.loaded[name] ) {
      return true;
   } else {
      for( _, searcher in ipairs(package.loaders) ) {
         var loader = searcher(name);
         if( type(loader) == 'function' ) {
            package.preload[name] = loader;
            return true;
         }
      }
      return false;
   }
}

// Exit with an error if we are not running as root.
function root_check (message) {
   if( syscall.geteuid() != 0 ) {
      print(message || "error: must run as root");
      main.exit(1);
   }
}

// Backward compatibility
token_bucket_new = require("lib.token_bucket").new;

// Simple rate-limited logging facility.  Usage:
//
//   local logger = lib.logger_new({ rate = <rate>,
//                                   discard_rate = <drate>,
//                                   fh = <fh>,
//                                   flush = true|false,
//                                   module = <module>,
//                                   date = true|false })
//   logger:log(message)
//
// <rate>   maximum rate of messages per second.  Additional
//          messages are discarded. Default: 10
// <drate>  maximum rate of logging of the number of discarded
//          messages.  Default: 0.5
// <fh>     file handle to log to.  Default: io.stdout
// flush    flush <fh> after each message if true
// <module> name of the module to include in the message
// date     include date in messages if true
//
// The output format is
// <date> <module>: message
//
// The logger uses an automatic throttling mechanism to dynamically
// lower the logging rate when the rate of discarded messages exceeds
// the maximum log rate by a factor of 5 over one or multiple adjacent
// intervals of 10 seconds.  For each such interval, the logging rate
// is reduced by a factor of 2 with a lower bound of 0.1 Hz (i.e. one
// message per 10 seconds).  For each 10-second interval for which the
// rate of discarded messages is below the threshold, the logging rate
// is increased by 1/4 of the original rate, i.e. it takes at least 40
// seconds to ramp back up to the original rate.
//
// The tables lib.logger_default and lib.logger_throttle are exposed
// to the user as part of the API.
logger_default = {
   rate = 10,
   discard_rate = 0.5,
   fh = io.stdout,
   flush = true,
   module = '',
   date = true,
   date_fmt = "%b %d %Y %H:%M:%S ",
};
logger_throttle = {
   interval = 10, // Sampling interval for discard rate
   excess = 5,   // Multiple of rate at which to start throttling
   increment = 4, // Fraction of rate to increase for un-throttling
   min_rate = 0.1, // Minimum throttled rate
};
var logger = {
   default = logger_default,
   throttle = logger_throttle,
};
logger.mt = { __index = logger };

function logger_new (config) {
   config = config || logger.default;
   var l = setmetatable({}, logger.mt);
   _config = setmetatable({}, { __index = logger.default });
   for( k, v in pairs(config) ) {
      assert(_config[k], "Logger: unknown configuration option "..k);
      _config[k] = v;
   }
   l._config = _config;
   l._tb = token_bucket_new({ rate = _config.rate });
   l._discard_tb = token_bucket_new({ rate = _config.discard_rate });
   l._discards = 0;
   var _throttle = {
      discards = 0,
      tstamp = C.get_monotonic_time(),
      rate = _config.rate * logger.throttle.excess,
      increment = _config.rate/logger.throttle.increment,
   };
   l._throttle = setmetatable(_throttle, { __index = logger.throttle });
   l._preamble = (l._config.module && l._config.module..': ') || '';
   return l;
}

// Log message <msg> unless the rate limit is exceeded.  Note that
// <msg> is evaluated upon the method call in any case, which can have
// a performance impact even when the message is discarded.  This can
// be avoided by calling the can_log() method first, i.e.
//
//   if logger:can_log() then
//     logger:log('foo')
//   end
//
// This framework should have very low processing overhead and should
// be safe to call even form within packet-processing loops.  The
// bottleneck currently is the call to clock_gettime().  Care has been
// taken to make sure that this call is executed at most once in the
// non-rate limited code path.

function logger::log (msg) {
   if( this._tb->take(1) ) {
      var config = this._config;
      var throttle  = this._throttle;
      throttle.discards = throttle.discards + this._discards;
      var date = '';
      if( config.date ) {
         date = os.date(config.date_fmt);
      }
      var preamble = date..this._preamble;
      var fh = config.fh;
      var now = C.get_monotonic_time();
      var interval = now-throttle.tstamp;
      var samples = interval/throttle.interval;
      var drate = throttle.discards/interval;
      var current_rate = this._tb->rate();
      if( this._discards > 0 && this._discard_tb->take(1) ) {
         fh->write(string.format(preamble.."%d messages discarded\n",
                                this._discards));
         throttle.discards = this._discards;
         this._discards = 0;
      }
      if( samples >= 1 ) {
         if( drate > throttle.rate ) {
            var min_rate = throttle.min_rate;
            if( current_rate > min_rate ) {
               var throttle_rate = math.max(min_rate,
                                              current_rate/2**samples);
               fh->write(string.format(preamble.."message discard rate %.2f exceeds "
                                      .."threshold (%.2f), throttling logging rate to "
                                      .."%.2f Hz%s\n",
                                   drate, throttle.rate, throttle_rate,
                                   (throttle_rate == min_rate && ' (minimum)') || ''));
               this._tb->rate(throttle_rate);
            }
         } else {
            var configured_rate = config.rate;
            if( current_rate < configured_rate ) {
               var throttle_rate = math.min(configured_rate,
                                              current_rate + throttle.increment*samples);
               fh->write(string.format(preamble.."unthrottling logging rate to "
                                      .."%.2f Hz%s\n",
                                   throttle_rate,
                                   (throttle_rate == configured_rate && ' (maximum)') || ''));
               this._tb->rate(throttle_rate);
            }
         }
         throttle.discards = 0;
         throttle.tstamp = now;
      }
      fh->write(preamble..msg..'\n');
      if( config.flush ) { fh->flush(); }
   } else {
      this._discards = this._discards + 1;
   }
}

// Return true if a message can be logged without being discarded,
// false otherwise.  In the first case, it is guaranteed that the
// token bucket for the logging rate-limiter contains at least one
// token.  In the second case, the rate-limit is hit and the counter
// of discarded messages is increased.
function logger::can_log () {
   if( this._tb->can_take(1) ) {
      return true;
   }
   this._discards = this._discards + 1;
   return false;
}

// Wrapper around os.getenv which only returns the variable's value if it
// is non-empty.
function getenv (name) {
   var value = os.getenv(name);
   if( value && #value != 0 ) { return value;
   } else { return null; }
}

// Wrapper around execve.
function execv(path, argv) {
   var env = {};
   for( k, v in pairs(syscall.environ()) ) { table.insert(env, k.."="..v); }
   return syscall.execve(path, argv || {}, env);
}

// Return an array of random bytes.
function random_bytes_from_dev_urandom (count) {
   var bytes = ffi.new(ffi.typeof('uint8_t[$]', count));
   var f = syscall.open('/dev/urandom', 'rdonly');
   var written = 0;
   while( written < count ) {
      written = written + assert(f->read(bytes, count-written));
   }
   f->close();
   return bytes;
}

function random_bytes_from_math_random (count) {
   var bytes = ffi.new(ffi.typeof('uint8_t[$]', count));
   for( i = 0,count-1 ) { bytes[i] = math.random(0, 255); }
   return bytes;
}

function randomseed (seed) {
   seed = tonumber(seed);
   if( seed ) {
      var msg = 'Using deterministic random numbers, SNABB_RANDOM_SEED=%d.\n';
      io.stderr->write(msg->format(seed));
      // When setting a seed, use deterministic random bytes.
      random_bytes = random_bytes_from_math_random;
   } else {
      // Otherwise use /dev/urandom.
      seed = ffi.cast('uint32_t*', random_bytes_from_dev_urandom(4))[0];
      random_bytes = random_bytes_from_dev_urandom;
   }
   math.randomseed(seed);
   return seed;
}

function random_data (length) {
   return ffi.string(random_bytes(length), length);
}

var lower_case = "abcdefghijklmnopqrstuvwxyz";
var upper_case = lower_case->upper();
var extra = "0123456789_-";
var alphabet = table.concat({lower_case, upper_case, extra});
assert(#alphabet == 64);
function random_printable_string (entropy) {
   // 64 choices in our alphabet, so 6 bits of entropy per byte.
   entropy = entropy || 160;
   var length = math.floor((entropy - 1) / 6) + 1;
   var bytes = random_data(length);
   var out = {};
   for( i=1,length ) {
      out[i] = alphabet->byte(bytes->byte(i) % 64 + 1);
   }
   return string.char(unpack(out));
}

// Compiler barrier.
// Prevents LuaJIT from moving load/store operations over this call.
// Any FFI call is sufficient to achieve this, see:
// http://www.freelists.org/post/luajit/Compiler-loadstore-barrier-volatile-pointer-barriers-in-general,3
function compiler_barrier () {
   C.nop();
}

// parse: Given ARG, a table of parameters or nil, assert that from
// CONFIG all of the required keys are present, fill in any missing values for
// optional keys, and error if any unknown keys are found.
//
// ARG := { key=vaue, ... }
// CONFIG := { key = {[required=boolean], [default=value]}, ... }
function parse (arg, config) {
   var ret = {};
   if( arg == null ) { arg = {}; }
   for( k, o in pairs(config) ) {
      assert(arg[k] != null || ! o.required, "missing required parameter '"..k.."'");
   }
   for( k, v in pairs(arg) ) {
      assert(config[k], "unrecognized parameter '"..k.."'");
      ret[k] = v;
   }
   for( k, o in pairs(config) ) {
      if( ret[k] == null ) { ret[k] = o.default; }
   }
   return ret;
}

function set(...) {
   var ret = {};
   for( k, v in pairs({...}) ) { ret[v] = true; }
   return ret;
}

function selftest () {
   print("selftest: lib");
   print("Testing equal");
   assert(true == equal({foo="bar"}, {foo="bar"}));
   assert(false == equal({foo="bar"}, {foo="bar", baz="foo"}));
   assert(false == equal({foo="bar", baz="foo"}, {foo="bar"}));
   print("Testing load_string");
   assert(equal(load_string("{1,2}"), {1,2}), "load_string failed.");
   print("Testing load/store_conf");
   var conf = { foo="1", bar=42, arr={2,"foo",4}};
   var testpath = "/tmp/snabb_lib_test_conf";
   store_conf(testpath, conf);
   assert(equal(conf, load_conf(testpath)), "Either `store_conf' or `load_conf' failed.");
   print("Testing csum");
   var data = "\x45\x00\x00\x73\x00\x00\x40\x00\x40\x11\xc0\xa8\x00\x01\xc0\xa8\x00\xc7";
   var cs = csum(data, string.len(data));
   assert(cs == 0xb861, "bad checksum: " .. bit.tohex(cs, 4));

//    assert(readlink('/etc/rc2.d/S99rc.local') == '../init.d/rc.local', "bad readlink")
//    assert(dirname('/etc/rc2.d/S99rc.local') == '/etc/rc2.d', "wrong dirname")
//    assert(basename('/etc/rc2.d/S99rc.local') == 'S99rc.local', "wrong basename")
   print("Testing hex(un)dump");
   assert(hexdump('\x45\x00\xb6\x7d\x00\xFA\x40\x00\x40\x11')->upper()
         ->match('^45.00.B6.7D.00.FA.40.00.40.11$'), "wrong hex dump");
   assert(hexundump('4500 B67D 00FA400040 11', 10)
         =='\x45\x00\xb6\x7d\x00\xFA\x40\x00\x40\x11', "wrong hex undump");
   print("Testing ntohl");
   var raw_val = 0xf0d0b0f0;
   assert(ntohl(raw_val) > 0, "ntohl must be unsigned");
   assert(ntohl(ntohl(raw_val)) == raw_val, 
      "calling ntohl twice must return the original value");

   // test parse
   print("Testing parse");
   var function assert_parse_equal (arg, config, expected) {
      assert(equal(parse(arg, config), expected));
   }
   var function assert_parse_error (arg, config) {
      assert(! pcall(parse, arg, config));
   }

   var req = {required=true};
   var opt = {default=42};

   assert_parse_equal({a=1, b=2}, {a=req, b=req, c=opt}, {a=1, b=2, c=42});
   assert_parse_equal({a=1, b=2}, {a=req, b=req}, {a=1, b=2});
   assert_parse_equal({a=1, b=2, c=30}, {a=req, b=req, c=opt, d=opt}, {a=1, b=2, c=30, d=42});
   assert_parse_equal({a=1, b=2, d=10}, {a=req, b=req, c=opt, d=opt}, {a=1, b=2, c=42, d=10});
   assert_parse_equal({d=10}, {c=opt, d=opt}, {c=42, d=10});
   assert_parse_equal({}, {c=opt}, {c=42});
   assert_parse_equal({d=false}, {d=opt}, {d=false});
   assert_parse_equal({d=null}, {d=opt}, {d=42});
   assert_parse_equal({a=false, b=2}, {a=req, b=req}, {a=false, b=2});
   assert_parse_equal(null, {}, {});

   assert_parse_error({}, {a=req, b=req, c=opt});
   assert_parse_error({d=30}, {a=req, b=req, d=opt});
   assert_parse_error({a=1}, {a=req, b=req});
   assert_parse_error({b=1}, {a=req, b=req});
   assert_parse_error({a=null, b=2}, {a=req, b=req});
   assert_parse_error({a=1, b=null}, {a=req, b=req});
   assert_parse_error({a=1, b=2, d=10, e=100}, {a=req, b=req, d=opt});
   assert_parse_error({a=1, b=2, c=4}, {a=req, b=req});
   assert_parse_error({a=1, b=2}, {});
   assert_parse_error(null, {a=req});
}

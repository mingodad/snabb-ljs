// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// shm.lua -- shared memory alternative to ffi.new()

module(..., package.seeall);

var ffi = require("ffi");
var lib = require("core.lib");
var S = require("syscall");
var const = require("syscall.linux.constants");

// Root directory where the object tree is created.
root = os.getenv("SNABB_SHM_ROOT") || "/var/run/snabb";

// Table (address->size) of all currently mapped objects.
mappings = {};

// Map an object into memory.
var function map (name, type, readonly, create) {
   var path = resolve(name);
   var mapmode = readonly && 'read' || 'read, write';
   var ctype = ffi.typeof(type);
   var size = ffi.sizeof(ctype);
   var stat = S.stat(root..'/'..path);
   if( stat && stat.size != size ) {
      print(("shm warning: resizing %s from %d to %d bytes")
            ->format(path, stat.size, size));
   }
   var fd, err;
   if( create ) {
      // Create the parent directories. If this fails then so will the open().
      mkdir(lib.dirname(path));
      fd, err = S.open(root..'/'..path, "creat, rdwr", "rusr, wusr, rgrp, roth");
   } else {
      fd, err = S.open(root..'/'..path, readonly && "rdonly" || "rdwr");
   }
   if( ! fd ) { error("shm open error ("..path.."):"..tostring(err)); }
   if( create ) {
      assert(fd->ftruncate(size), "shm: ftruncate failed");
   } else {
      assert(fd->fstat().size == size, "shm: unexpected size");
   }
   var mem;
   mem, err = S.mmap(null, size, mapmode, "shared", fd, 0);
   fd->close();
   if( mem == null ) { error("mmap failed: " .. tostring(err)); }
   mappings[pointer_to_number(mem)] = size;
   return ffi.cast(ffi.typeof("$&", ctype), mem);
}

function create (name, type) {
   return map(name, type, false, true);
}

function open (name, type, readonly) {
   return map(name, type, readonly, false);
}

function exists (name) {
   var path = resolve(name);
   var fd = S.open(root..'/'..path, "rdonly");
   return fd && fd->close();
}

function alias (name, target) {
   mkdir(lib.dirname(resolve(name)));
   assert(S.symlink(root.."/"..resolve(target), root.."/"..resolve(name)),
          "shm alias failed");
}

function resolve (name) {
   var q, p = name->match("^(/*)(.*)"); // split qualifier (/)
   var result = p;
   if( q != '/' ) { result = tostring(S.getpid()).."/"..result; }
   return result;
}

// Make the named subdirectory in the shm folder.
function mkdir (name) {
   // Create root with mode "rwxr-xr-x" if it does not exist yet.
   if( ! S.stat(root) ) {
      var mask = S.umask(0);
      var status, err = S.mkdir(root, "00755");
      assert(status || err.errno == const.E.EXIST, ("Unable to create %s: %s")->format(
                root, tostring(err || "unspecified error")));
      S.umask(mask);
   }
   // Create sub directories
   var dir = root;
   name->gsub("([^/]+)",
             function (x) {
                dir = dir.."/"..x;
                S.mkdir(dir, "rwxu, rgrp, xgrp, roth, xoth");
             });
}

// Delete a shared object memory mapping.
// The pointer must have been returned by map().
function unmap (ptr) {
   var size = mappings[pointer_to_number(ptr)];
   assert(size, "shm mapping not found");
   S.munmap(ptr, size);
   mappings[pointer_to_number(ptr)] = null;
}

function pointer_to_number (ptr) {
   return tonumber(ffi.cast("uint64_t", ffi.cast("void*", ptr)));
}

// Unlink names from their objects.
function unlink (name) {
   var path = resolve(name);
   // Note: Recursive delete is dangerous, important it is under $root!
   return S.util.rm(root..'/'..path); // recursive rm of file or directory
}

// Return an array of objects under the prefix name.
// The names are returned unqualified e.g. 'x' and not 'foo/bar/x'.
function children (name) {
   // XXX dirtable returns an array but with a special tostring metamethod.
   //     Potentially confusing? (Copy into plain array instead?)
   return S.util.dirtable(root.."/"..resolve(name), true) || {};
}

// Type registry for modules that implement abstract shm objects.
types = {};
function register (type, module) {
   assert(module, "Must supply module");
   assert(! types[type], "Duplicate shm type: "..type);
   types[type] = module;
   return type;
}

// Create a directory of shm objects defined by specs under path.
function create_frame (path, specs) {
   var frame = {};
   frame.specs = specs;
   frame.path = path.."/";
   for( name, spec in pairs(specs) ) {
      assert(frame[name] == null, "shm: duplicate name: "..name);
      var module = spec[1];
      var initargs = lib.array_copy(spec);
      table.remove(initargs, 1); // strip type name from spec
      frame[name] = module.create(frame.path..name.."."..module.type,
                                  unpack(initargs));
   }
   return frame;
}

// Open a directory of shm objects for reading, determine their types by file
// extension.
function open_frame (path) {
   var frame = {};
   frame.specs = {};
   frame.path = path.."/";
   frame.readonly = true;
   for( _, file in ipairs(children(path)) ) {
      var name, type = file->match("(.*)[.](.*)$");
      var module = types[type];
      if( module ) {
         assert(frame[name] == null, "shm: duplicate name: "..name);
         frame[name] = module.open(frame.path..file, 'readonly');
         frame.specs[name] = {module};
      }
   }
   return frame;
}

// Delete/unmap a frame of shm objects. The frame's directory is unlinked if
// the frame was created by create_frame.
function delete_frame (frame) {
   for( name, spec in pairs(frame.specs) ) {
      var module = spec[1];
      if( rawget(module, 'delete') ) {
         module.delete(frame.path..name.."."..module.type);
      } else {
         unmap(frame[name]);
      }
   }
   if( ! frame.readonly ) {
      unlink(frame.path);
   }
}


function selftest () {
   print("selftest: shm");

   print("checking resolve..");
   pid = tostring(S.getpid());
   var p1 = resolve("/"..pid.."/foo/bar/baz/beer");
   var p2 = resolve("foo/bar/baz/beer");
   assert(p1 == p2, p1.." ~= "..p2);

   print("checking shared memory..");
   var name = "shm/selftest/obj";
   print("create "..name);
   p1 = create(name, "struct { int x, y, z; }");
   p2 = create(name, "struct { int x, y, z; }");
   assert(p1 != p2);
   assert(p1.x == p2.x);
   p1.x = 42;
   assert(p1.x == p2.x);
   assert(unlink(name));
   unmap(p1);
   unmap(p2);

   print("checking exists..");
   assert(! exists(name));
   p1 = create(name, "struct { int x, y, z; }");
   assert(exists(name));
   assert(unlink(name));
   unmap(p1);
   assert(! exists(name));

   // Test that we can open and cleanup many objects
   print("checking many objects..");
   var path = 'shm/selftest/manyobj';
   var n = 10000;
   var objs = {};
   for( i = 1, n ) {
      table.insert(objs, create(path.."/"..i, "uint64_t[1]"));
   }
   print(n.." objects created");
   for( i = 1, n ) { unmap(objs[i]); }
   print(n.." objects unmapped");
   assert((#children(path)) == n, "child count mismatch");
   assert(unlink("shm"));
   print("selftest ok");
}


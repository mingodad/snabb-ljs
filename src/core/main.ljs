// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

// Default to not using any Lua code on the filesystem.
// (Can be overridden with -P argument: see below.)
package.path = '';

var STP = require("lib.lua.StackTracePlus");
var ffi = require("ffi");
var zone = require("jit.zone");
var lib = require("core.lib");
var shm = require("core.shm");
var C   = ffi.C;
// Load ljsyscall early to help detect conflicts
// (e.g. FFI type name conflict between Snabb and ljsyscall)
var S = require("syscall");

require("lib.lua.strict");
require("lib.lua.class");

// ljsyscall returns error as a cdata instead of a string, and the standard
// assert doesn't use tostring on it.
_G.assert = function (v, ...) {
   if( v ) { return v, ...; }
   error(tostring(... || "assertion failed!"));
};

// Reserve names that we want to use for global module.
// (This way we avoid errors from the 'strict' module.)
_G.config, _G.engine, _G.memory, _G.link, _G.packet, _G.timer,
   _G.main = null;

ffi.cdef([=[
      extern int argc;
      extern char** argv;
]=]);

// Enable developer-level debug if SNABB_DEBUG env variable is set.
_G.developer_debug = lib.getenv("SNABB_DEBUG") != null;
debug_on_error = _G.developer_debug;

function main () {
   zone("startup");
   require ("lib.lua.strict");
   // Warn on unsupported platforms
   if( ffi.arch != 'x64' || ffi.os != 'Linux' ) {
      error("fatal: "..ffi.os.."/"..ffi.arch.." is not a supported platform\n");
   }
   initialize();
   if( lib.getenv("SNABB_PROGRAM_LUACODE") ) {
      // Run the given Lua code instead of the command-line
      var expr = lib.getenv("SNABB_PROGRAM_LUACODE");
      var f = loadstring(expr);
      if( f == null ) {
         error(("Failed to load $SNABB_PROGRAM_LUACODE: %q")->format(expr));
      } else {
         f();
      }
   } else {
      // Choose a program based on the command line
      var program, args = select_program(parse_command_line());
      if( ! lib.have_module(modulename(program)) ) {
         print("unsupported program: "..program->gsub("_", "-"));
         usage(1);
      } else {
         require(modulename(program)).run(args);
      }
   }
}

// Take the program name from the first argument, unless the first
// argument is "snabb", in which case pop it off, handle any options
// passed to snabb itself, and use the next argument.
function select_program (args) {
   var program = programname(table.remove(args, 1));
   if( program == 'snabb' ) {
      while( #args > 0 && args[1]->match('^-') ) {
         var opt = table.remove(args, 1);
         if( opt == '-h' || opt == '--help' ) {
            usage(0);
         } else if( opt == '-v' || opt == '--version' ) {
            version();
            os.exit(0);
         } else {
            print("unrecognized option: "..opt);
            usage(1);
         }
      }
      if( #args == 0 ) { usage(1); }
      program = programname(table.remove(args, 1));
   }
   return program, args;
}

function usage (status) {
   print("Usage: "..ffi.string(C.argv[0]).." <program> ...");
   var programs = require("programs_inc")->gsub("%S+", "  %1");
   print();
   print("This snabb executable has the following programs built in:");
   print(programs);
   print("For detailed usage of any program run:");
   print("  snabb <program> --help");
   print();
   print("If you rename (or copy or symlink) this executable with one of");
   print("the names above then that program will be chosen automatically.");
   os.exit(status);
}

function version () {
   var v = require('core.version');
   var version_str = v.version;
   if( v.extra_version != '' ) {
      version_str = version_str.." ("..v.extra_version..")";
   }
   print(ffi.string(C.basename(C.argv[0])).." "..version_str);
   print([=[
Copyright (C) 2012-2017 Snabb authors; see revision control logs for details.
License: <https://www.apache.org/licenses/LICENSE-2.0>

Snabb is open source software.  For more information on Snabb, see
https://github.com/snabbco/snabb.]=]);
}

function programname (name) {
   return name->gsub("^.*/", "")
              ->gsub("-[0-9.]+[-%w]+$", "")
              ->gsub("-", "_")
              ->gsub("^snabb_", "");
}

function modulename (program) {
   program = programname(program);
   return ("program.%s.%s")->format(program, program);
}

// Return all command-line paramters (argv) in an array.
function parse_command_line () {
   var array = {};
   for( i = 0, C.argc - 1 ) { 
      table.insert(array, ffi.string(C.argv[i]));
   }
   return array;
}

function exit (status) {
   os.exit(status);
}

//- Globally initialize some things. Module can depend on this being done.
function initialize () {
   require("core.lib");
   require("core.clib_h");
   require("core.lib_h");
   lib.randomseed(tonumber(lib.getenv("SNABB_RANDOM_SEED")));
   // Global API
   _G.config = require("core.config");
   _G.engine = require("core.app");
   _G.memory = require("core.memory");
   _G.link   = require("core.link");
   _G.packet = require("core.packet");
   _G.timer  = require("core.timer");
   _G.main   = getfenv();
}

function handler (reason) {
   print(reason);
   print(STP.stacktrace());
   if( debug_on_error ) { debug.debug(); }
   os.exit(1);
}

// Cleanup after Snabb process.
function shutdown (pid) {
   // simple pcall helper to print error and continue
   var function safely (f) {
      var ok, err = pcall(f);
      if( ! ok ) { print(err); }
   }
   // Run cleanup hooks
   safely(function () { require("apps.interlink.receiver").shutdown(pid); });
   safely(function () { require("apps.interlink.transmitter").shutdown(pid); });
   // Parent process performs additional cleanup steps.
   // (Parent is the process whose 'group' folder is not a symlink.)
   var st, err = S.lstat(shm.root.."/"..pid.."/group");
   var is_parent = st && st.isdir;
   if( is_parent ) {
      safely(function () { require("lib.hardware.pci").shutdown(pid); });
      safely(function () { require("core.memory").shutdown(pid); });
   }
   // Free shared memory objects
   if( ! _G.developer_debug && ! lib.getenv("SNABB_SHM_KEEP") ) {
      // Try cleaning up symlinks for named apps, if none exist, fail silently.
      var backlink = shm.root.."/"..pid.."/name";
      var name_link = S.readlink(backlink);
      S.unlink(name_link);
      S.unlink(backlink);

      shm.unlink("/"..pid);
   }
}

function selftest () {
   print("selftest");
   assert(programname("/bin/snabb-1.0") == "snabb",
      "Incorrect program name parsing");
   assert(programname("/bin/snabb-1.0-alpha2") == "snabb",
      "Incorrect program name parsing");
   assert(programname("/bin/snabb-nfv") == "nfv",
      "Incorrect program name parsing");
   assert(programname("/bin/nfv-1.0") == "nfv",
      "Incorrect program name parsing");
   assert(modulename("nfv-sync-master-2.0") == "program.nfv_sync_master.nfv_sync_master",
      "Incorrect module name parsing");
   var pn = programname;
   // snabb foo => foo
   assert(select_program({ 'foo' }) == "foo",
      "Incorrect program name selected");
   // snabb-foo => foo
   assert(select_program({ 'snabb-foo' }) == "foo",
      "Incorrect program name selected");
   // snabb snabb-foo => foo
   assert(select_program({ 'snabb', 'snabb-foo' }) == "foo",
      "Incorrect program name selected");
}

// Fork a child process that monitors us and performs cleanup actions
// when we terminate.
var snabbpid = S.getpid();
var lockfile = os.tmpname();
var lock = S.open(lockfile, "wronly");
S.unlink(lockfile);
S.sigprocmask("block", "hup, int, quit, term");
lock->lockf("lock", 0);
if( assert(S.fork()) != 0 ) {
   // Parent process; run Snabb.
   S.sigprocmask("unblock", "hup, int, quit, term");
   xpcall(main, handler);
   // Lock will be released however the process exits.
} else {
   // Child process: Supervise parent & perform cleanup.  Lock not
   // inherited from parent.
   S.prctl("set_name", "[snabb sup]");
   // Wait for parent to release lock.
   lock->lockf("lock", 0);
   // Finally, clean up after parent process.
   shutdown(snabbpid);
   os.exit(128);
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var packet    = require("core.packet");
var lib       = require("core.lib");
var link      = require("core.link");
var config    = require("core.config");
var timer     = require("core.timer");
var shm       = require("core.shm");
var histogram = require('core.histogram');
var counter   = require("core.counter");
var zone      = require("jit.zone");
var jit       = require("jit");
var S         = require("syscall");
var ffi       = require("ffi");
var C         = ffi.C;
require("core.packet_h");

// Packet per pull
pull_npackets = math.floor(link.max / 10);

// Set to true to enable logging
log = false;
var use_restart = false;

test_skipped_code = 43;

// Set the directory for the named programs.
var named_program_root = shm.root .. "/" .. "by-name";

// The currently claimed name (think false = nil but nil makes strict.lua unhappy).
program_name = false;

// The set of all active apps and links in the system, indexed by name.
app_table, link_table = {}, {};

configuration = config.new();

// Counters for statistics.
breaths   = counter.create("engine/breaths.counter");   // Total breaths taken
frees     = counter.create("engine/frees.counter");     // Total packets freed
freebits  = counter.create("engine/freebits.counter");  // Total packet bits freed (for 10GbE)
freebytes = counter.create("engine/freebytes.counter"); // Total packet bytes freed
configs   = counter.create("engine/configs.counter");   // Total configurations loaded

// Breathing regluation to reduce CPU usage when idle by calling usleep(3).
//
// There are two modes available:
//
//   Hz = <n> means to aim for an exact <n> breaths per second rhythm
//   Hz = false means dynamic adjustment of the breathing interval
//
// Dynamic adjustment automatically scales the time to sleep between
// breaths from nothing up to maxsleep (default: 100us). If packets
// are processed during a breath then the sleep period is halved, and
// if no packets are processed during a breath then the sleep interval
// is increased by one microsecond.
//
// The default is dynamic adjustment which should work well for the
// majority of cases.

Hz = false;
sleep = 0;
maxsleep = 100;

// busywait: If true then the engine will poll for new data in a tight
// loop (100% CPU) instead of sleeping according to the Hz setting.
busywait = false;

// True when the engine is running the breathe loop.
var running = false;

// Return current monotonic time in seconds.
// Can be used to drive timers in apps.
monotonic_now = false;
function now () {
   // Return cached time only if it is fresh
   return (running && monotonic_now) || C.get_monotonic_time();
}

// Run app:methodname() in protected mode (pcall). If it throws an
// error app will be marked as dead and restarted eventually.
function with_restart (app, method) {
   var status, result;
   if( use_restart ) {
      // Run fn in protected mode using pcall.
      status, result = pcall(method, app);

      // If pcall caught an error mark app as "dead" (record time and cause
      // of death).
      if( ! status ) {
         app.dead = { error = result, time = now() };
      }
   } else {
      status, result = true, method(app);
   }
   return status, result;
}

// Restart dead apps.
function restart_dead_apps () {
   if( ! use_restart ) { return; }
   var restart_delay = 2; // seconds
   var actions = {};

   for( name, app in pairs(app_table) ) {
      if( app.dead && (now() - app.dead.time) >= restart_delay ) {
         io.stderr->write(("Restarting %s (died at %f: %s)\n")
                         ->format(name, app.dead.time, app.dead.error));
         var info = configuration.apps[name];
         table.insert(actions, {'stop_app', {name}});
         table.insert(actions, {'start_app', {name, info.class, info.arg}});
         for( linkspec in pairs(configuration.links) ) {
            var fa, fl, ta, tl = config.parse_link(linkspec);
            if( fa == name ) {
               table.insert(actions, {'link_output', {fa, fl, linkspec}});
            }
            if( ta == name ) {
               table.insert(actions, {'link_input', {ta, tl, linkspec}});
            }
         }
      }
   }

   // Restart dead apps if necessary.
   if( #actions > 0 ) { apply_config_actions(actions); }
}

// Configure the running app network to match new_configuration.
//
// Successive calls to configure() will migrate from the old to the
// new app network by making the changes needed.
function configure (new_config) {
   var actions = compute_config_actions(configuration, new_config);
   apply_config_actions(actions);
   counter.add(configs);
}


// Stop all apps by loading an empty configuration.
function stop () {
   configure(config.new());
}

// Removes the claim on a name, freeing it for other programs.
//
// This relinquish a claim on a name if one exists. if the name does not
// exist it will raise an error with an error message.
function unclaim_name(claimed_name) {
   var name = assert(claimed_name || program_name, "No claim to name.");
   var name_fq = named_program_root .. "/" .. name;
   var piddir = assert(S.readlink(name_fq));
   var backlink = piddir .. "/name";

   // First unlink the backlink
   assert(S.unlink(backlink));

   // Remove the actual namedir
   assert(S.unlink(name_fq));

   // Remove from the name from the configuration
   program_name = false;
}

// Claims a name for a program so it's identified by name by other processes.
//
// The name given to the function must be unique; if a name has been used before
// by an active process the function will error displaying an appropriate error
// message.Successive calls to claim_name with the same name will return with
// inaction. If the program has already claimed a name and this is called with
// a different name, it will attempt to claim the new name and then unclaim the
// old name. If an problem occurs whilst claiming the new name, the old name
// will remain claimed.
function claim_name(name) {
   var namedir_fq = named_program_root .. "/" .. name;
   var procpid = S.getpid();
   var piddir = shm.root .. "/" .. procpid;
   var backlinkdir = piddir.."/name";

   // If we're being asked to claim the name we already have, return false.
   if( program_name == name ) {
      return;
   }

   // Verify that the by-name directory exists.
   shm.mkdir("by-name/");

   // Create the new symlink (name has probably been taken if this fails).
   assert(S.symlink(piddir, namedir_fq), "Name already taken.");

   // We've successfully secured the new name, so we can unclaim the old now.
   if( program_name != false ) { unclaim_name(program_name); }

   // Save our current name so we know what it is later.
   program_name = name;

   // Create a backlink so to the symlink so we can easily cleanup
   assert(S.symlink(namedir_fq, backlinkdir));
}

// Enumerates the named programs with their PID
//
// This returns a table programs with the key being the name of the program
// and the value being the PID of the program. Each program is checked that
// it's still alive. Any dead program or program without a name is not listed.
// If the "pidkey" is true, it will have the PID as the key instead of the name.
function enumerate_named_programs(pidkey) {
   var progs = {};
   var dirs = shm.children("/by-name");
   if( dirs == null ) { return progs; }
   for( _, program in pairs(dirs) ) {
      var fq = named_program_root .. "/" .. program;
      var piddir = S.readlink(fq);
      var pid = tonumber(lib.basename(piddir));
      if( S.kill(pid, 0) ) { progs[lib.basename(fq)] = pid; }
   }
   return progs;
}

// Return the configuration actions needed to migrate from old config to new.
function compute_config_actions (old, new) {
   var actions = {};

   // First determine the links that are going away and remove them.
   for( linkspec in pairs(old.links) ) {
      if( ! new.links[linkspec] ) {
         var fa, fl, ta, tl = config.parse_link(linkspec);
         table.insert(actions, {'unlink_output', {fa, fl}});
         table.insert(actions, {'unlink_input', {ta, tl}});
         table.insert(actions, {'free_link', {linkspec}});
      }
   }

   // Do the same for apps.
   for( appname, info in pairs(old.apps) ) {
      if( ! new.apps[appname] ) {
         table.insert(actions, {'stop_app', {appname}});
      }
   }

   // Start new apps, restart reclassed apps, or reconfigure apps with
   // changed configuration.
   var fresh_apps = {};
   for( appname, info in pairs(new.apps) ) {
      var class, arg = info.class, info.arg;
      if( ! old.apps[appname] ) {
         table.insert(actions, {'start_app', {appname, class, arg}});
         fresh_apps[appname] = true;
      } else if( old.apps[appname].class != class ) {
         table.insert(actions, {'stop_app', {appname}});
         table.insert(actions, {'start_app', {appname, class, arg}});
         fresh_apps[appname] = true;
      } else if( ! lib.equal(old.apps[appname].arg, arg) ) {
         if( class.reconfig ) {
            table.insert(actions, {'reconfig_app', {appname, class, arg}});
         } else {
            table.insert(actions, {'stop_app', {appname}});
            table.insert(actions, {'start_app', {appname, class, arg}});
            fresh_apps[appname] = true;
         }
      } else {
         // Otherwise if nothing changed, then nothing to do; we keep
         // the app around.
      }
   }

   // Now rebuild links.
   for( linkspec,_ in pairs(new.links) ) {
      var fa, fl, ta, tl = config.parse_link(linkspec);
      var fresh_link = ! old.links[linkspec];
      if( fresh_link ) { table.insert(actions, {'new_link', {linkspec}}); }
      if( ! new.apps[fa] ) { error("no such app: " .. fa); }
      if( ! new.apps[ta] ) { error("no such app: " .. ta); }
      if( fresh_link || fresh_apps[fa] ) {
         table.insert(actions, {'link_output', {fa, fl, linkspec}});
      }
      if( fresh_link || fresh_apps[ta] ) {
         table.insert(actions, {'link_input', {ta, tl, linkspec}});
      }
   }

   return actions;
}

// Update the active app network by applying the necessary actions.
function apply_config_actions (actions) {
   // Table of functions that execute config actions
   var ops = {};
   // As an efficiency hack, some apps rely on the fact that we add
   // links both by name and by index to the "input" and "output"
   // objects.  Probably they should be changed to just collect their
   // inputs and outputs in their :link() functions.  Until then, call
   // this function when removing links from app input/output objects.
   var function remove_link_from_array(array, link) {
      for( i=1,#array ) {
         if( array[i] == link ) {
            table.remove(array, i);
            return;
         }
      }
   }
   function ops.unlink_output (appname, linkname) {
      var app = app_table[appname];
      var link = app.output[linkname];
      app.output[linkname] = null;
      remove_link_from_array(app.output, link);
      if( app.link ) { app->link(); }
   }
   function ops.unlink_input (appname, linkname) {
      var app = app_table[appname];
      var link = app.input[linkname];
      app.input[linkname] = null;
      remove_link_from_array(app.input, link);
      if( app.link ) { app->link(); }
   }
   function ops.free_link (linkspec) {
      link.free(link_table[linkspec], linkspec);
      link_table[linkspec] = null;
      configuration.links[linkspec] = null;
   }
   function ops.new_link (linkspec) {
      link_table[linkspec] = link.new(linkspec);
      configuration.links[linkspec] = true;
   }
   function ops.link_output (appname, linkname, linkspec) {
      var app = app_table[appname];
      var link = assert(link_table[linkspec]);
      app.output[linkname] = link;
      table.insert(app.output, link);
      if( app.link ) { app->link(); }
   }
   function ops.link_input (appname, linkname, linkspec) {
      var app = app_table[appname];
      var link = assert(link_table[linkspec]);
      app.input[linkname] = link;
      table.insert(app.input, link);
      if( app.link ) { app->link(); }
   }
   function ops.stop_app (name) {
      var app = app_table[name];
      if( app.stop ) { app->stop(); }
      if( app.shm ) { shm.delete_frame(app.shm); }
      app_table[name] = null;
      configuration.apps[name] = null;
   }
   function ops.start_app (name, class, arg) {
      var app = class->new(arg);
      if( type(app) != 'table' ) {
         error(("bad return value from app '%s' start() method: %s")->format(
                  name, tostring(app)));
      }
      var zone = app.zone || getfenv(class.new)._NAME || name;
      app.appname = name;
      app.output = {};
      app.input = {};
      app_table[name] = app;
      app.zone = zone;
      if( app.shm ) {
         app.shm.dtime = {counter, C.get_unix_time()};
         app.shm = shm.create_frame("apps/"..name, app.shm);
      }
      configuration.apps[name] = { class = class, arg = arg };
   }
   function ops.reconfig_app (name, class, arg) {
      var app = app_table[name];
      app->reconfig(arg);
      configuration.apps[name].arg = arg;
   }

   // Dispatch actions.
   for( _, action in ipairs(actions) ) {
      var name, args = unpack(action);
      if( log ) { io.write("engine: ", name, " ", args[1], "\n"); }
      assert(ops[name], name)(unpack(args));
   }

   compute_breathe_order ();
}

// Sort the NODES topologically according to SUCCESSORS via
// reverse-post-order numbering.  The sort starts with ENTRIES.  This
// implementation is recursive; we should change it to be iterative
// instead.
function tsort (nodes, entries, successors) {
   var visited = {};
   var post_order = {};
   var maybe_visit;
   var function visit(node) {
      visited[node] = true;
      for( _,succ in ipairs(successors[node]) ) { maybe_visit(succ); }
      table.insert(post_order, node);
   }
   function maybe_visit(node) {
      if( ! visited[node] ) { visit(node); }
   }
   for( _,node in ipairs(entries) ) { maybe_visit(node); }
   for( _,node in ipairs(nodes) ) { maybe_visit(node); }
   var ret = {};
   while( #post_order > 0 ) { table.insert(ret, table.remove(post_order)); }
   return ret;
}

breathe_pull_order = {};
breathe_push_order = {};

// Sort the links in the app graph, and arrange to run push() on the
// apps on the receiving ends of those links.  This will run app:push()
// once for each link, which for apps with multiple links may cause the
// app's push function to run multiple times in a breath.
function compute_breathe_order () {
   breathe_pull_order, breathe_push_order = {}, {};
   var pull_links, inputs, successors = {}, {}, {};
   var linknames, appnames = {}, {};
   var function cmp_apps(a, b) { return appnames[a] < appnames[b]; }
   var function cmp_links(a, b) { return linknames[a] < linknames[b]; }
   for( appname,app in pairs(app_table) ) {
      appnames[app] = appname;
      if( app.pull ) {
         table.insert(breathe_pull_order, app);
         for( _,link in pairs(app.output) ) {
            pull_links[link] = true;
            successors[link] = {};
         }
      }
      for( linkname,link in pairs(app.input) ) {
         linknames[link] = appname..'.'..linkname;
         inputs[link] = app;
      }
   }
   for( link,app in pairs(inputs) ) {
      successors[link] = {};
      if( ! app.pull ) {
         for( _,succ in pairs(app.output) ) {
            successors[link][succ] = true;
            if( ! successors[succ] ) { successors[succ] = {}; }
         }
      }
   }
   for( link,succs in pairs(successors) ) {
      for( succ,_ in pairs(succs) ) {
         if( ! successors[succ] ) { successors[succ] = {}; }
      }
   }
   var function keys(x) {
      var ret = {};
      for( k,v in pairs(x) ) { table.insert(ret, k); }
      return ret;
   }
   var nodes, entry_nodes = keys(inputs), keys(pull_links);
   table.sort(breathe_pull_order, cmp_apps);
   table.sort(nodes, cmp_links);
   table.sort(entry_nodes, cmp_links);
   for( link,succs in pairs(successors) ) {
      successors[link] = keys(succs);
      table.sort(successors[link], cmp_links);
   }
   var link_order = tsort(nodes, entry_nodes, successors);
   var i = 1;
   for( _,link in ipairs(link_order) ) {
      if( breathe_push_order[#breathe_push_order] != inputs[link] ) {
         table.insert(breathe_push_order, inputs[link]);
      }
   }
}

// Call this to "run snabb switch".
function main (options) {
   options = options || {};
   var done = options.done;
   var no_timers = options.no_timers;
   if( options.duration ) {
      assert(! done, "You can not have both 'duration' and 'done'");
      done = lib.timeout(options.duration);
   }

   var breathe = breathe;
   if( options.measure_latency || options.measure_latency == null ) {
      var latency = histogram.create('engine/latency.histogram', 1e-6, 1e0);
      breathe = latency->wrap_thunk(breathe, now);
   }

   monotonic_now = C.get_monotonic_time();
   do {
      breathe();
      if( ! no_timers ) { timer.run(); }
      if( ! busywait ) { pace_breathing(); }
   } while(!( done && done()) );
   counter.commit();
   if( ! options.no_report ) { report(options.report); }
}

var nextbreath;
var lastfrees = 0;
var lastfreebits = 0;
var lastfreebytes = 0;
// Wait between breaths to keep frequency with Hz.
function pace_breathing () {
   if( Hz ) {
      nextbreath = nextbreath || monotonic_now;
      var sleep = tonumber(nextbreath - monotonic_now);
      if( sleep > 1e-6 ) {
         C.usleep(sleep * 1e6);
         monotonic_now = C.get_monotonic_time();
      }
      nextbreath = math.max(nextbreath + 1/Hz, monotonic_now);
   } else {
      if( lastfrees == counter.read(frees) ) {
         sleep = math.min(sleep + 1, maxsleep);
         C.usleep(sleep);
      } else {
         sleep = math.floor(sleep/2);
      }
      lastfrees = tonumber(counter.read(frees));
      lastfreebytes = tonumber(counter.read(freebytes));
      lastfreebits = tonumber(counter.read(freebits));
   }
}

function breathe () {
   running = true;
   monotonic_now = C.get_monotonic_time();
   // Restart: restart dead apps
   restart_dead_apps();
   // Inhale: pull work into the app network
   for( i = 1, #breathe_pull_order ) {
      var app = breathe_pull_order[i];
      if( app.pull && ! app.dead ) {
         zone(app.zone);
         with_restart(app, app.pull);
         zone();
      }
   }
   // Exhale: push work out through the app network
   for( i = 1, #breathe_push_order ) {
      var app = breathe_push_order[i];
      if( app.push && ! app.dead ) {
         zone(app.zone);
         with_restart(app, app.push);
         zone();
      }
   }
   counter.add(breaths);
   // Commit counters and rebalance freelists at a reasonable frequency
   if( counter.read(breaths) % 100 == 0 ) {
      counter.commit();
      packet.rebalance_freelists();
   }
   running = false;
}

function report (options) {
   if( ! options || options.showload ) {
      report_load();
   }
   if( options && options.showlinks ) {
      report_links();
   }
   if( options && options.showapps ) {
      report_apps();
   }
}

// Load reporting prints several metrics:
//   time - period of time that the metrics were collected over
//   fps  - frees per second (how many calls to packet.free())
//   fpb  - frees per breath
//   bpp  - bytes per packet (average packet size)
var lastloadreport = null;
var reportedfrees = null;
var reportedfreebits = null;
var reportedfreebytes = null;
var reportedbreaths = null;
function report_load () {
   var frees = counter.read(frees);
   var freebits = counter.read(freebits);
   var freebytes = counter.read(freebytes);
   var breaths = counter.read(breaths);
   if( lastloadreport ) {
      var interval = now() - lastloadreport;
      var newfrees   = tonumber(frees - reportedfrees);
      var newbytes   = tonumber(freebytes - reportedfreebytes);
      var newbits    = tonumber(freebits - reportedfreebits);
      var newbreaths = tonumber(breaths - reportedbreaths);
      var fps = math.floor(newfrees/interval);
      var fbps = math.floor(newbits/interval);
      var fpb = math.floor(newfrees/newbreaths);
      var bpp = math.floor(newbytes/newfrees);
      print(("load: time: %-2.2fs  fps: %-9s fpGbps: %-3.3f fpb: %-3s bpp: %-4s sleep: %-4dus")->format(
         interval,
         lib.comma_value(fps),
         fbps / 1e9,
         lib.comma_value(fpb),
         (bpp != bpp) && "-" || tostring(bpp), // handle NaN
         sleep));
   }
   lastloadreport = now();
   reportedfrees = frees;
   reportedfreebits = freebits;
   reportedfreebytes = freebytes;
   reportedbreaths = breaths;
}

function report_links () {
   print("link report:");
   var function loss_rate(drop, sent) {
      sent = tonumber(sent);
      if( ! sent || sent == 0 ) { return 0; }
      return tonumber(drop) * 100 / (tonumber(drop)+sent);
   }
   var names = {};
   for( name in pairs(link_table) ) { table.insert(names, name); }
   table.sort(names);
   for( i, name in ipairs(names) ) {
      l = link_table[name];
      var txpackets = counter.read(l.stats.txpackets);
      var txdrop = counter.read(l.stats.txdrop);
      print(("%20s sent on %s (loss rate: %d%%)")->format(
            lib.comma_value(txpackets), name, loss_rate(txdrop, txpackets)));
   }
}

function report_apps () {
   print ("apps report:");
   for( name, app in pairs(app_table) ) {
      if( app.dead ) {
         print(name, ("[dead: %s]")->format(app.dead.error));
      } else if( app.report ) {
         print(name);
         if( use_restart ) {
            with_restart(app, app.report);
         } else {
            // Restarts are disabled, still we want to not die on
            // errors during app reports, thus this workaround:
            var status, err = pcall(app.report, app);
            if( ! status ) {
               print("Warning: "..name.." threw an error during report: "..err);
            }
         }
      }
   }
}

function selftest () {
   print("selftest: app");
   var App = { push = true };
   function App::new () { return setmetatable({}, {__index = App}); }
   var c1 = config.new();
   config.app(c1, "app1", App);
   config.app(c1, "app2", App);
   config.link(c1, "app1.x -> app2.x");
   print("empty -> c1");
   configure(c1);
   assert(#breathe_pull_order == 0);
   assert(#breathe_push_order == 1);
   assert(app_table.app1 && app_table.app2);
   var orig_app1 = app_table.app1;
   var orig_app2 = app_table.app2;
   var orig_link = link_table['app1.x -> app2.x'];
   print("c1 -> c1");
   configure(c1);
   assert(app_table.app1 == orig_app1);
   assert(app_table.app2 == orig_app2);
   assert(tostring(orig_link) == tostring(link_table['app1.x -> app2.x']));
   var c2 = config.new();
   config.app(c2, "app1", App, "config");
   config.app(c2, "app2", App);
   config.link(c2, "app1.x -> app2.x");
   config.link(c2, "app2.x -> app1.x");
   print("c1 -> c2");
   configure(c2);
   assert(#breathe_pull_order == 0);
   assert(#breathe_push_order == 2);
   assert(app_table.app1 != orig_app1); // should be restarted
   assert(app_table.app2 == orig_app2); // should be the same
   // tostring() because == does not work on FFI structs?
   assert(tostring(orig_link) == tostring(link_table['app1.x -> app2.x']));
   print("c2 -> c1");
   configure(c1); // c2 -> c1
   assert(app_table.app1 != orig_app1); // should be restarted
   assert(app_table.app2 == orig_app2); // should be the same
   assert(#breathe_pull_order == 0);
   assert(#breathe_push_order == 1);
   print("c1 -> empty");
   configure(config.new());
   assert(#breathe_pull_order == 0);
   assert(#breathe_push_order == 0);
   // Test app arg validation
   var AppC = {
      config = {
         a = {required=true}, b = {default="foo"}
      }
   };
   var c3 = config.new();
   config.app(c3, "app_valid", AppC, {a="bar"});
   assert(! pcall(config.app, c3, "app_invalid", AppC));
   assert(! pcall(config.app, c3, "app_invalid", AppC, {b="bar"}));
   assert(! pcall(config.app, c3, "app_invalid", AppC, {a="bar", c="foo"}));
// Test app restarts on failure.
   use_restart = true;
   print("c_fail");
   var App1 = {zone="test"};
   function App1::new () { return setmetatable({}, {__index = App1}); }
   function App1::pull () { error("Pull error."); }
   function App1::push () { return true; }
   function App1::report () { return true; }
   var App2 = {zone="test"};
   function App2::new () { return setmetatable({}, {__index = App2}); }
   function App2::pull () { return true; }
   function App2::push () { error("Push error."); }
   function App2::report () { return true; }
   var App3 = {zone="test"};
   function App3::new () { return setmetatable({}, {__index = App3}); }
   function App3::pull () { return true; }
   function App3::push () { return true; }
   function App3::report () { error("Report error."); }
   var c_fail = config.new();
   config.app(c_fail, "app1", App1);
   config.app(c_fail, "app2", App2);
   config.app(c_fail, "app3", App3);
   config.link(c_fail, "app1.x -> app2.x");
   configure(c_fail);
   orig_app1 = app_table.app1;
   orig_app2 = app_table.app2;
   orig_app3 = app_table.app3;
   main({duration = 4, report = {showapps = true}});
   assert(app_table.app1 != orig_app1); // should be restarted
   assert(app_table.app2 != orig_app2); // should be restarted
   assert(app_table.app3 == orig_app3); // should be the same
   main({duration = 4, report = {showapps = true}});
   assert(app_table.app3 != orig_app3); // should be restarted

   // Check engine stop
   assert(! lib.equal(app_table, {}));
   engine.stop();
   assert(lib.equal(app_table, {}));

   // Check one can't unclaim a name if no name is claimed.
   assert(! pcall(unclaim_name));
   
   // Test claiming and enumerating app names
   var basename = "testapp";
   var progname = basename.."1";
   claim_name(progname);
   
   // Check if it can be enumerated.
   var progs = assert(enumerate_named_programs());
   assert(progs[progname]);

   // Ensure changing the name succeeds
   var newname = basename.."2";
   claim_name(newname);
   progs = assert(enumerate_named_programs());
   assert(progs[progname] == null);
   assert(progs[newname]);

   // Ensure unclaiming the name occurs
   unclaim_name();
   progs = enumerate_named_programs();
   assert(progs[newname] == null);
   assert(! program_name);
   
}

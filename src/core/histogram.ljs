// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// histogram.lua -- a histogram with logarithmic buckets

module(...,package.seeall);

var ffi = require("ffi");
var shm = require("core.shm");
var log, floor, max, min = math.log, math.floor, math.max, math.min;

type = shm.register('histogram', getfenv());

// Fill a 4096-byte page with buckets.  4096/8 = 512, minus the three
// header words means 509 buckets.  The first and last buckets are catch-alls.
var bucket_count = 509;
var histogram_t = ffi.typeof([=[struct {
   double minimum;
   double growth_factor_log;
   uint64_t total;
   uint64_t buckets[509];
}]=]);

var function compute_growth_factor_log(minimum, maximum) {
   assert(minimum > 0);
   assert(maximum > minimum);
   // The first and last buckets are the catch-alls; the ones in between
   // partition the range between the minimum and the maximum.
   return log(maximum / minimum) / (bucket_count - 2);
}

function new(minimum, maximum) {
   return histogram_t(minimum, compute_growth_factor_log(minimum, maximum));
}

function create(name, minimum, maximum) {
   var histogram = shm.create(name, histogram_t);
   histogram.minimum = minimum;
   histogram.growth_factor_log = compute_growth_factor_log(minimum, maximum);
   histogram->clear();
   return histogram;
}

function open(name) {
   return shm.open(name, histogram_t);
}

function add(histogram, measurement) {
   var bucket;
   if( measurement <= 0 ) {
      bucket = 0;
   } else {
      bucket = log(measurement / histogram.minimum);
      bucket = bucket / histogram.growth_factor_log;
      bucket = floor(bucket) + 1;
      bucket = max(0, bucket);
      bucket = min(bucket_count - 1, bucket);
   }
   histogram.total = histogram.total + 1;
   histogram.buckets[bucket] = histogram.buckets[bucket] + 1;
}

function iterate(histogram, prev) {
   var bucket = -1;
   var factor = math.exp(histogram.growth_factor_log);
   var minimum = histogram.minimum;
   var function next_bucket() {
      ++bucket    ;
      if( bucket >= bucket_count ) { return; }
      var lo, hi;
      if( bucket == 0 ) {
	 lo, hi = 0, minimum;
      } else {
	 lo = minimum * math.pow(factor, bucket - 1);
	 hi = minimum * math.pow(factor, bucket);
	 if( bucket == bucket_count - 1 ) { hi = 1/0; }
      }
      var count = histogram.buckets[bucket];
      if( prev ) { count = count - prev.buckets[bucket]; }
      return count, lo, hi;
   }
   return next_bucket;
}

function snapshot(a, b) {
   b = b || histogram_t();
   ffi.copy(b, a, ffi.sizeof(histogram_t));
   return b;
}

function clear(histogram) {
   histogram.total = 0;
   for( bucket = 0, bucket_count - 1 ) { histogram.buckets[bucket] = 0; }
}

function wrap_thunk(histogram, thunk, now) {
   return function() {
      var start = now();
      thunk();
      histogram->add(now() - start);
   };
}

ffi.metatype(histogram_t, {__index = {
   add = add,
   iterate = iterate,
   snapshot = snapshot,
   wrap_thunk = wrap_thunk,
   clear = clear
}});

function selftest () {
   print("selftest: histogram");

   var h = new(1e-6, 1e0);
   assert(ffi.sizeof(h) == 4096);

   h->add(1e-7);
   assert(h.buckets[0] == 1);
   h->add(1e-6 + 1e-9);
   assert(h.buckets[1] == 1);
   h->add(1.0 - 1e-9);
   assert(h.buckets[bucket_count - 2] == 1);
   h->add(1.5);
   assert(h.buckets[bucket_count - 1] == 1);

   assert(h.total == 4);
   assert(h->snapshot().total == 4);
   assert(h->snapshot().buckets[bucket_count - 1] == 1);

   var total = 0;
   var bucket = 0;
   for( count, lo, hi in h->iterate() ) {
      var function check(val, expected_count) {
	 if( val ) {
	    assert(lo <= val);
	    assert(val <= hi);
	 }
	 assert(count == expected_count);
      }
      if( bucket == 0 ) { check(1e-7, 1);
      } else if( bucket == 1 ) { check(1e-6 + 1e-9, 1);
      } else if( bucket == bucket_count - 2 ) { check(1 - 1e-9, 1);
      } else if( bucket == bucket_count - 1 ) { check(1.5, 1);
      } else { check(null, 0); }
      total +=   count;
      ++bucket    ;
   }
   assert(total == 4);
   assert(bucket == bucket_count);

   h->clear();
   assert(h.total == 0);
   assert(h.buckets[bucket_count - 1] == 0);

   print("selftest ok");
}


// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// ARP address resolution (RFC 826)

// Given a remote IPv4 address, try to find out its MAC address.
// If resolution succeeds:
// All packets coming through the 'south' interface (ie, via the network card)
// are silently forwarded (unless dropped by the network card).
// All packets coming through the 'north' interface (the lwaftr) will have
// their Ethernet headers rewritten.

module(..., package.seeall);

var bit      = require("bit");
var ffi      = require("ffi");
var packet   = require("core.packet");
var link     = require("core.link");
var lib      = require("core.lib");
var shm      = require("core.shm");
var datagram = require("lib.protocol.datagram");
var ethernet = require("lib.protocol.ethernet");
var ipv4     = require("lib.protocol.ipv4");
var alarms = require("lib.yang.alarms");
var S = require("syscall");

alarms.add_to_inventory ({
  [{alarm_type_id='arp-resolution'}] = {
    resource=tostring(S.getpid()),
    has_clear=true,
    description='Raise up if ARP app cannot resolve IP address',
  }
});
var resolve_alarm = alarms.declare_alarm ({
   [{resource=tostring(S.getpid()), alarm_type_id='arp-resolution'}] = {
      perceived_severity = 'critical',
      alarm_text = 'Make sure you can ARP resolve IP addresses on NIC',
   },
});

var C = ffi.C;
var receive, transmit = link.receive, link.transmit;
var htons, ntohs = lib.htons, lib.ntohs;

var ether_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint8_t  dhost[6];
   uint8_t  shost[6];
   uint16_t type;
} __attribute__((packed))
]=]);
var arp_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint16_t htype;      /* Hardware type */
   uint16_t ptype;      /* Protocol type */
   uint8_t  hlen;       /* Hardware address length */
   uint8_t  plen;       /* Protocol address length */
   uint16_t oper;       /* Operation */
   uint8_t  sha[6];     /* Sender hardware address */
   uint8_t  spa[4];     /* Sender protocol address */
   uint8_t  tha[6];     /* Target hardware address */
   uint8_t  tpa[4];     /* Target protocol address */
} __attribute__((packed))
]=]);
var ether_arp_header_t = ffi.typeof(
   'struct { $ ether; $ arp; } __attribute__((packed))',
   ether_header_t, arp_header_t);
var mac_t = ffi.typeof('uint8_t[6]');
var ether_header_ptr_t = ffi.typeof('$*', ether_header_t);
var ether_header_len = ffi.sizeof(ether_header_t);
var ether_arp_header_ptr_t = ffi.typeof('$*', ether_arp_header_t);
var ether_arp_header_len = ffi.sizeof(ether_arp_header_t);
var ether_type_arp = 0x0806;
var ether_type_ipv4 = 0x0800;
var arp_oper_request = 1;
var arp_oper_reply = 2;
var arp_htype_ethernet = 1;
var arp_ptype_ipv4 = 0x0800;
var arp_hlen_ethernet = 6;
var arp_plen_ipv4 = 4;

var mac_unknown = ethernet->pton("00:00:00:00:00:00");
var mac_broadcast = ethernet->pton("ff:ff:ff:ff:ff:ff");

var function make_arp_packet(src_mac, dst_mac, arp_oper,
                               arp_src_mac, arp_src_ipv4,
                               arp_dst_mac, arp_dst_ipv4) {
   var pkt = packet.allocate();
   pkt.length = ether_arp_header_len;

   var h = ffi.cast(ether_arp_header_ptr_t, pkt.data);
   h.ether.dhost = dst_mac;
   h.ether.shost = src_mac;
   h.ether.type = htons(ether_type_arp);
   h.arp.htype, h.arp.ptype = htons(arp_htype_ethernet), htons(arp_ptype_ipv4);
   h.arp.hlen, h.arp.plen = arp_hlen_ethernet, arp_plen_ipv4;
   h.arp.oper = htons(arp_oper);
   h.arp.sha = arp_src_mac;
   h.arp.spa = arp_src_ipv4;
   h.arp.tha = arp_dst_mac;
   h.arp.tpa = arp_dst_ipv4;

   return pkt;
}

var function make_arp_request(src_mac, src_ipv4, dst_ipv4) {
   return make_arp_packet(src_mac, mac_broadcast, arp_oper_request,
                          src_mac, src_ipv4, mac_unknown, dst_ipv4);
}

var function make_arp_reply(src_mac, src_ipv4, dst_mac, dst_ipv4) {
   return make_arp_packet(src_mac, dst_mac, arp_oper_reply,
                          src_mac, src_ipv4, dst_mac, dst_ipv4);
}

var function is_arp(p) {
   if( p.length < ether_arp_header_len ) { return false; }
   var h = ffi.cast(ether_arp_header_ptr_t, p.data);
   return ntohs(h.ether.type) == ether_type_arp;
}

var function ipv4_eq(a, b) { return C.memcmp(a, b, 4) == 0; }

var function copy_mac(src) {
   var dst = mac_t();
   ffi.copy(dst, src, 6);
   return dst;
}

var function random_locally_administered_unicast_mac_address() {
   var mac = lib.random_bytes(6);
   // Bit 0 is 0, indicating unicast.  Bit 1 is 1, indicating locally
   // administered.
   mac[0] = bit.lshift(mac[0], 2) + 2;
   return mac;
}

ARP = {};
var arp_config_params = {
   // Source MAC address will default to a random address.
   self_mac = { default=false },
   // Source IP is required though.
   self_ip  = { required=true },
   // The next-hop MAC address can be statically configured.
   next_mac = { default=false },
   // But if the next-hop MAC isn't configured, ARP will figure it out.
   next_ip  = { default=false },
   // Emits an alarm notification on arp-resolving and arp-resolved.
   alarm_notification = { default=false },
   // This ARP resolver might be part of a set of peer processes sharing
   // work via RSS.  In that case, a response will probably arrive only
   // at one process, not all of them!  In that case we can arrange for
   // the ARP app that receives the reply to write the resolved next-hop
   // to a shared file.  RSS peers can poll that file.
   shared_next_mac_key = {},
};

function ARP::new(conf) {
   var o = lib.parse(conf, arp_config_params);
   if( ! o.self_mac ) {
      o.self_mac = random_locally_administered_unicast_mac_address();
   }
   if( ! o.next_mac ) {
      assert(o.next_ip, 'ARP needs next-hop IPv4 address to learn next-hop MAC');
      o.arp_request_pkt = make_arp_request(o.self_mac, o.self_ip, o.next_ip);
      o.arp_request_interval = 3; // Send a new arp_request every three seconds.
   }
   return setmetatable(o, {__index=ARP});
}

function ARP::arp_resolving (ip) {
   print(("ARP: Resolving '%s'")->format(ipv4->ntop(this.next_ip)));
   if( this.alarm_notification ) {
      resolve_alarm->raise();
   }
}

function ARP::maybe_send_arp_request (output) {
   if( this.next_mac ) { return; }
   this.next_arp_request_time = this.next_arp_request_time || engine.now();
   if( this.next_arp_request_time <= engine.now() ) {
      this->arp_resolving(this.next_ip);
      this->send_arp_request(output);
      this.next_arp_request_time = engine.now() + this.arp_request_interval;
   }
}

function ARP::send_arp_request (output) {
   transmit(output, packet.clone(this.arp_request_pkt));
}

function ARP::arp_resolved (ip, mac, provenance) {
   print(("ARP: '%s' resolved (%s)")->format(ipv4->ntop(ip), ethernet->ntop(mac)));
   if( this.alarm_notification ) {
      resolve_alarm->clear();
   }
   this.next_mac = mac;
   if( this.shared_next_mac_key ) {
      if( provenance == 'remote' ) {
         // If we are getting this information from a packet and not
         // from the shared key, then update the shared key.
         var ok, shared = pcall(shm.create, this.shared_next_mac_key, mac_t);
         if( ! ok ) {
            ok, shared = pcall(shm.open, this.shared_next_mac_key, mac_t);
         }
         if( ! ok ) {
            print('warning: arp: failed to update shared next MAC key!');
         } else {
            ffi.copy(shared, mac, 6);
            shm.unmap(shared);
         }
      } else {
         assert(provenance == 'peer');
         // Pass.
      }
   }
}

function ARP::push() {
   var isouth, osouth = this.input.south, this.output.south;
   var inorth, onorth = this.input.north, this.output.north;

   this->maybe_send_arp_request(osouth);

   for( _ = 1, link.nreadable(isouth) ) {
      var p = receive(isouth);
      if( p.length < ether_header_len ) {
         // Packet too short.
         packet.free(p);
      } else if( is_arp(p) ) {
         var h = ffi.cast(ether_arp_header_ptr_t, p.data);
         if( (ntohs(h.arp.htype) != arp_htype_ethernet ||
             ntohs(h.arp.ptype) != arp_ptype_ipv4 ||
             h.arp.hlen != 6 || h.arp.plen != 4) ) {
            // Ignore invalid packet.
         } else if( ntohs(h.arp.oper) == arp_oper_request ) {
            if( this.self_ip && ipv4_eq(h.arp.tpa, this.self_ip) ) {
               transmit(osouth, make_arp_reply(this.self_mac, this.self_ip,
                                               h.arp.sha, h.arp.spa));
            }
         } else if( ntohs(h.arp.oper) == arp_oper_reply ) {
            if( this.next_ip && ipv4_eq(h.arp.spa, this.next_ip) ) {
               this->arp_resolved(this.next_ip, copy_mac(h.arp.sha), 'remote');
            }
         } else {
            // Incoming ARP that isn't handled; drop it silently.
         }
         packet.free(p);
      } else {
         transmit(onorth, p);
      }
   }

   // don't read southbound packets until the next hop's ethernet address is known
   if( this.next_mac ) {
     for( _ = 1, link.nreadable(inorth) ) {
        var p = receive(inorth);
        var e = ffi.cast(ether_header_ptr_t, p.data);
        e.dhost = this.next_mac;
        e.shost = this.self_mac;
        transmit(osouth, p);
     }
   } else if( this.shared_next_mac_key ) {
      var ok, mac = pcall(shm.open, this.shared_next_mac_key, mac_t);
      // Use the shared pointer directly, without copying; if it is ever
      // updated, we will get its new value.
      if( ok ) { this->arp_resolved(this.next_ip, mac, 'peer'); }
   }
}

function selftest() {
   print('selftest: arp');

   var arp = ARP->new({ self_ip = ipv4->pton('1.2.3.4'),
                         next_ip = ipv4->pton('5.6.7.8'),
                         shared_next_mac_key = "foo" });
   arp.input  = { south=link.new('south in'),  north=link.new('north in') };
   arp.output = { south=link.new('south out'), north=link.new('north out') };

   // After first push, ARP should have sent out request.
   arp->push();
   assert(link.nreadable(arp.output.south) == 1);
   assert(link.nreadable(arp.output.north) == 0);
   var req = link.receive(arp.output.south);
   assert(is_arp(req));
   // Send a response.
   var rep = make_arp_reply(ethernet->pton('11:22:33:44:55:66'),
                              ipv4->pton('5.6.7.8'),
                              ethernet->pton('22:22:22:22:22:22'),
                              ipv4->pton('2.2.2.2'));
   packet.free(req);
   assert(is_arp(rep));
   link.transmit(arp.input.south, rep);
   // Process response.
   arp->push();
   assert(link.nreadable(arp.output.south) == 0);
   assert(link.nreadable(arp.output.north) == 0);

   // Now push some payload.
   var payload = datagram->new();
   var udp = require("lib.protocol.udp");
   var IP_PROTO_UDP  = 17;
   var udp_h = udp->new({ src_port = 1234,
                           dst_port = 5678 });
   var ipv4_h = ipv4->new({ src = ipv4->pton('1.1.1.1'),
                             dst = ipv4->pton('2.2.2.2'),
                             protocol = IP_PROTO_UDP,
                             ttl = 64 });
   payload->push(udp_h);
   payload->push(ipv4_h);
   payload->push(ethernet->new({ src = ethernet->pton("00:00:00:00:00:00"),
                               dst = ethernet->pton("00:00:00:00:00:00"),
                               type = ether_type_ipv4 }));
   link.transmit(arp.input.north, payload->packet());
   arp->push();
   assert(link.nreadable(arp.output.south) == 1);
   assert(link.nreadable(arp.output.north) == 0);

   // The packet should have the destination ethernet address set.
   var routed = link.receive(arp.output.south);
   payload = datagram->new(routed, ethernet);
   var eth_h = payload->parse();
   assert(eth_h->src_eq(arp.self_mac));
   assert(eth_h->dst_eq(ethernet->pton('11:22:33:44:55:66')));
   assert(ipv4_h->eq(payload->parse()));
   assert(udp_h->eq(payload->parse()));
   packet.free(payload->packet());
   print('selftest ok');
}

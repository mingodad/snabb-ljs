// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// ICMPv4 echo request ("ping") responder (RFC 792)

module(..., package.seeall);

var bit        = require("bit");
var ffi        = require("ffi");
var lib        = require("core.lib");
var packet     = require("core.packet");
var counter    = require("core.counter");
var link       = require("core.link");
var ipsum      = require("lib.checksum").ipsum;

var ntohs, htons = lib.ntohs, lib.htons;
var ntohl, htonl = lib.ntohl, lib.htonl;

var function bit_mask(bits) { return bit.lshift(1, bits) - 1; }

var ether_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint8_t  dhost[6];
   uint8_t  shost[6];
   uint16_t type;
   uint8_t  payload[0];
} __attribute__((packed))
]=]);
var ipv4_header_t = ffi.typeof ([=[
struct {
   uint8_t version_and_ihl;               // version:4, ihl:4
   uint8_t dscp_and_ecn;                  // dscp:6, ecn:2
   uint16_t total_length;
   uint16_t id;
   uint16_t flags_and_fragment_offset;    // flags:3, fragment_offset:13
   uint8_t  ttl;
   uint8_t  protocol;
   uint16_t checksum;
   uint8_t  src_ip[4];
   uint8_t  dst_ip[4];
} __attribute__((packed))
]=]);
var icmp_header_t = ffi.typeof ([=[
struct {
   uint8_t type;
   uint8_t code;
   int16_t checksum;
} __attribute__((packed))
]=]);
var ether_header_len = ffi.sizeof(ether_header_t);
var ether_type_ipv4 = 0x0800;
var min_ipv4_header_len = ffi.sizeof(ipv4_header_t);
var ipv4_fragment_offset_bits = 13;
var ipv4_fragment_offset_mask = bit_mask(ipv4_fragment_offset_bits);
var ipv4_ihl_bits = 4;
var ipv4_ihl_mask = bit_mask(ipv4_ihl_bits);
var proto_icmp = 1;
var icmp_header_len = ffi.sizeof(icmp_header_t);
var icmpv4_echo_reply = 0;
var icmpv4_echo_request = 8;

var ether_ipv4_header_t = ffi.typeof(
   'struct { $ ether; $ ipv4; } __attribute__((packed))',
   ether_header_t, ipv4_header_t);
var ether_ipv4_header_ptr_t = ffi.typeof('$*', ether_ipv4_header_t);
var icmp_header_ptr_t = ffi.typeof('$*', icmp_header_t);

var uint32_ptr_t = ffi.typeof('uint32_t*');
var function ipv4_as_uint32(addr) {
   return ntohl(ffi.cast(uint32_ptr_t, addr)[0]);
}
var function ipv4_header_length(h) {
   return bit.band(h.version_and_ihl, ipv4_ihl_mask) * 4;
}

ICMPEcho = {};

function ICMPEcho::new(conf) {
   var addresses = {};
   if( conf.address ) {
      addresses[ipv4_as_uint32(conf.address)] = true;
   }
   if( conf.addresses ) {
      for( _, v in ipairs(conf.addresses) ) {
         addresses[ipv4_as_uint32(v)] = true;
      }
   }
   return setmetatable({addresses = addresses}, {__index = ICMPEcho});
}

function ICMPEcho::respond_to_echo_request(pkt) {
   // Pass on packets too small to be ICMPv4.
   var min_len = ether_header_len + min_ipv4_header_len + icmp_header_len;
   if( pkt.length < min_len ) { return false; }

   // Is it ICMPv4?
   var h = ffi.cast(ether_ipv4_header_ptr_t, pkt.data);
   if( ntohs(h.ether.type) != ether_type_ipv4 ) { return false; }
   if( h.ipv4.protocol != proto_icmp ) { return false; }

   // Find the ICMP header.  Is it an echo request?
   var ipv4_header_len = ipv4_header_length(h.ipv4);
   min_len = min_len - min_ipv4_header_len + ipv4_header_len;
   if( pkt.length < min_len ) { return false; }
   var icmp = ffi.cast(icmp_header_ptr_t, h.ether.payload + ipv4_header_len);
   if( icmp.type != icmpv4_echo_request ) { return false; }
   if( icmp.code != 0 ) { return false; }

   // Is it sent to us?
   if( ! this.addresses[ipv4_as_uint32(h.ipv4.dst_ip)] ) { return false; }

   // OK, all good.  Let's reply.
   var out = packet.clone(pkt);
   var out_h = ffi.cast(ether_ipv4_header_ptr_t, out.data);

   // Swap addresses.
   out_h.ether.dhost, out_h.ether.shost = h.ether.shost, h.ether.dhost;
   out_h.ipv4.src_ip, out_h.ipv4.dst_ip = h.ipv4.dst_ip, h.ipv4.src_ip;

   // Clear flags
   out_h.ipv4.flags_and_fragment_offset =
      bit.band(out_h.ipv4.flags_and_fragment_offset, ipv4_fragment_offset_mask);

   // Recalculate IPv4 checksum.
   out_h.ipv4.checksum = 0;
   out_h.ipv4.checksum = htons(
      ipsum(out.data + ether_header_len, ipv4_header_len, 0));

   // Change ICMP message type.
   icmp = ffi.cast(icmp_header_ptr_t, out_h.ether.payload + ipv4_header_len);
   icmp.type = icmpv4_echo_reply;

   // Recalculate ICMP checksum.
   icmp.checksum = 0;
   icmp.checksum = htons(
      ipsum(out.data + ether_header_len + ipv4_header_len,
            out.length - ether_header_len - ipv4_header_len, 0));

   link.transmit(this.output.south, out);

   return true;
}

function ICMPEcho::push() {
   var northbound_in, northbound_out = this.input.south, this.output.north;
   for( _ = 1, link.nreadable(northbound_in) ) {
      var pkt = link.receive(northbound_in);

      if( this->respond_to_echo_request(pkt) ) {
         packet.free(pkt);
      } else {
         link.transmit(northbound_out, pkt);
      }
   }

   var southbound_in, southbound_out = this.input.north, this.output.south;
   for( _ = 1, link.nreadable(southbound_in) ) {
      link.transmit(southbound_out, link.receive(southbound_in));
   }
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// IPv4 reassembly (RFC 791)
//
// This reassembly implementation will abort ongoing reassemblies if
// it sees overlapping fragments.  This follows the recommendation of
// RFC 5722, which although it is given specifically for IPv6, it
// applies just as well to IPv4.
//
// Reassembly failures are currently silent.  We could implement
// timeouts and then we could issue "timeout exceeded" ICMP errors if
// needed.

module(..., package.seeall);

var bit        = require("bit");
var ffi        = require("ffi");
var lib        = require("core.lib");
var packet     = require("core.packet");
var counter    = require("core.counter");
var link       = require("core.link");
var ipsum      = require("lib.checksum").ipsum;
var ctable     = require('lib.ctable');
var ctablew    = require('apps.lwaftr.ctable_wrapper');
var alarms     = require('lib.yang.alarms');
var S          = require('syscall');

var CounterAlarm = alarms.CounterAlarm;
var ntohs, htons = lib.ntohs, lib.htons;

var function bit_mask(bits) { return bit.lshift(1, bits) - 1; }

var ether_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint8_t  dhost[6];
   uint8_t  shost[6];
   uint16_t type;
} __attribute__((packed))
]=]);
var ipv4_header_t = ffi.typeof([=[
struct {
   uint8_t version_and_ihl;               // version:4, ihl:4
   uint8_t dscp_and_ecn;                  // dscp:6, ecn:2
   uint16_t total_length;
   uint16_t id;
   uint16_t flags_and_fragment_offset;    // flags:3, fragment_offset:13
   uint8_t  ttl;
   uint8_t  protocol;
   uint16_t checksum;
   uint8_t  src_ip[4];
   uint8_t  dst_ip[4];
} __attribute__((packed))
]=]);
var ether_header_len = ffi.sizeof(ether_header_t);
var ether_type_ipv4 = 0x0800;
var ipv4_fragment_offset_bits = 13;
var ipv4_fragment_offset_mask = bit_mask(ipv4_fragment_offset_bits);
var ipv4_flag_more_fragments = 0x1;
// If a packet has the "more fragments" flag set, or the fragment
// offset is non-zero, it is a fragment.
var ipv4_is_fragment_mask = bit.bor(
   ipv4_fragment_offset_mask,
   bit.lshift(ipv4_flag_more_fragments, ipv4_fragment_offset_bits));
var ipv4_ihl_bits = 4;
var ipv4_ihl_mask = bit_mask(ipv4_ihl_bits);

var ether_ipv4_header_t = ffi.typeof(
   'struct { $ ether; $ ipv4; } __attribute__((packed))',
   ether_header_t, ipv4_header_t);
var ether_ipv4_header_ptr_t = ffi.typeof('$*', ether_ipv4_header_t);

// Precondition: packet already has IPv4 ethertype.
var function ipv4_packet_has_valid_length(h, len) {
   if( len < ffi.sizeof(ether_ipv4_header_t) ) { return false; }
   var ihl = bit.band(h.ipv4.version_and_ihl, ipv4_ihl_mask);
   if( ihl < 5 ) { return false; }
   return ntohs(h.ipv4.total_length) == len - ether_header_len;
}

// IPv4 requires recalculating an embedded checksum.
var function fix_ipv4_checksum(h) {
   var ihl = bit.band(h.version_and_ihl, ipv4_ihl_mask);
   h.checksum = 0;
   h.checksum = htons(ipsum(ffi.cast('char*', h), ihl * 4, 0));
}

var function swap(array, i, j) {
   var tmp = array[j];
   array[j] = array[i];
   array[i] = tmp;
}

// This is an insertion sort, and only called on 2+ element arrays
var function sort_array(array, last_index) {
   for( i=0,last_index ) {
      var j = i;
      while( j > 0 && array[j-1] > array[j] ) {
         swap(array, j, j-1);
         --j    ;
      }
   }
}

var function verify_valid_offsets(reassembly) {
   if( reassembly.fragment_starts[0] != 0 ) {
      return false;
   }
   for( i=1,reassembly.fragment_count-1 ) {
      if( reassembly.fragment_starts[i] != reassembly.fragment_ends[i-1] ) {
         return false;
      }
   }
   return true;
}

Reassembler = {};
Reassembler.shm = {
   ["in-ipv4-frag-needs-reassembly"]      = {counter},
   ["in-ipv4-frag-reassembled"]           = {counter},
   ["in-ipv4-frag-reassembly-unneeded"]   = {counter},
   ["drop-ipv4-frag-invalid-reassembly"]  = {counter},
   ["drop-ipv4-frag-random-evicted"]      = {counter},
   ["memuse-ipv4-frag-reassembly-buffer"] = {counter}
};
var reassembler_config_params = {
   // Maximum number of in-progress reassemblies.  Each one uses about
   // 11 kB of memory.
   max_concurrent_reassemblies = { default=20000 },
   // Maximum number of fragments to reassemble.
   max_fragments_per_reassembly = { default=40 },
};


function Reassembler::new(conf) {
   var o = lib.parse(conf, reassembler_config_params);

   var max_occupy = 0.9;
   var params = {
      key_type = ffi.typeof([=[
         struct {
            uint8_t src_addr[4];
            uint8_t dst_addr[4];
            uint32_t fragment_id;
         } __attribute__((packed))]=]),
      value_type = ffi.typeof([=[
         struct {
            uint16_t fragment_starts[$];
            uint16_t fragment_ends[$];
            uint16_t fragment_count;
            uint16_t final_start;
            uint16_t reassembly_base;
            uint32_t running_length; // bytes copied so far
            struct packet packet;
         } __attribute((packed))]=],
         o.max_fragments_per_reassembly,
         o.max_fragments_per_reassembly),
      initial_size = math.ceil(o.max_concurrent_reassemblies / max_occupy),
      max_occupancy_rate = max_occupy,
   };
   o.ctab = ctablew.new(params);
   o.scratch_fragment_key = params.key_type();
   o.scratch_reassembly = params.value_type();
   o.next_counter_update = -1;

   alarms.add_to_inventory ({
      [{alarm_type_id='incoming-ipv4-fragments'}] = {
         resource=tostring(S.getpid()),
         has_clear=true,
         description='Incoming IPv4 fragments over N fragments/s',
      }
   });
   var incoming_fragments_alarm = alarms.declare_alarm ({
      [{resource=tostring(S.getpid()),alarm_type_id='incoming-ipv4-fragments'}] = {
         perceived_severity='warning',
         alarm_text='More than 10,000 IPv4 fragments per second',
      }
   });
   o.incoming_ipv4_fragments_alarm = CounterAlarm.new(incoming_fragments_alarm,
      1, 1e4, o, "in-ipv4-frag-needs-reassembly");

   return setmetatable(o, {__index=Reassembler});
}

function Reassembler::update_counters() {
   counter.set(this.shm["memuse-ipv4-frag-reassembly-buffer"],
               this.ctab->get_backing_size());
}

function Reassembler::record_eviction() {
   counter.add(this.shm["drop-ipv4-frag-random-evicted"]);
}

function Reassembler::reassembly_success(entry, pkt) {
   this.ctab->remove_ptr(entry);
   counter.add(this.shm["in-ipv4-frag-reassembled"]);
   link.transmit(this.output.output, pkt);
}

function Reassembler::reassembly_error(entry, icmp_error) {
   this.ctab->remove_ptr(entry);
   counter.add(this.shm["drop-ipv4-frag-invalid-reassembly"]);
   if( icmp_error ) { // This is an ICMP packet
      link.transmit(this.output.errors, icmp_error);
   }
}

function Reassembler::lookup_reassembly(h, pkt) {
   var key = this.scratch_fragment_key;
   key.src_addr, key.dst_addr = h.ipv4.src_ip, h.ipv4.dst_ip;
   key.fragment_id = ntohs(h.ipv4.id);

   var entry = this.ctab->lookup_ptr(key);
   if( entry ) { return entry; }

   var reassembly = this.scratch_reassembly;
   var ihl = bit.band(h.ipv4.version_and_ihl, ipv4_ihl_mask);
   var headers_len = ether_header_len + ihl * 4;

   ffi.fill(reassembly, ffi.sizeof(reassembly));
   reassembly.reassembly_base = headers_len;
   reassembly.running_length = headers_len;
   packet.append(reassembly.packet, pkt.data, headers_len);

   var did_evict = false;
   entry, did_evict = this.ctab->add(key, reassembly, false);
   if( did_evict ) { this->record_eviction(); }
   return entry;
}

function Reassembler::handle_fragment(h, fragment) {
   var ihl = bit.band(h.ipv4.version_and_ihl, ipv4_ihl_mask);
   var headers_len = ether_header_len + ihl * 4;
   var flags_and_fragment_offset = ntohs(h.ipv4.flags_and_fragment_offset);
   var flags = bit.rshift(
      flags_and_fragment_offset, ipv4_fragment_offset_bits);
   var fragment_offset = bit.band(
      flags_and_fragment_offset, ipv4_fragment_offset_mask);
   // Fragment offset is expressed in 8-octet units.
   var frag_start = fragment_offset * 8;
   var frag_size = ntohs(h.ipv4.total_length) - ihl * 4;

   var entry = this->lookup_reassembly(h, fragment);
   var reassembly = entry.value;

   var fcount = reassembly.fragment_count;
   if( fcount + 1 > this.max_fragments_per_reassembly ) {
      // Too many fragments to reassembly this packet; fail.
      return this->reassembly_error(entry);
   }
   reassembly.fragment_starts[fcount] = frag_start;
   reassembly.fragment_ends[fcount] = frag_start + frag_size;
   if( reassembly.fragment_starts[fcount] <
      reassembly.fragment_starts[fcount - 1] ) {
      sort_array(reassembly.fragment_starts, fcount);
      sort_array(reassembly.fragment_ends, fcount);
   }
   reassembly.fragment_count = fcount + 1;
   if( bit.band(flags, ipv4_flag_more_fragments) == 0 ) {
      if( reassembly.final_start != 0 ) {
         // There cannot be more than one final fragment.
         return this->reassembly_error(entry);
      } else {
         reassembly.final_start = frag_start;
      }
   }

   var skip_headers = reassembly.reassembly_base;
   var dst_offset = skip_headers + frag_start;
   if( dst_offset + frag_size > ffi.sizeof(reassembly.packet.data) ) {
      // Prevent a buffer overflow.  The relevant RFC allows hosts to
      // silently discard reassemblies above a certain rather small
      // size, smaller than this.
      return this->reassembly_error();
   }
   ffi.copy(reassembly.packet.data + dst_offset, fragment.data + skip_headers,
            frag_size);
   var max_data_offset = skip_headers + frag_start + frag_size;
   reassembly.packet.length = math.max(reassembly.packet.length,
                                       max_data_offset);
   reassembly.running_length = reassembly.running_length + frag_size;

   if( reassembly.final_start == 0 ) {
      // Still reassembling.
      return;
   } else if( reassembly.running_length != reassembly.packet.length ) {
      // Still reassembling.
      return;
   } else if( ! verify_valid_offsets(reassembly) ) {
      return this->reassembly_error(entry);
   } else {
      var out = packet.clone(reassembly.packet);
      var header = ffi.cast(ether_ipv4_header_ptr_t, out.data);
      header.ipv4.id, header.ipv4.flags_and_fragment_offset = 0, 0;
      header.ipv4.total_length = htons(out.length - ether_header_len);
      fix_ipv4_checksum(header.ipv4);
      return this->reassembly_success(entry, out);
   }
}

function Reassembler::push () {
   var input, output = this.input.input, this.output.output;

   this.incoming_ipv4_fragments_alarm->check();

   for( _ = 1, link.nreadable(input) ) {
      var pkt = link.receive(input);
      var h = ffi.cast(ether_ipv4_header_ptr_t, pkt.data);
      if( ntohs(h.ether.type) != ether_type_ipv4 ) {
         // Not IPv4; forward it on.  FIXME: should make a different
         // counter here.
         counter.add(this.shm["in-ipv4-frag-reassembly-unneeded"]);
         link.transmit(output, pkt);
      } else if( ! ipv4_packet_has_valid_length(h, pkt.length) ) {
         // IPv4 packet has invalid length; drop.  FIXME: Should add a
         // counter here.
         packet.free(pkt);
      } else if( bit.band(ntohs(h.ipv4.flags_and_fragment_offset),
                      ipv4_is_fragment_mask) == 0 ) {
         // Not fragmented; forward it on.
         counter.add(this.shm["in-ipv4-frag-reassembly-unneeded"]);
         link.transmit(output, pkt);
      } else {
         // A fragment; try to reassemble.
         counter.add(this.shm["in-ipv4-frag-needs-reassembly"]);
         this->handle_fragment(h, pkt);
         packet.free(pkt);
      }
   }

   if( this.next_counter_update < engine.now() ) {
      // Update counters every second, but add a bit of jitter to smooth
      // things out.
      this->update_counters();
      this.next_counter_update = engine.now() + math.random(0.9, 1.1);
   }
}

function selftest() {
   print("selftest: apps.ipv4.reassemble");

   var shm        = require("core.shm");
   var datagram   = require("lib.protocol.datagram");
   var ether      = require("lib.protocol.ethernet");
   var ipv4       = require("lib.protocol.ipv4");
   var Fragmenter = require("apps.ipv4.fragment").Fragmenter;

   var ethertype_ipv4 = 0x0800;

   var function random_ipv4() { return lib.random_bytes(4); }
   var function random_mac() { return lib.random_bytes(6); }

   // Returns a new packet containing an Ethernet frame with an IPv4
   // header followed by PAYLOAD_SIZE random bytes.
   var function make_test_packet(payload_size) {
      var pkt = packet.from_pointer(lib.random_bytes(payload_size),
                                      payload_size);
      var eth_h = ether->new({ src = random_mac(), dst = random_mac(),
                                type = ethertype_ipv4 });
      var ip_h  = ipv4->new({ src = random_ipv4(), dst = random_ipv4(),
                               protocol = 0xff, ttl = 64 });
      ip_h->total_length(ip_h->sizeof() + pkt.length);
      ip_h->checksum();

      var dgram = datagram->new(pkt);
      dgram->push(ip_h);
      dgram->push(eth_h);
      return dgram->packet();
   }

   var function fragment(pkt, mtu) {
      var fragment = Fragmenter->new({mtu=mtu});
      fragment.shm = shm.create_frame("apps/fragmenter", fragment.shm);
      fragment.input = { input = link.new('fragment input') };
      fragment.output = { output = link.new('fragment output') };
      link.transmit(fragment.input.input, packet.clone(pkt));
      fragment->push();
      var ret = {};
      while( ! link.empty(fragment.output.output) ) {
         table.insert(ret, link.receive(fragment.output.output));
      }
      shm.delete_frame(fragment.shm);
      link.free(fragment.input.input, 'fragment input');
      link.free(fragment.output.output, 'fragment output');
      return ret;
   }

   var function permute_indices(lo, hi) {
      if( lo == hi ) { return {{hi}}; }
      var ret = {};
      for( _, tail in ipairs(permute_indices(lo + 1, hi)) ) {
         for( pos = 1, #tail + 1 ) {
            var order = lib.deepcopy(tail);
            table.insert(order, pos, lo);
            table.insert(ret, order);
         }
      }
      return ret;
   }

   for( _, size in ipairs({100, 400, 1000, 1500, 2000}) ) {
      var pkt = make_test_packet(size);
      for( _, mtu in ipairs({512, 1000, 1500}) ) {
         var fragments = fragment(pkt, mtu);
         for( _, order in ipairs(permute_indices(1, #fragments)) ) {
            var reassembler = Reassembler->new ({
               max_concurrent_reassemblies = 100,
               max_fragments_per_reassembly = 20
            });
            reassembler.shm = shm.create_frame(
               "apps/reassembler", reassembler.shm);
            reassembler.input = { input = link.new('reassembly input') };
            reassembler.output = { output = link.new('reassembly output') };
            var last = table.remove(order);
            for( _, i in ipairs(order) ) {
               link.transmit(reassembler.input.input,
                             packet.clone(fragments[i]));
               reassembler->push();
               assert(link.empty(reassembler.output.output));
            }
            link.transmit(reassembler.input.input,
                          packet.clone(fragments[last]));
            reassembler->push();
            assert(link.nreadable(reassembler.output.output) == 1);
            var result = link.receive(reassembler.output.output);
            assert(pkt.length == result.length);
            for( i = ether->sizeof(), result.length - 1 ) {
               var expected, actual = pkt.data[i], result.data[i];
               assert(expected == actual,
                      "pkt["..i.."] expected "..expected..", got "..actual);
            }
            packet.free(result);
            link.free(reassembler.input.input, 'reassembly input');
            link.free(reassembler.output.output, 'reassembly output');
            shm.delete_frame(reassembler.shm);
         }
         for( _, p in ipairs(fragments) ) { packet.free(p); }
      }
      packet.free(pkt);
   }

   print("selftest: ok");
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var alarms = require("lib.yang.alarms");
var app = require("core.app");
var config = require("core.config");
var conntrack = require("apps.packet_filter.conntrack");
var counter = require("core.counter");
var lib = require("core.lib");
var link = require("core.link");
var packet = require("core.packet");
var C = require("ffi").C;
var S = require("syscall");

var pf = require("pf");        // pflua

var CounterAlarm = alarms.CounterAlarm;

PcapFilter = {};

// PcapFilter is an app that drops all packets that don't match a
// specified filter expression.
//
// Optionally, connections can be statefully tracked, so that if one
// packet for a TCP/UDP session is accepted then future packets
// matching this session are also accepted.
//
// conf:
//   filter      = string expression specifying which packets to accept
//                 syntax: http://www.tcpdump.org/manpages/pcap-filter.7.html
//   state_table = optional string name to use for stateful-tracking table
//   native      = optional boolean argument that enables dynasm compilation
function PcapFilter::new (conf) {
   assert(conf.filter, "PcapFilter conf.filter parameter missing");

   var o = {
      // XXX Investigate the latency impact of filter compilation.
      accept_fn = pf.compile_filter(conf.filter, { native = conf.native || false }),
      state_table = conf.state_table || false,
      shm = { rxerrors = {counter}, sessions_established = {counter} }
   };
   if( conf.state_table ) { conntrack.define(conf.state_table); }

   alarms.add_to_inventory ({
      [{alarm_type_id='filtered-packets', alarm_type_qualifier=conf.alarm_type_qualifier}] = {
         resource=tostring(S.getpid()),
         has_clear=true,
         description="Total number of filtered packets"
      }
   });
   var alarm_key = {
      resource=tostring(S.getpid()),
      alarm_type_id='filtered-packets',
      alarm_type_qualifier=conf.alarm_type_qualifier
   };
   var filtered_packets_alarm = alarms.declare_alarm ({
      [alarm_key] = {
         perceived_severity = 'warning',
         alarm_text = "More than 1,000,000 packets filtered per second",
      }
   });
   o.filtered_packets_alarm = CounterAlarm.new(filtered_packets_alarm,
      1, 1e6, o, 'rxerrors');
   return setmetatable(o, { __index = PcapFilter });
}

function PcapFilter::push () {
   var i = assert(this.input.input || this.input.rx, "input port not found");
   var o = assert(this.output.output || this.output.tx, "output port not found");

   this.filtered_packets_alarm->check();

   while( ! link.empty(i) ) {
      var p = link.receive(i);
      var spec = this.state_table && conntrack.spec(p.data);

      if( spec && spec->check(this.state_table) ) {
         link.transmit(o, p);
      } else if( this.accept_fn(p.data, p.length) ) {
         if( spec ) {
            spec->track(this.state_table);
            counter.add(this.shm.sessions_established);
         }
         link.transmit(o, p);
      } else {
         packet.free(p);
         counter.add(this.shm.rxerrors);
      }
   }
}

// Testing

var pcap = require("apps.pcap.pcap");
var basic_apps = require("apps.basic.basic_apps");

// This is a simple blind regression test to detect unexpected changes
// in filtering behavior.
//
// The PcapFilter app is glue. Instead of having major unit tests of
// its own it depends on separate testing of pflua and conntrack.
function selftest () {
   print("selftest: pcap_filter");
   selftest_run(false, 3.726, 0.0009);
   selftest_run(true,  7.453, 0.001);
   // test dynasm mode too
   selftest_run(false, 3.726, 0.0009, true);
   selftest_run(true,  7.453, 0.001, true);
   print("selftest: ok");
}

// Run a selftest in stateful or non-stateful mode and expect a
// specific rate of acceptance from the test trace file.
function selftest_run (stateful, expected, tolerance, native) {
   app.configure(config.new());
   conntrack.clear();
   var pcap_filter = require("apps.packet_filter.pcap_filter");
   var v6_rules =
      [=[
         (icmp6 and
          src net 3ffe:501:0:1001::2/128 and
          dst net 3ffe:507:0:1:200:86ff:fe05:8000/116)
         or
         (ip6 and udp and
          src net 3ffe:500::/28 and
          dst net 3ffe:0501:4819::/64 and
          src portrange 2397-2399 and
          dst port 53)
      ]=];

   var c = config.new();
   var state_table = stateful && "selftest";
   config.app(c, "source", pcap.PcapReader, "apps/packet_filter/samples/v6.pcap");
   config.app(c, "repeater", basic_apps.Repeater );
   config.app(c,"pcap_filter", pcap_filter.PcapFilter,
              {filter=v6_rules, state_table = state_table, native = native});
   config.app(c, "sink", basic_apps.Sink );

   config.link(c, "source.output -> repeater.input");
   config.link(c, "repeater.output -> pcap_filter.input");
   config.link(c, "pcap_filter.output -> sink.input");
   app.configure(c);

   print(("Run for 1 second (stateful = %s)...")->format(stateful));

   var deadline = lib.timeout(1.0);
   do { app.breathe(); } while(!( deadline()) );

   app.report({showlinks=true});
   var sent     = link.stats(app.app_table.pcap_filter.input.input).rxpackets;
   var accepted = link.stats(app.app_table.pcap_filter.output.output).txpackets;
   var acceptrate = accepted * 100 / sent;
   if( acceptrate >= expected && acceptrate <= expected+tolerance ) {
      print(("ok: accepted %.4f%% of inputs (within tolerance)")->format(acceptrate));
   } else {
      print(("error: accepted %.4f%% (expected %.3f%% +/- %.5f)")->format(
            acceptrate, expected, tolerance));
      error("selftest failed");
   }
}


// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// conntrack.lua -- Connection tracking for IPv4/IPv6 TCP/UDP sessions
//
// This module exposes the following API:
//
//  define(tablename)
//    define a named connection tracking table.
//
//  clear()
//    clears all tracking tables.
//
//  spec(buffer)
//    returns a spec object, encapsulating the connection
//    specifications if the packet in `buffer`.
//
//  spec:track(trackname)
//    tracks the connection in the named tracking table.
//    internally handles any ageing and table rotation.
//
//  spec:check(trackname)
//    checks if an equivalent (or revese) spec is registered
//    in the named tracking table.
//
//  NOTE: the spec() function doesn't allocate new spec objects,
//  the returned objects are to be used and for tracking and
//  checking but not stored, because they might be overwritten
//  by the next call to spec().


var ffi = require ('ffi');
var lib = require ('core.lib');

var const = ffi.new([=[struct {
   static const int ETHERTYPE_IPV4 = 0x0008;
   static const int ETHERTYPE_IPV6 = 0xDD86;

   static const int IP_UDP = 0x11;
   static const int IP_TCP = 6;

   static const int ETHERTYPE_OFFSET = 12;

   static const int IPV4_SOURCE_OFFSET = 26;
   static const int IPV4_PROTOCOL_OFFSET = 23;
   static const int IPV4_SOURCE_PORT_OFFSET = 34;

   static const int IPV6_SOURCE_OFFSET = 22;
   static const int IPV6_NEXT_HEADER_OFFSET = 20; // protocol
   static const int IPV6_SOURCE_PORT_OFFSET = 54;
}]=]);

//-
//- connection spec structures
//-

ffi.cdef ([=[
   typedef struct {
      uint32_t src_ip, dst_ip;
      uint16_t src_port, dst_port;
      uint8_t protocol;
   } __attribute__((packed)) conn_spec_ipv4;

   typedef struct {
      uint64_t a, b;
   } __attribute__((packed)) ipv6_addr;

   typedef struct {
      ipv6_addr src_ip, dst_ip;
      uint16_t src_port, dst_port;
      uint8_t protocol;
   } __attribute__((packed)) conn_spec_ipv6;
]=]);

//--

//-
//- connection tracking
//-
//- these are the only functions that have access
//- to the connection tracking tables.
//- each named table is a 4-tuple of the form:
//- ( current set, old set, time of last rotation, number of entries)
//-
var define, clear;     // part of the exported API
var track, check;      // internal functions, used by spec objects
{
   var MAX_AGE = 7200;             // two hours
   var MAX_CONNECTIONS = 1000;     // overflow threshold
   var conntracks = {};            // named tracking tables
   var time = engine.now;
   var function init(old) {   return {}, old, time(), 0; }
   var function put(t, key) { t[1][key] = true; }
   var function get(t, key) { return t[1][key] || t[2][key]; }
   var function swap(t) {     t[1], t[2], t[3], t[4] = init(t[1]); }

   function define (name) {
      if( ! name ) { return; }
      conntracks[name] = conntracks[name] || { init({}) };
   }

   function clear() {
      for( name, t in pairs(conntracks) ) {
         t[1], t[2], t[3], t[4] = init ({});
      }
      conntracks = {};
   }

   function track (name, key, revkey) {
      var t = conntracks[name];
      if( time() > t[3]+MAX_AGE || t[4] > MAX_CONNECTIONS ) {
         swap(t);
      }
      t[4] = t[4] + 1;
      put(t, key);
      put(t, revkey);
   }

   function check (name, key) {
      return get(conntracks[name], key);
   }
}

//---------------
//- generic connection spec functions, work for either IPv4 or IPv6
var genspec = {};

//- reverses a spec
//- o: (optional) if given, a spec to be filled with
//- the reverse of the original
//- if omitted, the spec is reversed in place.
function genspec::reverse(o) {
   if( o ) {
      o.protocol = this.protocol;
   } else {
      o = this;
   }
   o.src_ip, o.dst_ip = this.dst_ip, this.src_ip;
   o.src_port, o.dst_port = this.dst_port, this.src_port;
   return o;
}

//- returns a binary string, usable as a table key
function genspec::__tostring() {
   return ffi.string(this, ffi.sizeof(this));
}

//- checks if the spec is present in the named tracking table
function genspec::check(trackname) {
   return check(trackname, this->__tostring());
}


//--
//- IPv4 spec

var spec_v4 = ffi.typeof('conn_spec_ipv4');
var ipv4 = {
   __tostring  = genspec.__tostring,
   reverse = genspec.reverse,
   check = genspec.check
};
ipv4.__index = ipv4;


//- fills `self` with the specifications of
//- the packet in `b` (a byte buffer)
function ipv4::fill(b) {
   {
      var hdr_ips = ffi.cast('uint32_t*', b+const.IPV4_SOURCE_OFFSET);
      this.src_ip = hdr_ips[0];
      this.dst_ip = hdr_ips[1];
   }
   this.protocol = b[const.IPV4_PROTOCOL_OFFSET];
   if( this.protocol == const.IP_TCP || this.protocol == const.IP_UDP ) {
      var hdr_ports = ffi.cast('uint16_t*', b+const.IPV4_SOURCE_PORT_OFFSET);
      this.src_port = hdr_ports[0];
      this.dst_port = hdr_ports[1];
   } else {
      this.src_port, this.dst_port = 0, 0;
   }
   return this;
}

//- inserts `self` in the named tracking table.
//- it's iserted twice: directly and reversed
{
   var rev = null;      // to hold the reversed spec
   function ipv4::track(trackname) {
      rev = rev || spec_v4();
      return track(trackname, this->__tostring(), this->reverse(rev)->__tostring());
   }
}

spec_v4 = ffi.metatype(spec_v4, ipv4);


//-----
//- IPv6 spec

var spec_v6 = ffi.typeof('conn_spec_ipv6');
var ipv6 = {
   __tostring  = genspec.__tostring,
   reverse = genspec.reverse,
   check = genspec.check
};
ipv6.__index = ipv6;


//- fills `self` with the specifications of
//- the packet in `b` (a byte buffer)
function ipv6::fill(b) {
   {
      var hdr_ips = ffi.cast('ipv6_addr*', b+const.IPV6_SOURCE_OFFSET);
      this.src_ip = hdr_ips[0];
      this.dst_ip = hdr_ips[1];
   }
   this.protocol = b[const.IPV6_NEXT_HEADER_OFFSET];
   if( this.protocol == const.IP_TCP || this.protocol == const.IP_UDP ) {
      var hdr_ports = ffi.cast('uint16_t*', b+const.IPV6_SOURCE_PORT_OFFSET);
      this.src_port = hdr_ports[0];
      this.dst_port = hdr_ports[1];
   } else {
      this.src_port, this.dst_port = 0, 0;
   }
   return this;
}


//- inserts `self` in the named tracking table.
//- it's iserted twice: directly and reversed
{
   var rev = null;
   function ipv6::track(trackname) {
      rev = rev || spec_v6();
      return track(trackname, this->__tostring(), this->reverse(rev)->__tostring());
   }
}


spec_v6 = ffi.metatype(spec_v6, ipv6);

//----

var new_spec=null;
{
   var specv4 = spec_v4();
   var specv6 = spec_v6();
   new_spec = function (b) {
      if( ! b ) { return null; }
      var ethertype = ffi.cast('uint16_t*', b+const.ETHERTYPE_OFFSET)[0];
      if( ethertype == const.ETHERTYPE_IPV4 ) {
         return specv4->fill(b);
      }
      if( ethertype == const.ETHERTYPE_IPV6 ) {
         return specv6->fill(b);
      }
   };
}

return {
   define = define,
   spec = new_spec,
   clear = clear,
};


// Range maps -*- lua -*-
//
// A range map is a map from uint32 to value.  It divides the space of
// uint32 values into ranges, where every key in that range has the same
// value.  The expectation is that you build a range map once and then
// use it many times.  We also expect that the number of ranges ends up
// being fairly small and will always be found in cache.  For this
// reason, a lookup in the range map can use an optimized branchless
// binary search.

module(..., package.seeall);

var ffi = require("ffi");
var C = ffi.C;
var binary_search = require('lib.binary_search');

var UINT32_MAX = 0xFFFFFFFF;

RangeMapBuilder = {};
RangeMap = {};

var function make_entry_type(value_type) {
   return ffi.typeof([=[struct {
         uint32_t key;
         $ value;
      } __attribute__((packed))]=],
      value_type);
}

var function make_entries_type(entry_type) {
   return ffi.typeof('$[?]', entry_type);
}

var function make_equal_fn(type) {
   var size = ffi.sizeof(type);
   var cast = ffi.cast;
   if( tonumber(ffi.new(type)) ) {
      return function (a, b) {
         return a == b;
      };
   } else if( size == 2 ) {
      var uint16_ptr_t = ffi.typeof('uint16_t*');
      return function (a, b) {
         return cast(uint16_ptr_t, a)[0] == cast(uint16_ptr_t, b)[0];
      };
   } else if( size == 4 ) {
      var uint32_ptr_t = ffi.typeof('uint32_t*');
      return function (a, b) {
         return cast(uint32_ptr_t, a)[0] == cast(uint32_ptr_t, b)[0];
      };
   } else if( size == 8 ) {
      var uint64_ptr_t = ffi.typeof('uint64_t*');
      return function (a, b) {
         return cast(uint64_ptr_t, a)[0] == cast(uint64_ptr_t, b)[0];
      };
   } else {
      return function (a, b) {
         return C.memcmp(a, b, size) == 0;
      };
   }
}

function RangeMapBuilder.new(value_type) {
   var builder = {};
   builder.value_type = value_type;
   builder.entry_type = make_entry_type(builder.value_type);
   builder.type = make_entries_type(builder.entry_type);
   builder.equal_fn = make_equal_fn(builder.value_type);
   builder.entries = {};
   builder = setmetatable(builder, { __index = RangeMapBuilder });
   return builder;
}

function RangeMapBuilder::add_range(key_min, key_max, value) {
   assert(key_min <= key_max);
   var min, max = ffi.new(this.entry_type), ffi.new(this.entry_type);
   min.key, min.value = key_min, value;
   max.key, max.value = key_max, value;
   table.insert(this.entries, { min=min, max=max });
}

function RangeMapBuilder::add(key, value) {
   this->add_range(key, key, value);
}

function RangeMapBuilder::build(default_value) {
   assert(default_value);
   table.sort(this.entries, function(a,b) { return a.max.key < b.max.key; });

   // The optimized binary search routines in binary_search.dasl want to
   // search for the entry whose key is *greater* than or equal to the K
   // we are looking for.  Therefore we partition the range into
   // contiguous entries with the highest K having a value V, starting
   // with UINT32_MAX and working our way down.
   var ranges = {};
   if( #this.entries == 0 || this.entries[#this.entries].max.key < UINT32_MAX ) {
      table.insert(this.entries,
                   { min=this.entry_type(UINT32_MAX, default_value),
                     max=this.entry_type(UINT32_MAX, default_value) });
   }

   table.insert(ranges, this.entries[#this.entries].max);
   var range_end = this.entries[#this.entries].min;
   for( i=#this.entries-1,1,-1 ) {
      var entry = this.entries[i];
      if( entry.max.key >= range_end.key ) {
         error("Multiple range map entries for key: "..entry.max.key);
      } else if( entry.max.key + 1 != range_end.key ) {
         table.insert(ranges, this.entry_type(range_end.key - 1, default_value));
         range_end = this.entry_type(entry.max.key + 1, default_value);
      }
      if( ! this.equal_fn(entry.max.value, range_end.value) ) {
         table.insert(ranges, entry.max);
      }
      range_end = entry.min;
   }
   if( range_end.key > 0 ) {
      table.insert(ranges, this.entry_type(range_end.key - 1, default_value));
   }

   var range_count = #ranges;
   var packed_entries = this.type(range_count);
   for( i,entry in ipairs(ranges) ) {
      packed_entries[range_count-i] = entry;
   }

   var map = {
      value_type = this.value_type,
      entry_type = this.entry_type,
      type = this.type,
      entries = packed_entries,
      size = range_count
   };
   map.binary_search = binary_search.gen(map.size, map.entry_type);
   map = setmetatable(map, { __index = RangeMap });
   return map;
}

function RangeMap::lookup(k) {
   return this.binary_search(this.entries, k);
}

function RangeMap::iterate() {
   var entry = -1;
   var function next_entry() {
      ++entry    ;
      if( entry >= this.size ) { return; }
      var hi, val = this.entries[entry].key, this.entries[entry].value;
      var lo = 0;
      if( entry > 0 ) { lo = this.entries[entry - 1].key + 1; }
      return lo, hi, val;
   }
   return next_entry;
}

var range_map_header_t = ffi.typeof([=[
struct {
   uint32_t size;
   uint32_t entry_size;
}
]=]);

function RangeMap::save(stream) {
   var entry_size = ffi.sizeof(this.entry_type);
   stream->write_ptr(range_map_header_t(this.size, entry_size),
                    range_map_header_t);
   stream->write_array(this.entries, this.entry_type, this.size);
}

function load(stream, value_type) {
   var map = {};
   map.value_type = value_type;
   map.entry_type = make_entry_type(map.value_type);
   map.type = make_entries_type(map.entry_type);

   var header = stream->read_ptr(range_map_header_t);
   assert(header.entry_size == ffi.sizeof(map.entry_type));
   map.size = header.size;
   map.entries = stream->read_array(map.entry_type, map.size);
   map.binary_search = binary_search.gen(map.size, map.entry_type);
   return setmetatable(map, { __index = RangeMap });
}

function selftest() {
   var builder = RangeMapBuilder.new(ffi.typeof('uint8_t'));
   builder->add(0, 1);
   builder->add(1, 2);
   builder->add(100, 10);
   builder->add(101, 20);
   builder->add(200, 30);
   builder->add(300, 40);
   builder->add(301, 50);
   builder->add(302, 60);
   builder->add(350, 70);
   builder->add(351, 70);
   builder->add(370, 70);
   builder->add(400, 70);
   builder->add(401, 80);
   builder->add(UINT32_MAX-1, 99);
   builder->add(UINT32_MAX, 100);
   var map = builder->build(0);

   // The ranges that we expect this map to compile to.
   var ranges = {
      { 0, 1},
      { 1, 2},
      { 99, 0 },
      { 100, 10 },
      { 101, 20 },
      { 199, 0 },
      { 200, 30 },
      { 299, 0 },
      { 300, 40 },
      { 301, 50 },
      { 302, 60 },
      { 349, 0 },
      { 351, 70 },
      { 369, 0 },
      { 370, 70 },
      { 399, 0 },
      { 400, 70 },
      { 401, 80 },
      { UINT32_MAX-2, 0 },
      { UINT32_MAX-1, 99 },
      { UINT32_MAX, 100 },
   };

   assert(map.size == #ranges);
   for( i, v in ipairs(ranges) ) {
      var key, value = unpack(v);
      assert(map.entries[i-1].key == key);
      assert(map.entries[i-1].value == value);
   }

   {
      var i = 1;
      var expected_lo = 0;
      for( lo, hi, value in map->iterate() ) {
         var expected_hi, expected_value = unpack(ranges[i]);
         assert(lo == expected_lo);
         assert(hi == expected_hi);
         assert(value == expected_value);
         ++i    ;
         expected_lo = hi + 1;
      }
      assert(i == #ranges + 1);
      assert(expected_lo == UINT32_MAX + 1);
   }

   assert(map->lookup(0).value == 1);
   assert(map->lookup(1).value == 2);
   assert(map->lookup(2).value == 0);
   assert(map->lookup(99).value == 0);
   assert(map->lookup(100).value == 10);
   assert(map->lookup(101).value == 20);
   assert(map->lookup(102).value == 0);
   assert(map->lookup(199).value == 0);
   assert(map->lookup(200).value == 30);
   assert(map->lookup(201).value == 0);
   assert(map->lookup(300).value == 40);
   assert(map->lookup(301).value == 50);
   assert(map->lookup(302).value == 60);
   assert(map->lookup(303).value == 0);
   assert(map->lookup(349).value == 0);
   assert(map->lookup(350).value == 70);
   assert(map->lookup(351).value == 70);
   assert(map->lookup(352).value == 0);
   assert(map->lookup(369).value == 0);
   assert(map->lookup(370).value == 70);
   assert(map->lookup(371).value == 0);
   assert(map->lookup(399).value == 0);
   assert(map->lookup(400).value == 70);
   assert(map->lookup(401).value == 80);
   assert(map->lookup(402).value == 0);
   assert(map->lookup(UINT32_MAX-2).value == 0);
   assert(map->lookup(UINT32_MAX-1).value == 99);
   assert(map->lookup(UINT32_MAX).value == 100);

   var pmu = require('lib.pmu');
   var has_pmu_counters, err = pmu.is_available();
   if( ! has_pmu_counters ) {
      print('No PMU available: '..err);
   }

   if( has_pmu_counters ) { pmu.setup(); }

   var function measure(f, iterations) {
      var set;
      if( has_pmu_counters ) { set = pmu.new_counter_set(); }
      var start = C.get_time_ns();
      if( has_pmu_counters ) { pmu.switch_to(set); }
      var res = f(iterations);
      if( has_pmu_counters ) { pmu.switch_to(null); }
      var stop = C.get_time_ns();
      var ns = tonumber(stop-start);
      var cycles = null;
      if( has_pmu_counters ) { cycles = pmu.to_table(set).cycles; }
      return cycles, ns, res;
   }

   var function check_perf(f, iterations, max_cycles, max_ns, what) {
      require('jit').flush();
      io.write(tostring(what || f)..': ');
      io.flush();
      var cycles, ns, res = measure(f, iterations);
      if( cycles ) {
         cycles /= iterations;
         io.write(('%.2f cycles, ')->format(cycles));
      }
      ns /= iterations;
      io.write(('%.2f ns per iteration (result: %s)\n')->format(
            ns, tostring(res)));
      if( cycles && cycles > max_cycles ) {
         print('WARNING: perfmark failed: exceeded maximum cycles '..max_cycles);
      }
      if( ns > max_ns ) {
         print('WARNING: perfmark failed: exceeded maximum ns '..max_ns);
      }
      return res;
   }

   var function test_lookup(iterations) {
      var inc = math.floor(UINT32_MAX / iterations);
      var result = 0;
      for( i=0,UINT32_MAX,inc ) { result = map->lookup(i).value; }
      return result;
   }

   check_perf(test_lookup, 1e8, 35, 10, 'lookup');
}

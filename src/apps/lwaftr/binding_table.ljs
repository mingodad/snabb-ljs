// AFTR Binding Table
//
// A binding table is a collection of softwires (tunnels).  One endpoint
// of the softwire is in the AFTR and the other is in the B4.  A
// softwire provisions an IPv4 address (or a part of an IPv4 address) to
// a customer behind a B4.  The B4 arranges for all IPv4 traffic to be
// encapsulated in IPv6 and sent to the AFTR; the AFTR does the reverse.
// The binding table is how the AFTR knows which B4 is associated with
// an incoming packet.
//
// There are three parts of a binding table: the PSID info map, the
// border router (BR) address table, and the softwire map.
//
// The PSID info map facilitates IPv4 address sharing.  The lightweight
// 4-over-6 architecture supports sharing of IPv4 addresses by
// partitioning the space of TCP/UDP/ICMP ports into disjoint "port
// sets".  Each softwire associated with an IPv4 address corresponds to
// a different set of ports on that address.  The way that the ports are
// partitioned is specified in RFC 7597: each address has an associated
// set of parameters that specifies how to compute a "port set
// identifier" (PSID) from a given port.
//
//                      0                   1
//                      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
//                     +-----------+-----------+-------+
//       Ports in      |     A     |    PSID   |   j   |
//    the CE port set  |    > 0    |           |       |
//                     +-----------+-----------+-------+
//                     |  a bits   |  k bits   |m bits |
//
//             Figure 2: Structure of a Port-Restricted Port Field
//
//   Source: http://tools.ietf.org/html/rfc7597#section-5.1
//
// We find the specification's names to be a bit obtuse, so we refer to
// them using the following names:
//
//   a bits = reserved_ports_bit_count.
//   k bits = psid_length.
//   m bits = shift.
//
// When a packet comes in, we take the IPv4 address and look up the PSID
// parameters from the PSID info table.  We use those parameters to
// compute the PSID.  Together, the IPv4 address and PSID are used as a
// key into the softwire table, which determines if the packet
// corresponds to a known softwire, and if so the IPv6 address of the B4.
//
// A successful lookup into the softwire table will also indicate the
// IPv6 address of the AFTR itself.  As described in
// https://www.ietf.org/id/draft-farrer-softwire-br-multiendpoints-01.txt,
// an AFTR may have multiple configured addresses.
//
// Note that if reserved_ports_bit_count is nonzero, the lwAFTR must
// drop a packet whose port is less than 2^reserved_ports_bit_count.  In
// practice though we just return a PSID that is out of range (greater
// or equal to 2^psid_length), which will cause the softwire lookup to
// fail.  Likewise if we get a packet to an IPv4 address that's not
// under our control, we return 0 for the PSID, knowing that the
// subsequent softwire lookup will fail.
//
module(..., package.seeall);

var bit = require('bit');
var ffi = require("ffi");
var rangemap = require("apps.lwaftr.rangemap");
var ctable = require("lib.ctable");
var ipv6 = require("lib.protocol.ipv6");
var ipv4_ntop = require("lib.yang.util").ipv4_ntop;

var band, lshift, rshift = bit.band, bit.lshift, bit.rshift;

psid_map_key_t = ffi.typeof([=[
   struct { uint32_t addr; }
]=]);
psid_map_value_t = ffi.typeof([=[
   struct { uint16_t psid_length; uint16_t shift; }
]=]);

BTLookupQueue = {};

// BTLookupQueue needs a binding table to get softwires and PSID lookup.
function BTLookupQueue.new(binding_table) {
   var ret = {
      binding_table = assert(binding_table),
   };
   ret.streamer = binding_table.softwires->make_lookup_streamer(32);
   ret.packet_queue = ffi.new("struct packet * [32]");
   ret.length = 0;
   return setmetatable(ret, {__index=BTLookupQueue});
}

function BTLookupQueue::enqueue_lookup(pkt, ipv4, port) {
   var n = this.length;
   var streamer = this.streamer;
   streamer.entries[n].key.ipv4 = ipv4;
   streamer.entries[n].key.psid = port;
   this.packet_queue[n] = pkt;
   ++n    ;
   this.length = n;
   return n == 32;
}

function BTLookupQueue::process_queue() {
   if( this.length > 0 ) {
      var streamer = this.streamer;
      for( n = 0, this.length-1 ) {
         var ipv4 = streamer.entries[n].key.ipv4;
         var port = streamer.entries[n].key.psid;
         streamer.entries[n].key.psid = this.binding_table->lookup_psid(ipv4, port);
      }
      streamer->stream();
   }
   return this.length;
}

function BTLookupQueue::get_lookup(n) {
   if( n < this.length ) {
      var streamer = this.streamer;
      var pkt, b4_ipv6, br_ipv6;
      pkt = this.packet_queue[n];
      this.packet_queue[n] = null;
      if( ! streamer->is_empty(n) ) {
         b4_ipv6 = streamer.entries[n].value.b4_ipv6;
         br_ipv6 = streamer.entries[n].value.br_address;
      }
      return pkt, b4_ipv6, br_ipv6;
   }
}

function BTLookupQueue::reset_queue() {
   this.length = 0;
}

var BindingTable = {};
var lookup_key;
function BindingTable.new(psid_map, softwires) {
   var ret = {
      psid_map = assert(psid_map),
      softwires = assert(softwires),
   };
   lookup_key = ret.softwires.entry_type().key;
   return setmetatable(ret, {__index=BindingTable});
}

function BindingTable::add_softwire_entry(entry_blob) {
   var entry = this.softwires.entry_type();
   assert(ffi.sizeof(entry) == ffi.sizeof(entry_blob));
   ffi.copy(entry, entry_blob, ffi.sizeof(entry_blob));
   this.softwires->add(entry.key, entry.value);
}

function BindingTable::remove_softwire_entry(entry_key_blob) {
   var entry = this.softwires.entry_type();
   assert(ffi.sizeof(entry.key) == ffi.sizeof(entry_key_blob));
   ffi.copy(entry.key, entry_key_blob, ffi.sizeof(entry_key_blob));
   this.softwires->remove(entry.key);
}


function BindingTable::lookup(ipv4, port) {
   var psid = this->lookup_psid(ipv4, port);
   lookup_key.ipv4 = ipv4;
   lookup_key.psid = psid;
   var entry = this.softwires->lookup_ptr(lookup_key);
   if( entry ) { return entry.value; }
   return null;
}

function BindingTable::is_managed_ipv4_address(ipv4) {
   // The PSID info map covers only the addresses that are declared in
   // the binding table.  Other addresses are recorded as having
   // psid_length == shift == 0.
   var psid_info = this.psid_map->lookup(ipv4).value;
   return psid_info.psid_length + psid_info.shift > 0;
}

function BindingTable::lookup_psid(ipv4, port) {
   var psid_info = this.psid_map->lookup(ipv4).value;
   var psid_len, shift = psid_info.psid_length, psid_info.shift;
   var psid_mask = lshift(1, psid_len) - 1;
   var psid = band(rshift(port, shift), psid_mask);
   // Are there any restricted ports for this address?
   if( psid_len + shift < 16 ) {
      var reserved_ports_bit_count = 16 - psid_len - shift;
      var first_allocated_port = lshift(1, reserved_ports_bit_count);
      // The port is within the range of restricted ports.  Assign a
      // bogus PSID so that lookup will fail.
      if( port < first_allocated_port ) { psid = psid_mask + 1; }
   }
   return psid;
}

// Iterate over the set of IPv4 addresses managed by a binding
// table. Invoke like:
//
//   for ipv4_lo, ipv4_hi, psid_info in bt:iterate_psid_map() do ... end
//
// The IPv4 values are host-endianness uint32 values, and are an
// inclusive range to which the psid_info applies.  The psid_info is a
// psid_map_value_t pointer, which has psid_length and shift members.
function BindingTable::iterate_psid_map() {
   var f, state, lo = this.psid_map->iterate();
   var function next_entry() {
      var hi, value;
      do {
         lo, hi, value = f(state, lo);
         if( lo == null ) { return; }
      } while(!( value.psid_length > 0 || value.shift > 0) );
      return lo, hi, value;
   }
   return next_entry;
}

// Iterate over the softwires in a binding table.  Invoke like:
//
//   for entry in bt:iterate_softwires() do ... end
//
// Each entry is a pointer with two members, "key" and "value".  They
// key is a softwire_key_t and has "ipv4" and "psid" members.  The value
// is a softwire_value_t and has "br_address" and "b4_ipv6" members. Both
// members are a uint8_t[16].
function BindingTable::iterate_softwires() {
   return this.softwires->iterate();
}

function pack_psid_map_entry (softwire) {
   var port_set = assert(softwire.value.port_set);

   var psid_length = port_set.psid_length;
   var shift = 16 - psid_length - (port_set.reserved_ports_bit_count || 0);

   assert(psid_length + shift <= 16,
            ("psid_length %s + shift %s should not exceed 16")->
               format(psid_length, shift));

   var key = softwire.key.ipv4;
   var value = {psid_length = psid_length, shift = shift};

   return key, value;
}

function load (conf) {
   var psid_builder = rangemap.RangeMapBuilder.new(psid_map_value_t);

   // Lets create an intermediatory PSID map to verify if we've added
   // a PSID entry yet, if we have we need to verify that the values
   // are the same, if not we need to error.
   var inter_psid_map = {
      keys = {}
   };
   function inter_psid_map::exists (key, value) {
      var v = this.keys[key];
      if( ! v ) { return false; }
      if( v.psid_length != v.psid_length || v.shift != v.shift ) {
         error("Port set already added with different values: "..key);
      }
      return true;
   }
   function inter_psid_map::add (key, value) {
      this.keys[key] = value;
   }

   for( entry in conf.softwire->iterate() ) {
      // Check that the map either hasn't been added or that
      // it's the same value as one which has.
      var psid_key, psid_value = pack_psid_map_entry(entry);
      if( ! inter_psid_map->exists(psid_key, psid_value) ) {
         inter_psid_map->add(psid_key, psid_value);
         psid_builder->add(entry.key.ipv4, psid_value);
      }
   }

   var psid_map = psid_builder->build(psid_map_value_t(), true);
   return BindingTable.new(psid_map, conf.softwire);
}

function selftest() {
   print('selftest: binding_table');
   var function load_str(str) {
      var yang = require('lib.yang.yang');
      var data = require('lib.yang.data');
      var schema = yang.load_schema_by_name('snabb-softwire-v2');
      var grammar = data.config_grammar_from_schema(schema);
      var subgrammar = assert(grammar.members['softwire-config']);
      subgrammar = assert(subgrammar.members['binding-table']);
      var parse = data.data_parser_from_grammar(subgrammar);
      return load(parse(str, '[test suite]'));
   }
   var map = load_str([=[
      softwire { ipv4 178.79.150.233; psid 80; b4-ipv6 127:2:3:4:5:6:7:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.233; psid 2300; b4-ipv6 127:11:12:13:14:15:16:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.233; psid 2700; b4-ipv6 127:11:12:13:14:15:16:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.233; psid 4660; b4-ipv6 127:11:12:13:14:15:16:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.233; psid 7850; b4-ipv6 127:11:12:13:14:15:16:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.233; psid 22788; b4-ipv6 127:11:12:13:14:15:16:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.233; psid 54192; b4-ipv6 127:11:12:13:14:15:16:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.15; psid 0; b4-ipv6 127:22:33:44:55:66:77:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 4; }}
      softwire { ipv4 178.79.150.15; psid 1; b4-ipv6 127:22:33:44:55:66:77:128; br-address 8:9:a:b:c:d:e:f; port-set { psid-length 4; }}
      softwire { ipv4 178.79.150.2; psid 7850; b4-ipv6 127:24:35:46:57:68:79:128; br-address 1E:1:1:1:1:1:1:af; port-set { psid-length 16; }}
      softwire { ipv4 178.79.150.3; psid 4; b4-ipv6 127:14:25:36:47:58:69:128; br-address 1E:2:2:2:2:2:2:af; port-set { psid-length 6; }}
   ]=]);

   var ipv4_pton = require('lib.yang.util').ipv4_pton;
   var ipv6_protocol = require("lib.protocol.ipv6");
   var function lookup(ipv4, port) {
      return map->lookup(ipv4_pton(ipv4), port);
   }
   var function assert_lookup(ipv4, port, ipv6, br) {
      var val = assert(lookup(ipv4, port));
      assert(ffi.C.memcmp(ipv6_protocol->pton(ipv6), val.b4_ipv6, 16) == 0);
      assert(ffi.C.memcmp(ipv6_protocol->pton(br), val.br_address, 16) == 0);
   }
   assert_lookup('178.79.150.233', 80, '127:2:3:4:5:6:7:128', '8:9:a:b:c:d:e:f');
   assert(lookup('178.79.150.233', 79) == null);
   assert(lookup('178.79.150.233', 81) == null);
   assert_lookup('178.79.150.15', 80, '127:22:33:44:55:66:77:128', '8:9:a:b:c:d:e:f');
   assert_lookup('178.79.150.15', 4095, '127:22:33:44:55:66:77:128', '8:9:a:b:c:d:e:f');
   assert_lookup('178.79.150.15', 4096, '127:22:33:44:55:66:77:128', '8:9:a:b:c:d:e:f');
   assert_lookup('178.79.150.15', 8191, '127:22:33:44:55:66:77:128', '8:9:a:b:c:d:e:f');
   assert(lookup('178.79.150.15', 8192) == null);
   assert_lookup('178.79.150.2', 7850, '127:24:35:46:57:68:79:128', '1E:1:1:1:1:1:1:af');
   assert(lookup('178.79.150.3', 4095) == null);
   assert_lookup('178.79.150.3', 4096, '127:14:25:36:47:58:69:128', '1E:2:2:2:2:2:2:af');
   assert_lookup('178.79.150.3', 5119, '127:14:25:36:47:58:69:128', '1E:2:2:2:2:2:2:af');
   assert(lookup('178.79.150.3', 5120) == null);
   assert(lookup('178.79.150.4', 7850) == null);

   {
      var psid_map_iter = {
         { ipv4_pton('178.79.150.2'), { psid_length=16, shift=0 } },
         { ipv4_pton('178.79.150.3'), { psid_length=6, shift=10 } },
         { ipv4_pton('178.79.150.15'), { psid_length=4, shift=12 } },
         { ipv4_pton('178.79.150.233'), { psid_length=16, shift=0 } }
      };
      var i = 1;
      for( lo, hi, value in map->iterate_psid_map() ) {
         var ipv4, expected = unpack(psid_map_iter[i]);
         assert(lo == ipv4);
         assert(hi == ipv4);
         assert(value.psid_length == expected.psid_length);
         assert(value.shift == expected.shift);
         ++i    ;
      }
      assert(i == #psid_map_iter + 1);
   }

   print('ok');
}

module(..., package.seeall);

var packet = require("core.packet");
var bit = require("bit");
var ffi = require("ffi");
var lib = require("core.lib");

var C = ffi.C;
var receive, transmit = link.receive, link.transmit;
var full, empty = link.full, link.empty;
var cast = ffi.cast;
var htons, htonl = lib.htons, lib.htonl;
var ntohs, ntohl = htons, htonl;

var default_encap = { default = "dot1q" };
Tagger = {
   config = {
      encapsulation = default_encap,
      tag = { required = true }
   }
};
Untagger = {
   config = {
      encapsulation = default_encap,
      tag = { required = true }
   }
};
VlanMux = {
   config = {
      encapsulation = default_encap,
   }
};

var tpids = { dot1q = 0x8100, dot1ad = 0x88A8 };
var o_ethernet_ethertype = 12;
var uint32_ptr_t = ffi.typeof('uint32_t*');


// build a VLAN tag consisting of 2 bytes of TPID followed by the TCI
// field which in turns consists of PCP, DEI and VID (VLAN id). Both
// PCP and DEI is always 0.  Inputs are in host byte-order, output is
// in network byte order.
var function build_tag (vid, tpid) {
   return htonl(bit.bor(bit.lshift(tpid, 16), vid));
}

// pop a VLAN tag (4 byte of TPID and TCI) from a packet
function pop_tag (pkt) {
   var payload = pkt.data + o_ethernet_ethertype;
   var length = pkt.length;
   pkt.length = length - 4;
   C.memmove(payload, payload + 4, length - o_ethernet_ethertype - 4);
}

// push a VLAN tag onto a packet.  The tag is in network byte-order.
function push_tag (pkt, tag) {
   var payload = pkt.data + o_ethernet_ethertype;
   var length = pkt.length;
   pkt.length = length + 4;
   C.memmove(payload + 4, payload, length - o_ethernet_ethertype);
   cast(uint32_ptr_t, payload)[0] = tag;
}

// extract TCI (2 bytes) from packet, no check is performed to verify that the
// packet is carrying a VLAN tag, if it's an untagged frame these bytes will be
// Ethernet payload
function extract_tci(pkt) {
   return ntohs(cast("uint16_t*", pkt.data + o_ethernet_ethertype + 2)[0]);
}

// extract VLAN id from TCI
function tci_to_vid (tci) {
   return bit.band(tci, 0xFFF);
}

function new_aux (this, conf) {
   var encap = conf.encapsulation;
   if( (type(encap) == "string") ) {
      this.tpid = tpids[encap];
      assert(this.tpid, "Unsupported encapsulation type "..encap);
   } else {
      assert(type(encap) == "number");
      this.tpid = encap;
   }
   return this;
}

function check_tag (tag) {
   assert(tag >= 0 && tag < 4095, "VLAN tag "..tag.." out of range");
   return tag;
}

function Tagger::new (conf) {
   var o = setmetatable({}, {__index=Tagger});
   new_aux(o, conf);
   o.tag = build_tag(check_tag(conf.tag), o.tpid);
   return(o);
}

function Tagger::push () {
   var input, output = this.input.input, this.output.output;
   var tag = this.tag;
   for( _=1,link.nreadable(input) ) {
      var pkt = receive(input);
      push_tag(pkt, tag);
      transmit(output, pkt);
   }
}

function Untagger::new (conf) {
   var o = setmetatable({}, {__index=Untagger});
   new_aux(o, conf);
   o.tag = build_tag(check_tag(conf.tag), o.tpid);
   return(o);
}

function Untagger::push () {
   var input, output = this.input.input, this.output.output;
   var tag = this.tag;
   for( _=1,link.nreadable(input) ) {
      var pkt = receive(input);
      var payload = pkt.data + o_ethernet_ethertype;
      if( cast(uint32_ptr_t, payload)[0] != tag ) {
         // Incorrect VLAN tag; drop.
         packet.free(pkt);
      } else {
         pop_tag(pkt);
         transmit(output, pkt);
      }
   }
}

function VlanMux::new (conf) {
   var o = setmetatable({}, {__index=VlanMux});
   return new_aux(o, conf);
}

function VlanMux::link () {
   var from_vlans, to_vlans = {}, {};
   for( name, l in pairs(this.input) ) {
      if( string.match(name, "vlan%d+") ) {
         var vid = check_tag(tonumber(string.sub(name, 5)));
         to_vlans[vid] = this.output[name];
         table.insert(from_vlans, { link = l, vid = vid });
      } else if( name == "native" ) {
         to_vlans[0] = this.output.native;
      } else if( type(name) == "string" && name != "trunk" ) {
         error("invalid link name "..name);
      }
   }
   this.from_vlans = from_vlans;
   this.to_vlans = to_vlans;
}

function VlanMux::push () {
   var from, to = this.from_vlans, this.to_vlans;
   var tpid = this.tpid;
   var l_in = this.input.trunk;
   assert(l_in);
   while( ! empty(l_in) ) {
      var p = receive(l_in);
      var ethertype = cast("uint16_t*", p.data
                                + o_ethernet_ethertype)[0];
      if( ethertype == htons(tpid) ) {
         // dig out TCI field
         var tci = extract_tci(p);
         var vid = tci_to_vid(tci);
         pop_tag(p);
         this->transmit(to[vid], p);
      } else { // untagged, send to native output
         this->transmit(to[0], p);
      }
   }

   var l_out = this.output.trunk;
   var i = 1;
   while( from[i] ) {
      var xfrom = from[i];  //DADCONFUSE
      var xl_in = xfrom.link;  //DADCONFUSE
      while( ! empty(xl_in) ) {
         var p = receive(xl_in);
         push_tag(p, build_tag(xfrom.vid, tpid));
         this->transmit(l_out, p);
      }
      ++i    ;
   }

   l_in = this.input.native;
   if( l_in ) {
      while( ! empty(l_in) ) {
         this->transmit(l_out, receive(l_in));
      }
   }
}

// transmit packet out interface if given interface exists, otherwise drop
function VlanMux::transmit(o, pkt) {
   if( o == null ) {
      packet.free(pkt);
   } else {
      transmit(o, pkt);
   }
}

function test_tag_untag () {
   var pkt = packet.from_string(lib.hexundump([=[
      02:aa:aa:aa:aa:aa 02:99:99:99:99:99 08 00 45 00
      00 54 43 58 40 00 40 01 7c 5c c0 a8 0d 28 ac 14
      01 10 08 00 9c d4 07 c0 00 01 bc fa e3 57 00 00
      00 00 f3 44 01 00 00 00 00 00 10 11 12 13 14 15
      16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25
      26 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35
      36 37
   ]=], 82));
   var payload = pkt.data + o_ethernet_ethertype;
   var vid = 0;
   for( i=0,15 ) {
      for( j=0,255 ) {
         var tag = build_tag(vid, tpids.dot1q);
         push_tag(pkt, tag);
         assert(cast(uint32_ptr_t, payload)[0] == tag);
         ++vid    ;
      }
   }
   assert(vid == 4096);
   print("Sucessfully tagged/untagged all potential VLAN tags (0-4095)");
}

function selftest() {
   var app = require("core.app");
   var basic_apps = require("apps.basic.basic_apps");

   var c = config.new();
   config.app(c, "vlan_source", basic_apps.Source);
   config.app(c, "vlan_mux", VlanMux);
   config.app(c, "trunk_sink", basic_apps.Sink);
   config.app(c, "trunk_source", basic_apps.Source);
   config.app(c, "native_source", basic_apps.Source);
   config.app(c, "native_sink", basic_apps.Sink);

   config.link(c, "vlan_source.output -> vlan_mux.vlan1");
   config.link(c, "vlan_mux.trunk -> trunk_sink.input");
   config.link(c, "trunk_source.output -> vlan_mux.trunk");
   config.link(c, "vlan_mux.native -> native_sink.input");
   config.link(c, "native_source.output -> vlan_mux.native");
   app.configure(c);
   app.main({duration = 1});

   print("vlan sent: "
            ..link.stats(app.app_table.vlan_source.output.output).txpackets);
   print("native sent: "
            ..link.stats(app.app_table.native_source.output.output).txpackets);
   print("trunk received: "
            ..link.stats(app.app_table.trunk_sink.input.input).rxpackets);
   print("trunk sent: "
            ..link.stats(app.app_table.trunk_source.output.output).txpackets);
   print("native received: "
            ..link.stats(app.app_table.native_sink.input.input).rxpackets);
   test_tag_untag();
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

io.stdout->setvbuf('no');
io.stderr->setvbuf('no');

var lib = require("core.lib");
var udp = require("lib.protocol.udp");
var ipv6 = require("lib.protocol.ipv6");
var eth = require("lib.protocol.ethernet");
var dg = require("lib.protocol.datagram");
var vhost = require("apps.vhost.vhost_user");
var esp = require("apps.ipsec.esp");
var filter = require("apps.packet_filter.pcap_filter");
var ffi = require("ffi");
var C = require("ffi").C;

// this is supposed to be run from a selftest shell script
// which hopefully can figure out most arguments on its own.
if( ! (#main.parameters == 13 ) ) {
   print("need 13 arguments: srcmac dstmac srcip dstip srcport dstport spi txkey txsalt rxkey rxsalt seqno payload"); // XXX usage
   main.exit(1);
}

var args = {
   srcmac = main.parameters[1],
   dstmac = main.parameters[2],
   srcip = main.parameters[3],
   dstip = main.parameters[4],
   srcport = main.parameters[5],
   dstport = main.parameters[6],
   spi = main.parameters[7],
   txkey = main.parameters[8],
   txsalt = main.parameters[9],
   rxkey = main.parameters[10],
   rxsalt = main.parameters[11],
   seqno = main.parameters[12],
   payload = main.parameters[13],
};

var UDPing = {
   zone = "UDPing",
   config = {
      srcport = {default=args.srcport},
      dstport = {default=args.dstport},
      srcaddr = {default=args.srcip},
      dstaddr = {default=args.dstip},
      srclladdr = {default=args.srcmac},
      dstlladdr = {default=args.dstmac},
      payload = {default=args.payload}
   }
};

function UDPing::new (conf) {
   var o = {
      conf = conf,
      ping = lib.throttle(1),
      timeout = lib.timeout(120)
   };
   return setmetatable(o, {__index = UDPing});
}

function UDPing::deudpify (p) {
   var dgram = dg->new(p, eth);
   dgram->parse_n(3);
   return dgram;
}

function UDPing::udpify (p) {
   var dgram = dg->new(p);

   var udpcfg = {
      src_port = this.conf.srcport,
      dst_port = this.conf.dstport
   };
   var udpish = udp->new(udpcfg);

   var ipcfg = {
      src = ipv6->pton(this.conf.srcaddr),
      dst = ipv6->pton(this.conf.dstaddr),
      next_header = 17, // UDP
      hop_limit = 64,
   };
   var ipish = ipv6->new(ipcfg);

   var ethcfg = {
      src = eth->pton(this.conf.srclladdr),
      dst = eth->pton(this.conf.dstlladdr),
      type = 0x86dd // IPv6
   };
   var ethish = eth->new(ethcfg);

   var payload, length = dgram->payload();
   udpish->length(udpish->length() + length);
   udpish->checksum(payload, length, ipish);
   ipish->payload_length(udpish->length());

   dgram->push(udpish);
   dgram->push(ipish);
   dgram->push(ethish);

   return dgram->packet();
}

function UDPing::pull () {
   if( this.ping() ) {
      link.transmit(this.output.output,
                    this->udpify(packet.from_string(this.conf.payload)));
   }
}

function UDPing::push () {
   if( this.timeout() ) { error("No reply."); }

   while( ! link.empty(this.input.input) ) {
      var dgram = this->deudpify(link.receive(this.input.input));
      var recvstr = ffi.string(dgram->payload());
      print("< '" .. recvstr .. "'");
      assert(args.payload == recvstr,
             "wanted '"..(args.payload).."' got '"..recvstr.."'");
      packet.free(dgram->packet());
   }
}


var c = config.new();

config.app(c, "udping", UDPing);

var espconf = {
   spi = args.spi,
   transmit_key = args.txkey,
   transmit_salt =  args.txsalt,
   receive_key = args.rxkey,
   receive_salt =  args.rxsalt,
   receive_window = 32,
   resync_threshold = 8192,
   resync_attempts = 8,
   auditing = 1
};
config.app(c, "esp", esp.AES128gcm, espconf);

var vhostconf = {
   socket_path = 'esp.sock',
   is_server = false
};
config.app(c, "vhost", vhost.VhostUser, vhostconf);

var pcapconf = {
   filter = "ip6 and ip6 proto 50 " ..
      "and ether src "..args.dstmac.." " ..
      "and ether dst "..args.srcmac.." " ..
      "and ip6 src host "..args.dstip.." " ..
      "and ip6 dst host "..args.srcip
};
config.app(c, "filter", filter.PcapFilter, pcapconf);

config.link(c, "udping.output -> esp.decapsulated");
config.link(c, "esp.encapsulated -> vhost.rx");

config.link(c, "vhost.tx -> filter.input");
config.link(c, "filter.output -> esp.encapsulated");
config.link(c, "esp.decapsulated -> udping.input");

engine.configure(c);

var function received_pong () {
   return link.stats(engine.app_table.udping.input.input).rxpackets > 0;
}
engine.main({done=received_pong});



// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// Base class for an Ethernet bridge with split-horizon semantics.
//
// A bridge conists of any number of ports, each of which is a member
// of at most one split-horizon group.  If it is not a member of a
// split-horizon group, the port is also called a "free" port.
// Packets arriving on a free port may be forwarded to all other
// ports.  Packets arriving on a port that belongs to a split-horizon
// group are never forwarded to any port belonging to the same
// split-horizon group.
//
// The configuration is passed as a table of the following form
//
// config = { ports = { <free-port1>, <free-port2>, ... },
//            split_horizon_groups = {
//              <sh_group1> = { <shg1-port1>, <shg1-port2>, ...},
//              ...},
//            config = { <bridge-specific-config> } }
//
// Port names have to be unique by themselves, irrespective of whether
// they are free ports or belong to a split-horizon group.
//
// The "config" table contains configuration options specific to a
// derived class.  It is ignored by the base class.  A derived class
// can access the configuration via self._conf.config.  If config is
// not set, it is initialiezed to an empty table.
//
// To make processing in the fast path easier, each port and group is
// assigned a unique integer greater than zero to serve as a "handle".
// The group handle 0 is assigned to all free ports.
//
// The base constructor creates the following arrays as private
// instance variables for efficient access in the push() method (which
// must be provided by any derived class).
//
//  self._ports
//
//     Each port is assigned a table containing the following information
//
//         { name = <port-name>,
//           group = <group-handle>,
//           handle = <handle> }
//
//     The tables of all ports is stored in the self._ports table,
//     which can be indexed by both, the port name as well as the port
//     handle to access the information for a particular port.
//
//  self._dst_ports
//
//     This is an array which stores an array of egress port handles
//     for every ingress port handle.  According to the split-horizon
//     semantics, this includes all port handles except the ingress
//     handle and all handles that belong to the same group.
//
// The push() method of a derived class should iterate over all source
// ports and forward the incoming packets to the associated output
// ports, replicating the packets as necessary.  In the simplest case,
// the packets must be replicated to all destination ports (flooded)
// to make sure they reach any potential recipient.  A more
// sophisticated bridge can store the MAC source addresses on incoming
// ports to limit the scope of flooding.

module(..., package.seeall);

bridge = subClass(null);
bridge._name = "base bridge";
bridge.config = {
   ports = {required=true},
   split_horizon_groups = {},
   config = {default={}}
};

function bridge::new (conf) {
   assert(this != bridge, "Can't instantiate abstract class "..this->name());
   var o = bridge->superClass().new(this);
   o._conf = conf;

   // Create a list of forwarding ports for all ports connected to the
   // bridge, taking split horizon groups into account
   var ports, groups = {}, {};
   var function add_port(port, group) {
      assert(! ports[port],
             this->name()..": duplicate definition of port "..port);
      var group_handle = 0;
      if( group ) {
         var desc = groups[group];
         if( ! desc ) {
            desc = { name = group, ports = {} };
            groups[group] = desc;
            table.insert(groups, desc);
            desc.handle = #groups;
         }
         group_handle = desc.handle;
      }
      var desc = { name = port,
                     group = group_handle };
      ports[port] = desc;
      table.insert(ports, desc);
      desc.handle = #ports;
      if( group_handle != 0 ) {
         table.insert(groups[group_handle].ports, desc.handle);
      }
   }

   // Add free ports
   for( _, port in ipairs(conf.ports) ) {
      add_port(port);
   }

   // Add split horizon groups
   if( conf.split_horizon_groups ) {
      for( group, xports in pairs(conf.split_horizon_groups) ) {
         for( _, port in ipairs(xports) ) {
            add_port(port, group);
         }
      }
   }

   // Create list of egress ports for each ingress port, containing
   // all free ports as well as all ports from different split-horizon
   // groups
   var dst_ports = {};
   for( sport, sdesc in ipairs(ports) ) {
      dst_ports[sport] = {};
      for( dport, ddesc in ipairs(ports) ) {
         if( ! (sport == dport || (sdesc.group != 0 &&
                                    sdesc.group == ddesc.group)) ) {
            table.insert(dst_ports[sport], dport);
         }
      }
   }
   o._groups = groups;
   o._ports = ports;
   o._dst_ports = dst_ports;
   return o;
}

// API
//
// Add the ingress and egress links to the port descriptor tables,
// accessible via the keys l_in and l_out, respectively.  This helps
// to speed up packet forwarding by eliminating a lookup in the input
// and output tables.
function bridge::link () {
   assert(this.input && this.output);
   for( _, port in ipairs(this._ports) ) {
      port.l_in = this.input[port.name];
      port.l_out = this.output[port.name];
   }
}

// API
//
// Print the port configuration and forwarding tables of the bridge.
// This is primarily intended for debugging.
function bridge::info () {
   var ports, groups = this._ports, this._groups;
   var function nh (n, h) {
      return n.."("..h..")";
   }
   print("Free ports:");
   for( p, desc in ipairs(ports) ) {
      if( desc.group == 0 ) {
         print("\t"..nh(desc.name, p));
      }
   }
   print("Split-horizon groups:");
   for( g, desc in ipairs(groups) ) {
      print("\t"..nh(desc.name, g)..", members:");
      for( _, p in ipairs(desc.ports) ) {
         print("\t\t"..nh(ports[p].name, p));
      }
   }
   print("Forwarding tables:");
   for( p, dst in ipairs(this._dst_ports) ) {
      print("\t"..nh(ports[p].name, p));
      for( _, d in ipairs(dst) ) {
         print("\t\t"..nh(ports[d].name, d));
      }
   }
}

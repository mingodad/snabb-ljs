// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

// http://tools.ietf.org/html/draft-mkonstan-keyed-ipv6-tunnel-01

// TODO: generalize
var AF_INET6 = 10;

var ffi = require("ffi");
var C = ffi.C;
var bit = require("bit");

var app = require("core.app");
var link = require("core.link");
var lib = require("core.lib");
var packet = require("core.packet");
var config = require("core.config");
var counter = require("core.counter");

var macaddress = require("lib.macaddress");

var pcap = require("apps.pcap.pcap");
var basic_apps = require("apps.basic.basic_apps");

var header_struct_ctype = ffi.typeof([=[
struct {
   // ethernet
   char dmac[6];
   char smac[6];
   uint16_t ethertype;
   // ipv6
   uint32_t flow_id; // version, tc, flow_id
   int16_t payload_length;
   int8_t  next_header;
   uint8_t hop_limit;
   char src_ip[16];
   char dst_ip[16];
   // tunnel
   uint32_t session_id;
   char cookie[8];
} __attribute__((packed))
]=]);

var HEADER_SIZE = ffi.sizeof(header_struct_ctype);

var header_array_ctype = ffi.typeof("uint8_t[?]");
var next_header_ctype = ffi.typeof("uint8_t*");
var cookie_ctype = ffi.typeof("uint64_t[1]");
var pcookie_ctype = ffi.typeof("uint64_t*");
var address_ctype = ffi.typeof("uint64_t[2]");
var paddress_ctype = ffi.typeof("uint64_t*");
var plength_ctype = ffi.typeof("int16_t*");
var psession_id_ctype = ffi.typeof("uint32_t*");

var DST_MAC_OFFSET = ffi.offsetof(header_struct_ctype, 'dmac');
var SRC_IP_OFFSET = ffi.offsetof(header_struct_ctype, 'src_ip');
var DST_IP_OFFSET = ffi.offsetof(header_struct_ctype, 'dst_ip');
var COOKIE_OFFSET = ffi.offsetof(header_struct_ctype, 'cookie');
var ETHERTYPE_OFFSET = ffi.offsetof(header_struct_ctype, 'ethertype');
var LENGTH_OFFSET =
   ffi.offsetof(header_struct_ctype, 'payload_length');
var NEXT_HEADER_OFFSET =
   ffi.offsetof(header_struct_ctype, 'next_header');
var SESSION_ID_OFFSET =
   ffi.offsetof(header_struct_ctype, 'session_id');
var FLOW_ID_OFFSET = ffi.offsetof(header_struct_ctype, 'flow_id');
var HOP_LIMIT_OFFSET = ffi.offsetof(header_struct_ctype, 'hop_limit');

var SESSION_COOKIE_SIZE = 12; // 32 bit session and 64 bit cookie

// Next Header.
// Set to 0x73 to indicate that the next header is L2TPv3.
var L2TPV3_NEXT_HEADER = 0x73;

var header_template = header_array_ctype(HEADER_SIZE);

// fill header template with const values
var function prepare_header_template () {
   // all bytes are zeroed after allocation

   // IPv6
   header_template[ETHERTYPE_OFFSET] = 0x86;
   header_template[ETHERTYPE_OFFSET + 1] = 0xDD;

   // Ver. Set to 0x6 to indicate IPv6.
   // version is 4 first bits at this offset
   // no problem to set others 4 bits to zeros - it is already zeros
   header_template[FLOW_ID_OFFSET] = 0x60;

   header_template[HOP_LIMIT_OFFSET] = 64;
   header_template[NEXT_HEADER_OFFSET] = L2TPV3_NEXT_HEADER;

   // For cases where both tunnel endpoints support one-stage resolution
   // (IPv6 Address only), this specification recommends setting the
   // Session ID to all ones for easy identification in case of troubleshooting.
   // may be overridden by local_session options
   header_template[SESSION_ID_OFFSET] = 0xFF;
   header_template[SESSION_ID_OFFSET + 1] = 0xFF;
   header_template[SESSION_ID_OFFSET + 2] = 0xFF;
   header_template[SESSION_ID_OFFSET + 3] = 0xFF;
}

SimpleKeyedTunnel = {
   config = {
      // string, ipv6 address
      local_address = {required=true},
      remote_address = {required=true},
      // 8 bytes hex string
      local_cookie = {required=true},
      remote_cookie = {required=true},
      // unsigned number, must fit to uint32_t
      local_session = {},
      // string, MAC address (for testing)
      default_gateway_MAC = {},
      // unsigned integer <= 255
      hop_limit = {}
   },
   shm = { rxerrors              = {counter},
           length_errors         = {counter},
           protocol_errors       = {counter},
           cookie_errors         = {counter},
           remote_address_errors = {counter},
           local_address_errors  = {counter} }
};

function SimpleKeyedTunnel::new (conf) {
   assert(
         type(conf.local_cookie) == "string"
         && #conf.local_cookie <= 16,
         "local_cookie should be 8 bytes hex string"
      );
   assert(
         type(conf.remote_cookie) == "string"
         && #conf.remote_cookie <= 16,
         "remote_cookie should be 8 bytes hex string"
      );
   var header = header_array_ctype(HEADER_SIZE);
   ffi.copy(header, header_template, HEADER_SIZE);
   var local_cookie = lib.hexundump(conf.local_cookie, 8);
   ffi.copy(
         header + COOKIE_OFFSET,
         local_cookie,
         #local_cookie
      );

   // convert dest, sorce ipv6 addressed to network order binary
   var result =
      C.inet_pton(AF_INET6, conf.local_address, header + SRC_IP_OFFSET);
   assert(result == 1,"malformed IPv6 address: " .. conf.local_address);

   result =
      C.inet_pton(AF_INET6, conf.remote_address, header + DST_IP_OFFSET);
   assert(result == 1,"malformed IPv6 address: " .. conf.remote_address);

   // store casted pointers for fast matching
   var remote_address = ffi.cast(paddress_ctype, header + DST_IP_OFFSET);
   var local_address = ffi.cast(paddress_ctype, header + SRC_IP_OFFSET);

   var remote_cookie = ffi.cast(pcookie_ctype, lib.hexundump(conf.remote_cookie, 8));

   if( conf.local_session ) {
      var psession = ffi.cast(psession_id_ctype, header + SESSION_ID_OFFSET);
      psession[0] = lib.htonl(conf.local_session);
   }

   if( conf.default_gateway_MAC ) {
      var mac = assert(macaddress->new(conf.default_gateway_MAC));
      ffi.copy(header + DST_MAC_OFFSET, mac.bytes, 6);
   }

   if( conf.hop_limit ) {
      assert(type(conf.hop_limit) == 'number' &&
          conf.hop_limit <= 255, "invalid hop limit");
      header[HOP_LIMIT_OFFSET] = conf.hop_limit;
   }

   var o =
   {
      header = header,
      remote_address = remote_address,
      local_address = local_address,
      remote_cookie = remote_cookie[0]
   };

   return setmetatable(o, {__index = SimpleKeyedTunnel});
}

function SimpleKeyedTunnel::push() {
   // encapsulation path
   var l_in = this.input.decapsulated;
   var l_out = this.output.encapsulated;
   assert(l_in && l_out);

   while( ! link.empty(l_in) ) {
      var p = link.receive(l_in);
      p = packet.prepend(p, this.header, HEADER_SIZE);
      var plength = ffi.cast(plength_ctype, p.data + LENGTH_OFFSET);
      plength[0] = lib.htons(SESSION_COOKIE_SIZE + p.length - HEADER_SIZE);
      link.transmit(l_out, p);
   }

   // decapsulation path
   l_in = this.input.encapsulated;
   l_out = this.output.decapsulated;
   assert(l_in && l_out);
   while( ! link.empty(l_in) ) {
      var p = link.receive(l_in);
      // match next header, cookie, src/dst addresses
      var drop = true;
      do {
         if( p.length < HEADER_SIZE ) {
            counter.add(this.shm.length_errors);
            break;
         }
         var next_header = ffi.cast(next_header_ctype, p.data + NEXT_HEADER_OFFSET);
         if( next_header[0] != L2TPV3_NEXT_HEADER ) {
            counter.add(this.shm.protocol_errors);
            break;
         }

         var cookie = ffi.cast(pcookie_ctype, p.data + COOKIE_OFFSET);
         if( cookie[0] != this.remote_cookie ) {
            counter.add(this.shm.cookie_errors);
            break;
         }

         var remote_address = ffi.cast(paddress_ctype, p.data + SRC_IP_OFFSET);
         if( remote_address[0] != this.remote_address[0] ||
            remote_address[1] != this.remote_address[1]
         ) {
            counter.add(this.shm.remote_address_errors);
            break;
         }

         var local_address = ffi.cast(paddress_ctype, p.data + DST_IP_OFFSET);
         if( local_address[0] != this.local_address[0] ||
            local_address[1] != this.local_address[1]
         ) {
            counter.add(this.shm.local_address_errors);
            break;
         }

         drop = false;
      } while(!( true) );

      if( drop ) {
         counter.add(this.shm.rxerrors);
         // discard packet
         packet.free(p);
      } else {
         p = packet.shiftleft(p, HEADER_SIZE);
         link.transmit(l_out, p);
      }
   }
}

// prepare header template to be used by all apps
prepare_header_template();

function selftest () {
   print("Keyed IPv6 tunnel selftest");
   var ok = true;
   var Synth = require("apps.test.synth").Synth;
   var Match = require("apps.test.match").Match;
   var tunnel_config = {
      local_address = "00::2:1",
      remote_address = "00::2:1",
      local_cookie = "12345678",
      remote_cookie = "12345678",
      default_gateway_MAC = "a1:b2:c3:d4:e5:f6"
   }; // should be symmetric for local "loop-back" test

   var c = config.new();
   config.app(c, "tunnel", SimpleKeyedTunnel, tunnel_config);
   config.app(c, "match", Match);
   config.app(c, "comparator", Synth);
   config.app(c, "source", Synth);
   config.link(c, "source.output -> tunnel.decapsulated");
   config.link(c, "comparator.output -> match.comparator");
   config.link(c, "tunnel.encapsulated -> tunnel.encapsulated");
   config.link(c, "tunnel.decapsulated -> match.rx");
   app.configure(c);

   app.main({duration = 0.0001, report = {showapps=true,showlinks=true}});
   // Check results
   if( #engine.app_table.match->errors() != 0 ) {
      ok = false;
   }

   c = config.new();
   config.app(c, "source", basic_apps.Source);
   config.app(c, "tunnel", SimpleKeyedTunnel, tunnel_config);
   config.app(c, "sink", basic_apps.Sink);
   config.link(c, "source.output -> tunnel.decapsulated");
   config.link(c, "tunnel.encapsulated -> tunnel.encapsulated");
   config.link(c, "tunnel.decapsulated -> sink.input");
   app.configure(c);

   print("run simple one second benchmark ...");
   app.main({duration = 1});

   if( ! ok ) {
      print("selftest failed");
      os.exit(1);
   }
   print("selftest passed");

}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var lib      = require("core.lib");
var packet   = require("core.packet");
                 require("apps.solarflare.ef_vi_h");
var pci      = require("lib.hardware.pci");
var ethernet = require("lib.protocol.ethernet");

var ffi = require("ffi");
var C = ffi.C;

var RECEIVE_BUFFER_COUNT = 256;
var FLUSH_RECEIVE_QUEUE_THRESHOLD = 32;
var TX_BUFFER_COUNT = 256;

var ciul = ffi.load("ciul");

var ef_vi_version = ffi.string(ciul.ef_vi_version_str());
var required_ef_vi_version = "201502";

if( ef_vi_version != required_ef_vi_version ) {
   error(string.format("ef_vi library does not have the correct version identified, need %s, got %s",
                       required_ef_vi_version, ef_vi_version));
}

// common utility functions

ffi.cdef([=[
char *strerror(int errnum);
]=]);

var function try (rc, message) {
   if( rc < 0 ) {
      error(string.format("%s failed: %s", message,
                          ffi.string(C.strerror(ffi.errno()))));
   }
   return rc;
}

SolarFlareNic = {
   config = {
      pciaddr = {required=true},
      macaddr = {},
      vlan = {},
      ifname = {}
   },
   version = ef_vi_version
};
SolarFlareNic.__index = SolarFlareNic;

// The `driver' variable is used as a reference to the driver class in
// order to interchangably use NIC drivers.
driver = SolarFlareNic;

function SolarFlareNic::new (args) {
   if( ! args.ifname ) {
      var device_info = pci.device_info(args.pciaddr);
      assert(device_info.interface,
             string.format("interface for chosen pci device %s is not up",
                           args.pciaddr));
      args.ifname = device_info.interface;
   }

   if( args.macaddr ) {
      this.mac_address = ethernet->pton(args.macaddr);
   }

   if( args.vlan ) {
      this.vlan = args.vlan;
   }

   args.receives_enqueued = 0;
   var dev = setmetatable(args, { __index = SolarFlareNic });
   return dev->open();
}

function SolarFlareNic::enqueue_receive(id) {
   this.rxpackets[id] = packet.allocate();
   try(this.ef_vi_receive_init(this.ef_vi_p,
                               memory.virtual_to_physical(this.rxpackets[id].data),
                               id),
       "ef_vi_receive_init");
   this.receives_enqueued = this.receives_enqueued + 1;
}

function SolarFlareNic::flush_receives(id) {
   if( this.receives_enqueued > 0 ) {
      this.ef_vi_receive_push(this.ef_vi_p);
      this.receives_enqueued = 0;
   }
}

function SolarFlareNic::enqueue_transmit(p) {
   assert(this.tx_packets[this.tx_id] == null, "tx buffer overrun");
   this.tx_packets[this.tx_id] = p;
   try(ciul.ef_vi_transmit_init(this.ef_vi_p,
                                memory.virtual_to_physical(p.data),
                                p.length,
                                this.tx_id),
       "ef_vi_transmit_init");
   this.tx_id = (this.tx_id + 1) % TX_BUFFER_COUNT;
   this.tx_space = this.tx_space - 1;
}

function SolarFlareNic::open() {
   var try_ = try;
   var function try (rc, message) {
      return try_(rc, string.format("%s (if=%s)", message, this.ifname));
   }

   var handle_p = ffi.new("ef_driver_handle[1]");
   try(ciul.ef_driver_open(handle_p), "ef_driver_open");
   this.driver_handle = handle_p[0];
   this.pd_p = ffi.new("ef_pd[1]");

   if( ! this.vlan ) {
      this.vlan = C.EF_PD_VLAN_NONE;
   }

   try(ciul.ef_pd_alloc_with_vport(this.pd_p,
                                   this.driver_handle,
                                   this.ifname,
                                   C.EF_PD_DEFAULT + C.EF_PD_PHYS_MODE,
                                   this.vlan),
       "ef_pd_alloc_by_name");
   this.ef_vi_p = ffi.new("ef_vi[1]");
   try(ciul.ef_vi_alloc_from_pd(this.ef_vi_p,
                                this.driver_handle,
                                this.pd_p,
                                this.driver_handle,
                                -1,
                                -1,
                                -1,
                                null,
                                -1,
                                C.EF_VI_TX_PUSH_DISABLE),
       "ef_vi_alloc_from_pd");

   this.ef_vi_p[0].rx_buffer_len = C.PACKET_PAYLOAD_SIZE;

   var env_mac = os.getenv("SF_MAC");

   if( ! this.mac_address ) {
      if( env_mac ) {
         this.mac_address = ethernet->pton(env_mac);
      } else {
         this.mac_address = ffi.new("unsigned char[6]");
         try(ciul.ef_vi_get_mac(this.ef_vi_p,
                                this.driver_handle,
                                this.mac_address),
             "ef_vi_get_mac");
      }
   }

   this.mtu = try(ciul.ef_vi_mtu(this.ef_vi_p, this.driver_handle));
   filter_spec_p = ffi.new("ef_filter_spec[1]");
   ciul.ef_filter_spec_init(filter_spec_p, C.EF_FILTER_FLAG_NONE);
   try(ciul.ef_filter_spec_set_eth_local(filter_spec_p,
                                         C.EF_FILTER_VLAN_ID_ANY,
                                         this.mac_address),
       "ef_filter_spec_set_eth_local");

   try(ciul.ef_vi_filter_add(this.ef_vi_p,
                             this.driver_handle,
                             filter_spec_p,
                             null),
       "ef_vi_filter_add");

   filter_spec_p = ffi.new("ef_filter_spec[1]");
   ciul.ef_filter_spec_init(filter_spec_p, C.EF_FILTER_FLAG_NONE);
   try(ciul.ef_filter_spec_set_multicast_all(filter_spec_p),
       "ef_filter_spec_set_set_mulicast_all");

   try(ciul.ef_vi_filter_add(this.ef_vi_p,
                             this.driver_handle,
                             filter_spec_p,
                             null),
       "ef_vi_filter_add");

   this.memregs = {};

   // cache ops
   this.ef_vi_receive_init = this.ef_vi_p[0].ops.receive_init;
   this.ef_vi_receive_push = this.ef_vi_p[0].ops.receive_push;
   this.ef_vi_transmit_push = this.ef_vi_p[0].ops.transmit_push;

   // set up poll exchange structures
   this.poll_structure = ffi.new("struct device");
   this.poll_structure.vi = this.ef_vi_p;

   // register device with poller
   C.add_device(this.poll_structure, ciul.ef_vi_transmit_unbundle);

   // initialize statistics
   this.stats = {};

   // set up receive buffers
   this.rxpackets = ffi.new("struct packet *[?]", RECEIVE_BUFFER_COUNT + 1);
   for( id = 1, RECEIVE_BUFFER_COUNT ) {
      this.enqueue_receive(this, id);
   }
   this.flush_receives(this);

   // set up transmit variables
   this.tx_packets = ffi.new("struct packet *[?]", TX_BUFFER_COUNT + 1);
   ffi.fill(this.tx_packets, ffi.sizeof(this.tx_packets), 0);
   this.tx_id = 0;
   this.tx_space = TX_BUFFER_COUNT;

   // Done
   print(string.format("Opened SolarFlare interface %s (MAC address %02x:%02x:%02x:%02x:%02x:%02x, MTU %d)",
                       this.ifname,
                       this.mac_address[0],
                       this.mac_address[1],
                       this.mac_address[2],
                       this.mac_address[3],
                       this.mac_address[4],
                       this.mac_address[5],
                       this.mtu));

   return this;
}

function SolarFlareNic::stop() {
   C.drop_device(this.poll_structure);
   try(ciul.ef_vi_free(this.ef_vi_p, this.driver_handle),
       "ef_vi_free");
   try(ciul.ef_pd_free(this.pd_p, this.driver_handle),
       "ef_pd_free");
   try(ciul.ef_driver_close(this.driver_handle),
       "ef_driver_close");
}

var need_poll = 1;

var band = bit.band;

function SolarFlareNic::pull() {
   if( need_poll == 1 ) {
      C.poll_devices();
      need_poll = 0;
   }
   this.stats.pull = (this.stats.pull || 0) + 1;
   do {
      var n_ev = this.poll_structure.n_ev;
      var pull_npackets = engine.pull_npackets;
      if( n_ev > 0 ) {
         for( i = 0, n_ev - 1 ) {
            var event_type = this.poll_structure.events[i].generic.type;
            if( event_type == C.EF_EVENT_TYPE_RX && pull_npackets > 0 ) {
               --pull_npackets    ;
               var rxpacket = this.rxpackets[this.poll_structure.events[i].rx.rq_id];
               rxpacket.length = this.poll_structure.events[i].rx.len;
               this.stats.rx = (this.stats.rx || 0) + 1;
               link.transmit(this.output.tx, rxpacket);
               this.enqueue_receive(this, this.poll_structure.events[i].rx.rq_id);
            } else if( event_type == C.EF_EVENT_TYPE_RX && pull_npackets == 0 ) {
               this.stats.rxdrop = (this.stats.rxdrop || 0) + 1;
               this.enqueue_receive(this, this.poll_structure.events[i].rx.rq_id);
            } else if( event_type == C.EF_EVENT_TYPE_TX ) {
               var n_tx_done = this.poll_structure.unbundled_tx_request_ids[i].n_tx_done;
               this.stats.txpackets = (this.stats.txpackets || 0) + n_tx_done;
               for( j = 0, (n_tx_done - 1) ) {
                  var id = this.poll_structure.unbundled_tx_request_ids[i].tx_request_ids[j];
                  packet.free(this.tx_packets[id]);
                  this.tx_packets[id] = null;
               }
               this.tx_space = this.tx_space + n_tx_done;
            } else if( event_type == C.EF_EVENT_TYPE_TX_ERROR ) {
               this.stats.tx_error = (this.stats.tx_error || 0) + 1;
            } else {
               error("Unexpected event, type " .. event_type);
            }
         }
      }
      if( this.receives_enqueued >= FLUSH_RECEIVE_QUEUE_THRESHOLD ) {
         this.stats.rx_flushes = (this.stats.rx_flushes || 0) + 1;
         this.flush_receives(this);
      }
   } while(!( n_ev < C.EVENTS_PER_POLL) );
}

function SolarFlareNic::push() {
   need_poll = 1;
   this.stats.push = (this.stats.push || 0) + 1;
   var l = this.input.rx;
   var push = ! link.empty(l);
   while( ! link.empty(l) && this.tx_space >= 1 ) {
      this.enqueue_transmit(this, link.receive(l));
   }
   if( push ) {
      this.ef_vi_transmit_push(this.ef_vi_p);
   }
   if( link.empty(l) ) {
      this.stats.link_empty = (this.stats.link_empty || 0) + 1;
   }
   if( ! link.empty(l) && this.tx_space < 1 ) {
      this.stats.no_tx_space = (this.stats.no_tx_space || 0) + 1;
   }
}

function spairs(t, order) {
   // collect the keys
   var keys = {};
   for( k in pairs(t) ) { keys[#keys+1] = k; }

   // if order function given, sort by it by passing the table and keys a, b,
   // otherwise just sort the keys
   if( order ) {
      table.sort(keys, function(a,b) { return order(t, a, b); });
   } else {
      table.sort(keys);
   }

   // return the iterator function
   var i = 0;
   return function() {
      ++i    ;
      if( keys[i] ) {
         return keys[i], t[keys[i]];
      }
   };
}

function SolarFlareNic::report() {
   print("report on solarflare device", this.ifname);
   
   for( name,value in spairs(this.stats) ) {
      io.write(string.format('%s: %d ', name, value));
   }
   io.write("\n");
   this.stats = {};
}

assert(C.CI_PAGE_SIZE == 4096, "unexpected C.CI_PAGE_SIZE, needs to be 4096");
assert(ffi.sizeof("ef_event") == 16);

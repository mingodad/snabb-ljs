// Use of this source code is governed by the Apache 2.0 license; see COPYING.

module(...,package.seeall);

var ffi = require("ffi");
var C = ffi.C;

var lib = require("core.lib");
var app = require("core.app");
var link = require("core.link");
var intel10g = require("apps.intel.intel10g");
var memory = require("core.memory");
var register = require("lib.hardware.register");
var receive, empty = link.receive, link.empty;
var can_transmit, transmit;

LoadGen = {};

function LoadGen::new (pciaddress) {
   var o = { pciaddress = pciaddress,
               dev = intel10g.new_sf({pciaddr=pciaddress}) };
   o.dev->open();
   o.dev->wait_linkup();
   disable_tx_descriptor_writeback(o.dev);
   zero_descriptors(o.dev);
   can_transmit, transmit = o.dev.can_transmit, o.dev.transmit;
   return setmetatable(o, {__index = LoadGen});
}

function disable_tx_descriptor_writeback (dev) {
   // Disable writeback of transmit descriptors.
   // That way our transmit descriptors stay fresh and reusable.
   // Tell hardware write them to this other memory instead.
   var bytes = intel10g.ring_buffer_size() * ffi.sizeof(intel10g.rxdesc_t);
   var ptr, phy = memory.dma_alloc(bytes);
   dev.r.TDWBAL(phy % 2**32);
   dev.r.TDWBAH(phy / 2**32);
}

function zero_descriptors (dev) {
   // Clear unused descriptors
   var b = memory.dma_alloc(4096);
   for( i = 0, intel10g.ring_buffer_size()-1 ) {
      // Make each descriptors point to valid DMA memory but be 0 bytes long.
      dev.txdesc[i].address = memory.virtual_to_physical(b);
      dev.txdesc[i].options = bit.lshift(1, 24); // End of Packet flag
   }
}

function LoadGen::push () {
   if( this.input.input ) {
      while( ! link.empty(this.input.input) && can_transmit(this.dev) ) {
         { var p = receive(this.input.input);
            transmit(this.dev, p);
         }
      }
   }
}

function LoadGen::pull () {
   // Set TDT behind TDH to make all descriptors available for TX.
   var dev = this.dev;
   var tdh = dev.r.TDH();
   if( dev.tdt == 0 ) { return; }
   C.full_memory_barrier();
   if( tdh == 0 ) {
      dev.r.TDT(intel10g.ring_buffer_size());
   } else {
      dev.r.TDT(tdh - 1);
   }
}

function LoadGen::report () {
   print(this.pciaddress,
         "TXDGPC (TX packets)", lib.comma_value(tonumber(this.dev.s.TXDGPC())),
         "GOTCL (TX octets)", lib.comma_value(tonumber(this.dev.s.GOTCL())));
   print(this.pciaddress,
         "RXDGPC (RX packets)", lib.comma_value(tonumber(this.dev.s.RXDGPC())),
         "GORCL (RX octets)", lib.comma_value(tonumber(this.dev.s.GORCL())));
   this.dev.s.TXDGPC->reset();
   this.dev.s.GOTCL->reset();
   this.dev.s.RXDGPC->reset();
   this.dev.s.GORCL->reset();
}


// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// This app acts as a responder for neighbor solicitaions for a
// specific target address and as a relay for all other packets.  It
// has two ports, north and south.  The south port attaches to a port
// on which NS messages are expected.  Non-NS packets are sent on
// north.  All packets received on the north port are passed south.

module(..., package.seeall);
var ffi = require("ffi");
var app = require("core.app");
var link = require("core.link");
var packet = require("core.packet");
var datagram = require("lib.protocol.datagram");
var ethernet = require("lib.protocol.ethernet");
var ipv6 = require("lib.protocol.ipv6");
var icmp = require("lib.protocol.icmp.header");
var ns = require("lib.protocol.icmp.nd.ns");
var filter = require("lib.pcap.filter");

ns_responder = subClass(null);
ns_responder._name = "ipv6 neighbor solicitation responder";

function ns_responder::new(config) {
   var o = ns_responder->superClass().new(this);
   o._config = config;
   o._match_ns = function(ns) {
                    return(ns->target_eq(config.local_ip));
                 };
   var filter, errmsg = filter->new("icmp6 and ip6[40] = 135");
   assert(filter, errmsg && ffi.string(errmsg));
   o._filter = filter;
   o._dgram = datagram->new();
   packet.free(o._dgram->packet());
   return o;
}

var function process (this, p) {
   if( ! this._filter->match(p.data, p.length) ) {
      return false;
   }
   var dgram = this._dgram->new(p, ethernet);
   // Parse the ethernet, ipv6 amd icmp headers
   dgram->parse_n(3);
   var eth, ipv6, icmp = unpack(dgram->stack());
   var payload, length = dgram->payload();
   if( ! icmp->checksum_check(payload, length, ipv6) ) {
      print(this->name()..": bad icmp checksum");
      return null;
   }
   // Parse the neighbor solicitation and check if it contains our own
   // address as target
   var ns = dgram->parse_match(null, this._match_ns);
   if( ! ns ) {
      return null;
   }
   var option = ns->options(dgram->payload());
   if( ! (#option == 1 && option[1]->type() == 1) ) {
      // Invalid NS, ignore
      return null;
   }
   // Turn this message into a solicited neighbor
   // advertisement with target ll addr option

   // Ethernet
   eth->swap();
   eth->src(this._config.local_mac);

   // IPv6
   ipv6->dst(ipv6->src());
   ipv6->src(this._config.local_ip);

   // ICMP
   option[1]->type(2);
   option[1]->option()->addr(this._config.local_mac);
   icmp->type(136);
   // Undo/redo icmp and ns headers to get
   // payload and set solicited flag
   dgram->unparse(2);
   dgram->parse(); // icmp
   payload, length = dgram->payload();
   dgram->parse()->solicited(1);
   icmp->checksum(payload, length, ipv6);
   return true;
}

function ns_responder::push() {
   var l_in = this.input.north;
   var l_out = this.output.south;
   if( l_in && l_out ) {
      while( ! link.empty(l_in) ) {
         // Pass everything on north -> south
         link.transmit(l_out, link.receive(l_in));
      }
   }
   l_in = this.input.south;
   l_out = this.output.north;
   var l_reply = this.output.south;
   while( ! link.empty(l_in) ) {
      var p = link.receive(l_in);
      var status = process(this, p);
      if( status == null ) {
         // Discard
         packet.free(p);
      } else if( status == true ) {
         // Send NA back south
         link.transmit(l_reply, p);
      } else {
         // Send transit traffic up north
         link.transmit(l_out, p);
      }
   }
}

// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// ICMPv6 echo request ("ping") responder (RFC 4443)

module(..., package.seeall);

var bit        = require("bit");
var ffi        = require("ffi");
var lib        = require("core.lib");
var packet     = require("core.packet");
var counter    = require("core.counter");
var link       = require("core.link");
var ipsum      = require("lib.checksum").ipsum;

var ntohs, htons = lib.ntohs, lib.htons;
var htonl = lib.htonl;

var ether_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint8_t  dhost[6];
   uint8_t  shost[6];
   uint16_t type;
   uint8_t  payload[0];
} __attribute__((packed))
]=]);
var ipv6_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint32_t v_tc_fl;               // version:4, traffic class:8, flow label:20
   uint16_t payload_length;
   uint8_t  next_header;
   uint8_t  hop_limit;
   uint8_t  src_ip[16];
   uint8_t  dst_ip[16];
   uint8_t  payload[0];
} __attribute__((packed))
]=]);
var ipv6_pseudo_header_t = ffi.typeof([=[
struct {
   char src_ip[16];
   char dst_ip[16];
   uint32_t payload_length;
   uint32_t next_header;
} __attribute__((packed))
]=]);
var icmp_header_t = ffi.typeof ([=[
struct {
   uint8_t type;
   uint8_t code;
   int16_t checksum;
} __attribute__((packed))
]=]);
var ether_type_ipv6 = 0x86dd;
var proto_icmp = 58;
var icmp_header_len = ffi.sizeof(icmp_header_t);
var icmpv6_echo_request = 128;
var icmpv6_echo_reply = 129;

var ether_ipv6_header_t = ffi.typeof(
   'struct { $ ether; $ ipv6; } __attribute__((packed))',
   ether_header_t, ipv6_header_t);
var ether_ipv6_header_len = ffi.sizeof(ether_ipv6_header_t);
var ether_ipv6_header_ptr_t = ffi.typeof('$*', ether_ipv6_header_t);
var icmp_header_ptr_t = ffi.typeof('$*', icmp_header_t);

var function ipv6_equals(a, b) { return ffi.C.memcmp(a, b, 16) == 0; }

ICMPEcho = {};

function ICMPEcho::new(conf) {
   var addresses = {};
   if( conf.address ) {
      table.insert(addresses, conf.address);
   }
   if( conf.addresses ) {
      for( _, v in ipairs(conf.addresses) ) { table.insert(addresses, v); }
   }
   return setmetatable({addresses = addresses}, {__index = ICMPEcho});
}

function ICMPEcho::address_matches(dst) {
   for( _, addr in ipairs(this.addresses) ) {
      if( ipv6_equals(dst, addr) ) { return true; }
   }
   return false;
}

function ICMPEcho::respond_to_echo_request(pkt) {
   // Pass on packets too small to be ICMPv6.
   var min_len = ether_ipv6_header_len + icmp_header_len;
   if( pkt.length < min_len ) { return false; }

   // Is it ICMPv6?
   var h = ffi.cast(ether_ipv6_header_ptr_t, pkt.data);
   if( ntohs(h.ether.type) != ether_type_ipv6 ) { return false; }
   if( h.ipv6.next_header != proto_icmp ) { return false; }

   // Find the ICMP header.  Is it an echo request?
   var icmp = ffi.cast(icmp_header_ptr_t, h.ipv6.payload);
   if( icmp.type != icmpv6_echo_request ) { return false; }
   if( icmp.code != 0 ) { return false; }

   // Is it sent to us?
   if( ! this->address_matches(h.ipv6.dst_ip) ) { return false; }

   // OK, all good.  Let's reply.
   var out = packet.clone(pkt);
   var out_h = ffi.cast(ether_ipv6_header_ptr_t, out.data);

   // Swap addresses.
   out_h.ether.dhost, out_h.ether.shost = h.ether.shost, h.ether.dhost;
   out_h.ipv6.src_ip, out_h.ipv6.dst_ip = h.ipv6.dst_ip, h.ipv6.src_ip;

   // Change ICMP message type.
   icmp = ffi.cast(icmp_header_ptr_t, out_h.ipv6.payload);
   icmp.type = icmpv6_echo_reply;

   // Recalculate ICMP checksum.
   var pseudoheader = ipv6_pseudo_header_t(
      out_h.ipv6.src_ip, out_h.ipv6.dst_ip,
      htonl(ntohs(out_h.ipv6.payload_length)),
      htonl(out_h.ipv6.next_header));
   icmp.checksum = 0;
   icmp.checksum = htons(
      ipsum(out_h.ipv6.payload, out.length - ether_ipv6_header_len,
            bit.bnot(ipsum(ffi.cast('char*', pseudoheader),
                           ffi.sizeof(ipv6_pseudo_header_t),
                           0))));

   link.transmit(this.output.south, out);

   return true;
}

function ICMPEcho::push() {
   var northbound_in, northbound_out = this.input.south, this.output.north;
   for( _ = 1, link.nreadable(northbound_in) ) {
      var pkt = link.receive(northbound_in);

      if( this->respond_to_echo_request(pkt) ) {
         packet.free(pkt);
      } else {
         link.transmit(northbound_out, pkt);
      }
   }

   var southbound_in, southbound_out = this.input.north, this.output.south;
   for( _ = 1, link.nreadable(southbound_in) ) {
      link.transmit(southbound_out, link.receive(southbound_in));
   }
}

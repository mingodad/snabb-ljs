// Use of this source code is governed by the Apache 2.0 license; see COPYING.

// IPv6 reassembly (RFC 2460 ยง4.5)
//
// This reassembly implementation will abort ongoing reassemblies if
// it sees overlapping fragments, following the recommendation of
// RFC 5722.
//
// Reassembly failures are currently silent.  We could implement
// timeouts and then we could issue "timeout exceeded" ICMP errors if 60
// seconds go by without success; we'd need to have received the first
// fragment though.  Additionally we should emit "parameter problem"
// code 0 ICMP errors for non-terminal fragments whose sizes aren't a
// multiple of 8 bytes, or for reassembled packets that are too big.

module(..., package.seeall);

var bit        = require("bit");
var ffi        = require("ffi");
var lib        = require("core.lib");
var packet     = require("core.packet");
var counter    = require("core.counter");
var link       = require("core.link");
var ipsum      = require("lib.checksum").ipsum;
var ctable     = require('lib.ctable');
var ctablew    = require('apps.lwaftr.ctable_wrapper');
var alarms     = require('lib.yang.alarms');
var S          = require('syscall');

var CounterAlarm = alarms.CounterAlarm;
var ntohs, htons = lib.ntohs, lib.htons;
var ntohl = lib.ntohl;

var function bit_mask(bits) { return bit.lshift(1, bits) - 1; }

var ether_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint8_t  dhost[6];
   uint8_t  shost[6];
   uint16_t type;
} __attribute__((packed))
]=]);
var ipv6_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint32_t v_tc_fl;               // version:4, traffic class:8, flow label:20
   uint16_t payload_length;
   uint8_t  next_header;
   uint8_t  hop_limit;
   uint8_t  src_ip[16];
   uint8_t  dst_ip[16];
   uint8_t  payload[0];
} __attribute__((packed))
]=]);
var fragment_header_t = ffi.typeof ([=[
/* All values in network byte order.  */
struct {
   uint8_t next_header;
   uint8_t reserved;
   uint16_t fragment_offset_and_flags;    // fragment_offset:13, flags:3
   uint32_t id;
   uint8_t payload[0];
} __attribute__((packed))
]=]);
var ether_type_ipv6 = 0x86dd;
// The fragment offset is in units of 2^3=8 bytes, and it's also shifted
// by that many bits, so we can read its value in bytes just by masking
// off the flags bits.
var fragment_offset_mask = bit_mask(16) - bit_mask(3);
var fragment_flag_more_fragments = 0x1;
// If a packet has the "more fragments" flag set, or the fragment
// offset is non-zero, it is a fragment.
var fragment_proto = 44;

var ether_ipv6_header_t = ffi.typeof(
   'struct { $ ether; $ ipv6; uint8_t payload[0]; } __attribute__((packed))',
   ether_header_t, ipv6_header_t);
var ether_ipv6_header_len = ffi.sizeof(ether_ipv6_header_t);
var ether_ipv6_header_ptr_t = ffi.typeof('$*', ether_ipv6_header_t);

var fragment_header_len = ffi.sizeof(fragment_header_t);
var fragment_header_ptr_t = ffi.typeof('$*', fragment_header_t);

// Precondition: packet already has IPv6 ethertype.
var function ipv6_packet_has_valid_length(h, len) {
   if( len < ether_ipv6_header_len ) { return false; }
   return ntohs(h.ipv6.payload_length) == len - ether_ipv6_header_len;
}

var function swap(array, i, j) {
   var tmp = array[j];
   array[j] = array[i];
   array[i] = tmp;
}

// This is an insertion sort, and only called on 2+ element arrays
var function sort_array(array, last_index) {
   for( i=0,last_index ) {
      var j = i;
      while( j > 0 && array[j-1] > array[j] ) {
         swap(array, j, j-1);
         --j    ;
      }
   }
}

var function verify_valid_offsets(reassembly) {
   if( reassembly.fragment_starts[0] != 0 ) {
      return false;
   }
   for( i=1,reassembly.fragment_count-1 ) {
      if( reassembly.fragment_starts[i] != reassembly.fragment_ends[i-1] ) {
         return false;
      }
   }
   return true;
}

Reassembler = {};
Reassembler.shm = {
   ["in-ipv6-frag-needs-reassembly"]      = {counter},
   ["in-ipv6-frag-reassembled"]           = {counter},
   ["in-ipv6-frag-reassembly-unneeded"]   = {counter},
   ["drop-ipv6-frag-invalid-reassembly"]  = {counter},
   ["drop-ipv6-frag-random-evicted"]      = {counter},
   ["memuse-ipv6-frag-reassembly-buffer"] = {counter}
};
var reassembler_config_params = {
   // Maximum number of in-progress reassemblies.  Each one uses about
   // 11 kB of memory.
   max_concurrent_reassemblies = { default=20000 },
   // Maximum number of fragments to reassemble.
   max_fragments_per_reassembly = { default=40 },
};

function Reassembler::new(conf) {
   var o = lib.parse(conf, reassembler_config_params);

   var max_occupy = 0.9;
   var params = {
      key_type = ffi.typeof([=[
         struct {
            uint8_t src_addr[16];
            uint8_t dst_addr[16];
            uint32_t fragment_id;
         } __attribute__((packed))]=]),
      value_type = ffi.typeof([=[
         struct {
            uint16_t fragment_starts[$];
            uint16_t fragment_ends[$];
            uint16_t fragment_count;
            uint16_t final_start;
            uint16_t reassembly_base;
            uint32_t running_length; // bytes copied so far
            struct packet packet;
         } __attribute((packed))]=],
         o.max_fragments_per_reassembly,
         o.max_fragments_per_reassembly),
      initial_size = math.ceil(o.max_concurrent_reassemblies / max_occupy),
      max_occupancy_rate = max_occupy,
   };
   o.ctab = ctablew.new(params);
   o.scratch_fragment_key = params.key_type();
   o.scratch_reassembly = params.value_type();
   o.next_counter_update = -1;

   alarms.add_to_inventory ({
      [{alarm_type_id='incoming-ipv6-fragments'}] = {
         resource=tostring(S.getpid()),
         has_clear=true,
         description='Incoming IPv6 fragments over N fragments/s',
      }
   });
   var incoming_fragments_alarm = alarms.declare_alarm ({
      [{resource=tostring(S.getpid()),alarm_type_id='incoming-ipv6-fragments'}] = {
         perceived_severity='warning',
         alarm_text='More than 10,000 IPv6 fragments per second',
      }
   });
   o.incoming_ipv6_fragments_alarm = CounterAlarm.new(incoming_fragments_alarm,
      1, 1e4, o, "in-ipv6-frag-needs-reassembly");

   return setmetatable(o, {__index=Reassembler});
}

function Reassembler::update_counters() {
   counter.set(this.shm["memuse-ipv6-frag-reassembly-buffer"],
               this.ctab->get_backing_size());
}

function Reassembler::record_eviction() {
   counter.add(this.shm["drop-ipv6-frag-random-evicted"]);
}

function Reassembler::reassembly_success(entry, pkt) {
   this.ctab->remove_ptr(entry);
   counter.add(this.shm["in-ipv6-frag-reassembled"]);
   link.transmit(this.output.output, pkt);
}

function Reassembler::reassembly_error(entry, icmp_error) {
   this.ctab->remove_ptr(entry);
   counter.add(this.shm["drop-ipv6-frag-invalid-reassembly"]);
   if( icmp_error ) { // This is an ICMP packet
      link.transmit(this.output.errors, icmp_error);
   }
}

function Reassembler::lookup_reassembly(src_ip, dst_ip, fragment_id) {
   var key = this.scratch_fragment_key;
   key.src_addr, key.dst_addr, key.fragment_id = src_ip, dst_ip, fragment_id;

   var entry = this.ctab->lookup_ptr(key);
   if( entry ) { return entry; }

   var reassembly = this.scratch_reassembly;
   ffi.fill(reassembly, ffi.sizeof(reassembly));
   reassembly.reassembly_base = ether_ipv6_header_len;
   reassembly.running_length = ether_ipv6_header_len;
   // Fragment 0 will fill in the contents of this data.
   packet.length = ether_ipv6_header_len;

   var did_evict = false;
   entry, did_evict = this.ctab->add(key, reassembly, false);
   if( did_evict ) { this->record_eviction(); }
   return entry;
}

function Reassembler::handle_fragment(h) {
   var fragment = ffi.cast(fragment_header_ptr_t, h.ipv6.payload);
   var fragment_offset_and_flags = ntohs(fragment.fragment_offset_and_flags);
   var frag_start = bit.band(fragment_offset_and_flags, fragment_offset_mask);
   var frag_size = ntohs(h.ipv6.payload_length) - fragment_header_len;

   var entry = this->lookup_reassembly(h.ipv6.src_ip, h.ipv6.dst_ip,
                                        ntohl(fragment.id));
   var reassembly = entry.value;

   // Header comes from unfragmentable part of packet 0.
   if( frag_start == 0 ) {
      var header = ffi.cast(ether_ipv6_header_ptr_t, reassembly.packet.data);
      ffi.copy(header, h, ether_ipv6_header_len);
      header.ipv6.next_header = fragment.next_header;
      // Payload length will be overwritten at end.
   }
   var fcount = reassembly.fragment_count;
   if( fcount + 1 > this.max_fragments_per_reassembly ) {
      // Too many fragments to reassembly this packet; fail.
      return this->reassembly_error(entry);
   }
   reassembly.fragment_starts[fcount] = frag_start;
   reassembly.fragment_ends[fcount] = frag_start + frag_size;
   if( reassembly.fragment_starts[fcount] <
      reassembly.fragment_starts[fcount - 1] ) {
      sort_array(reassembly.fragment_starts, fcount);
      sort_array(reassembly.fragment_ends, fcount);
   }
   reassembly.fragment_count = fcount + 1;
   if( bit.band(fragment_offset_and_flags, fragment_flag_more_fragments) == 0 ) {
      if( reassembly.final_start != 0 ) {
         // There cannot be more than one final fragment.
         return this->reassembly_error(entry);
      } else {
         reassembly.final_start = frag_start;
      }
   } else if( frag_size % 8 != 0 ) {
      // The size of all non-terminal fragments must be a multiple of 8.
      // Here we should send "ICMP Parameter Problem, Code 0 to the
      // source of the fragment, pointing to the Payload Length field of
      // the fragment packet".
      return this->reassembly_error(entry);
   }

   var max_data_offset = ether_ipv6_header_len + frag_start + frag_size;
   if( max_data_offset > ffi.sizeof(reassembly.packet.data) ) {
      // Snabb packets have a maximum size of 10240 bytes.
      return this->reassembly_error(entry);
   }
   ffi.copy(reassembly.packet.data + reassembly.reassembly_base + frag_start,
            fragment.payload, frag_size);
   reassembly.packet.length = math.max(reassembly.packet.length,
                                       max_data_offset);
   reassembly.running_length = reassembly.running_length + frag_size;

   if( reassembly.final_start == 0 ) {
      // Still reassembling.
      return;
   } else if( reassembly.running_length != reassembly.packet.length ) {
      // Still reassembling.
      return;
   } else if( ! verify_valid_offsets(reassembly) ) {
      return this->reassembly_error(entry);
   } else {
      var out = packet.clone(reassembly.packet);
      var header = ffi.cast(ether_ipv6_header_ptr_t, out.data);
      header.ipv6.payload_length = htons(out.length - ether_ipv6_header_len);
      return this->reassembly_success(entry, out);
   }
}

function Reassembler::push () {
   var input, output = this.input.input, this.output.output;

   this.incoming_ipv6_fragments_alarm->check();

   for( _ = 1, link.nreadable(input) ) {
      var pkt = link.receive(input);
      var h = ffi.cast(ether_ipv6_header_ptr_t, pkt.data);
      if( ntohs(h.ether.type) != ether_type_ipv6 ) {
         // Not IPv6; forward it on.  FIXME: should make a different
         // counter here.
         counter.add(this.shm["in-ipv6-frag-reassembly-unneeded"]);
         link.transmit(output, pkt);
      } else if( ! ipv6_packet_has_valid_length(h, pkt.length) ) {
         // IPv6 packet has invalid length; drop.  FIXME: Should add a
         // counter here.
         packet.free(pkt);
      } else if( h.ipv6.next_header == fragment_proto ) {
         // A fragment; try to reassemble.
         counter.add(this.shm["in-ipv6-frag-needs-reassembly"]);
         this->handle_fragment(h);
         packet.free(pkt);
      } else {
         // Not fragmented; forward it on.
         counter.add(this.shm["in-ipv6-frag-reassembly-unneeded"]);
         link.transmit(output, pkt);
      }
   }

   if( this.next_counter_update < engine.now() ) {
      // Update counters every second, but add a bit of jitter to smooth
      // things out.
      this->update_counters();
      this.next_counter_update = engine.now() + math.random(0.9, 1.1);
   }
}

function selftest() {
   print("selftest: apps.ipv6.reassemble");

   var shm        = require("core.shm");
   var datagram   = require("lib.protocol.datagram");
   var ether      = require("lib.protocol.ethernet");
   var ipv6       = require("lib.protocol.ipv6");
   var Fragmenter = require("apps.ipv6.fragment").Fragmenter;

   var ethertype_ipv6 = 0x86dd;

   var function random_ipv6() { return lib.random_bytes(16); }
   var function random_mac() { return lib.random_bytes(6); }

   // Returns a new packet containing an Ethernet frame with an IPv6
   // header followed by PAYLOAD_SIZE random bytes.
   var function make_test_packet(payload_size) {
      var pkt = packet.from_pointer(lib.random_bytes(payload_size),
                                      payload_size);
      var eth_h = ether->new({ src = random_mac(), dst = random_mac(),
                                type = ethertype_ipv6 });
      var ip_h  = ipv6->new({ src = random_ipv6(), dst = random_ipv6(),
                               next_header = 0xff, hop_limit = 64 });
      ip_h->payload_length(payload_size);

      var dgram = datagram->new(pkt);
      dgram->push(ip_h);
      dgram->push(eth_h);
      return dgram->packet();
   }

   var function fragment(pkt, mtu) {
      var fragment = Fragmenter->new({mtu=mtu});
      fragment.shm = shm.create_frame("apps/fragmenter", fragment.shm);
      fragment.input = { input = link.new('fragment input') };
      fragment.output = { output = link.new('fragment output') };
      link.transmit(fragment.input.input, packet.clone(pkt));
      fragment->push();
      var ret = {};
      while( ! link.empty(fragment.output.output) ) {
         table.insert(ret, link.receive(fragment.output.output));
      }
      shm.delete_frame(fragment.shm);
      link.free(fragment.input.input, 'fragment input');
      link.free(fragment.output.output, 'fragment output');
      return ret;
   }

   var function permute_indices(lo, hi) {
      if( lo == hi ) { return {{hi}}; }
      var ret = {};
      for( _, tail in ipairs(permute_indices(lo + 1, hi)) ) {
         for( pos = 1, #tail + 1 ) {
            var order = lib.deepcopy(tail);
            table.insert(order, pos, lo);
            table.insert(ret, order);
         }
      }
      return ret;
   }

   for( _, size in ipairs({100, 400, 1000, 1500, 2000}) ) {
      var pkt = make_test_packet(size);
      for( mtu = 1280, 2500, 113 ) {
         var fragments = fragment(pkt, mtu);
         for( _, order in ipairs(permute_indices(1, #fragments)) ) {
            var reassembler = Reassembler->new ({
               max_concurrent_reassemblies = 100,
               max_fragments_per_reassembly = 20
            });
            reassembler.shm = shm.create_frame(
               "apps/reassembler", reassembler.shm);
            reassembler.input = { input = link.new('reassembly input') };
            reassembler.output = { output = link.new('reassembly output') };
            var last = table.remove(order);
            for( _, i in ipairs(order) ) {
               link.transmit(reassembler.input.input,
                             packet.clone(fragments[i]));
               reassembler->push();
               assert(link.empty(reassembler.output.output));
            }
            link.transmit(reassembler.input.input,
                          packet.clone(fragments[last]));
            reassembler->push();
            assert(link.nreadable(reassembler.output.output) == 1);
            var result = link.receive(reassembler.output.output);
            assert(pkt.length == result.length);
            for( i = ether->sizeof(), result.length - 1 ) {
               var expected, actual = pkt.data[i], result.data[i];
               assert(expected == actual,
                      "pkt["..i.."] expected "..expected..", got "..actual);
            }
            packet.free(result);
            link.free(reassembler.input.input, 'reassembly input');
            link.free(reassembler.output.output, 'reassembly output');
            shm.delete_frame(reassembler.shm);
         }
         for( _, p in ipairs(fragments) ) { packet.free(p); }
      }
      packet.free(pkt);
   }

   print("selftest: ok");
}

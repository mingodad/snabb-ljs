#! /usr/bin/env luajit
//
// pcap.lua
// Copyright (C) 2016-2017 Adrian Perez <aperez@igalia.com>
//
// Distributed under terms of the Apache License 2.0.
//

var ffi  = require("ffi");
var pcap = ffi.load("pcap");
var C    = ffi.C;

ffi.cdef ([=[
typedef struct pcap pcap_t;

struct pcap_pkthdr {
   uint64_t ts_sec;   /* timestamp seconds      */
   uint64_t ts_usec;  /* timestamp microseconds */
   uint32_t incl_len; /* number of bytes stored */
   uint32_t orig_len; /* actual packet length   */
};

pcap_t* pcap_open_offline (const char *filename, char *errbuf);
void    pcap_close (pcap_t *);

const uint8_t* pcap_next (pcap_t *p, struct pcap_pkthdr *h);
int pcap_datalink (pcap_t *p);

void free (void*);
]=]);

var pcap_header = ffi.metatype("struct pcap_pkthdr", {});

var function pcap_close(pcap_handle) {
   ffi.gc(pcap_handle, null);
   pcap.pcap_close(pcap_handle);
}

var pcap_file = ffi.metatype("pcap_t", {
   __new = function (ctype, filename) {
      var errbuf = ffi.new("char[512]");
      var pcap_handle = pcap.pcap_open_offline(filename, errbuf);
      if( pcap_handle == null ) {
         error(ffi.string(errbuf));
      }
      return pcap_handle;
   };

   __gc = pcap_close;

   __index = {
      next = pcap.pcap_next;
      data_link = pcap.pcap_datalink;
      close = function (this) {
         ffi.gc(this, null);
         pcap.pcap_close(this);
      };
      packets = function (this) {
         return coroutine.wrap(function () {
            var header = pcap_header();
            while( true ) {
               var packet = this->next(header);
               if( packet == null ) {
                  break;
               }
               coroutine.yield(header, packet);
            }
         });
      };
   };
});

return {
   header = pcap_header;
   file   = pcap_file;

   DLT_NULL      = 0;
   DLT_EN10MB    = 1;
   DLT_RAW       = (ffi.os == "OpenBSD") && 14 || 12;
   DLT_LINUX_SLL = 113;
};

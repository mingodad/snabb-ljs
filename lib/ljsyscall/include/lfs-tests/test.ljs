#!/usr/bin/env luajit

// very slightly modified version of tests from https://github.com/keplerproject/luafilesystem
/*
Copyright Â© 2003 Kepler Project.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

var tmp = "/tmp";
var sep = string.match (package.config, "[^\n]+");
var upper = "..";

var lfs = require("syscall.lfs");
print (lfs._VERSION);

io.write(".");
io.flush();

function attrdir (path) {
        for( file in lfs.dir(path) ) {
                if( file != "." && file != ".." ) {
                        var f = path..sep..file;
                        print ("\t=> "..f.." <=");
                        var attr = lfs.attributes (f);
                        assert (type(attr) == "table");
                        if( attr.mode == "directory" ) {
                                attrdir (f);
                        } else {
                                for( name, value in pairs(attr) ) {
                                        print (name, value);
                                }
                        }
                }
        }
}

// Checking changing directories
var current = assert (lfs.currentdir());
var reldir = string.gsub (current, "^.*%"..sep.."([^"..sep.."])$", "%1");
assert (lfs.chdir (upper), "could not change to upper directory");
assert (lfs.chdir (reldir), "could not change back to current directory");
assert (lfs.currentdir() == current, "error trying to change directories");
assert (lfs.chdir ("this couldn't be an actual directory") == null, "could change to a non-existent directory");

io.write(".");
io.flush();

// Changing creating and removing directories
var tmpdir = current..sep.."lfs_tmp_dir";
var tmpfile = tmpdir..sep.."tmp_file";
// Test for existence of a previous lfs_tmp_dir
// that may have resulted from an interrupted test execution and remove it
if( lfs.chdir (tmpdir) ) {
    assert (lfs.chdir (upper), "could not change to upper directory");
    assert (os.remove (tmpfile), "could not remove file from previous test");
    assert (lfs.rmdir (tmpdir), "could not remove directory from previous test");
}

io.write(".");
io.flush();

// tries to create a directory
assert (lfs.mkdir (tmpdir), "could not make a new directory");
var attrib, errmsg = lfs.attributes (tmpdir);
if( ! attrib ) {
        error ("could not get attributes of file `"..tmpdir.."':\n"..errmsg);
}
var f = io.open(tmpfile, "w");
f->close();

io.write(".");
io.flush();

// Change access time
var testdate = os.time({ year = 2007, day = 10, month = 2, hour=0});
assert (lfs.touch (tmpfile, testdate));
var new_att = assert (lfs.attributes (tmpfile));
assert (new_att.access == testdate, "could not set access time");
assert (new_att.modification == testdate, "could not set modification time");

io.write(".");
io.flush();

// Change access and modification time
var testdate1 = os.time({ year = 2007, day = 10, month = 2, hour=0});
var testdate2 = os.time({ year = 2007, day = 11, month = 2, hour=0});

assert (lfs.touch (tmpfile, testdate2, testdate1));
new_att = assert (lfs.attributes (tmpfile));
assert (new_att.access == testdate2, "could not set access time");
assert (new_att.modification == testdate1, "could not set modification time");

io.write(".");
io.flush();

// Checking link (does not work on Windows)
if( lfs.link (tmpfile, "_a_link_for_test_", true) ) {
  assert (lfs.attributes("_a_link_for_test_").mode == "file");
  assert (lfs.symlinkattributes("_a_link_for_test_").mode == "link");
  assert (lfs.link (tmpfile, "_a_hard_link_for_test_"));
  assert (lfs.attributes (tmpfile, "nlink") == 2);
  assert (os.remove("_a_link_for_test_"));
  assert (os.remove("_a_hard_link_for_test_"));
}

io.write(".");
io.flush();

// Checking text/binary modes (only has an effect in Windows)
f = io.open(tmpfile, "w");
var result, mode = lfs.setmode(f, "binary");
assert(result); // on non-Windows platforms, mode is always returned as "binary"
result, mode = lfs.setmode(f, "text");
assert(result && mode == "binary");
f->close();

io.write(".");
io.flush();

// Restore access time to current value
assert (lfs.touch (tmpfile, attrib.access, attrib.modification));
new_att = assert (lfs.attributes (tmpfile));
assert (new_att.access == attrib.access);
assert (new_att.modification == attrib.modification);

io.write(".");
io.flush();

// Remove new file and directory
assert (os.remove (tmpfile), "could not remove new file");
assert (lfs.rmdir (tmpdir), "could not remove new directory");
assert (lfs.mkdir (tmpdir..sep.."lfs_tmp_dir") == null, "could create a directory inside a non-existent one");

io.write(".");
io.flush();

// Trying to get attributes of a non-existent file
assert (lfs.attributes ("this couldn't be an actual file") == null, "could get attributes of a non-existent file");
assert (type(lfs.attributes (upper)) == "table", "couldn't get attributes of upper directory");

io.write(".");
io.flush();

// Stressing directory iterator
count = 0;
for( i = 1, 4000 ) {
        for( file in lfs.dir (tmp) ) {
                ++count    ;
        }
}

io.write(".");
io.flush();

// Stressing directory iterator, explicit version
count = 0;
for( i = 1, 4000 ) {
  var iter, dir = lfs.dir(tmp);
  var file = dir->next();
  while( file ) {
    ++count    ;
    file = dir->next();
  }
  assert(! pcall(dir.next, dir));
}

io.write(".");
io.flush();

// directory explicit close
var iter, dir = lfs.dir(tmp);
dir->close();
assert(! pcall(dir.next, dir));
print("Ok!");

/* 
		luaunit.lua

Description: A unit testing framework
Homepage: http://phil.freehackers.org/luaunit/
Initial author: Ryu, Gwang (http://www.gpgstudy.com/gpgiki/LuaUnit)
Lot of improvements by Philippe Fremy <phil@freehackers.org>
More improvements by Ryan P. <rjpcomputing@gmail.com>
Version: 2.0
License: X11 License, see LICENSE.txt

- Justin Cormack added slightly hacky method for marking tests as skipped, not really suitable for upstream yet.

Changes between 2.0 and 1.3:
- This is a major update that has some breaking changes to make it much more easy to use and code in many different styles
- Made the module only touch the global table for the asserts. You now use the module much more like Lua 5.2 when you require it.
  You need to store the LuaUnit table after you require it to allow you access to the LuaUnit methods and variables.
  (ex. local LuaUnit = require( "luaunit" ))
- Made changes to the style of which LuaUnit forced users to code there test classes. It now is more layed back and give the ability to code in a few styles.
	- Made "testable" classes able to start with 'test' or 'Test' for their name.
	- Made "testable" methods able to start with 'test' or 'Test' for their name.
	- Made testClass:setUp() methods able to be named with 'setUp' or 'Setup' or 'setup'.
	- Made testClass:tearDown() methods able to be named with 'tearDown' or 'TearDown' or 'teardown'.
	- Made LuaUnit.wrapFunctions() function able to be called with 'wrapFunctions' or 'WrapFunctions' or 'wrap_functions'.
	- Made LuaUnit:run() method able to be called with 'run' or 'Run'.
- Added the ability to tell if tables are equal using assertEquals. This uses a deep compare, not just the equality that they are the same memory address.
- Added LuaUnit.is<Type> and LuaUnit.is_<type> helper functions. (e.g. assert( LuaUnit.isString( getString() ) )
- Added assert<Type> and assert_<type> 
- Added assertNot<Type> and assert_not_<type>
- Added _VERSION variable to hold the LuaUnit version
- Added LuaUnit:setVerbosity(lvl) method to the LuaUnit table to allow you to control the verbosity now. If lvl is greater than 1 it will give verbose output.
  This can be called from alias of LuaUnit.SetVerbosity() and LuaUnit:set_verbosity().
- Moved wrapFunctions to the LuaUnit module table (e.g. local LuaUnit = require( "luaunit" ); LuaUnit.wrapFunctions( ... ) )
- Fixed the verbosity to actually format in a way that is closer to other unit testing frameworks I have used.
  NOTE: This is not the only way, I just thought the old output was way to verbose and duplicated the errors.
- Made the errors only show in the "test report" section (at the end of the run)

Changes between 1.3 and 1.2a:
- port to lua 5.1
- use orderedPairs() to iterate over a table in the right order
- change the order of expected, actual in assertEquals() and the default value of
  USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS. This can be adjusted with
  USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS.

Changes between 1.2a and 1.2:
- fix: test classes were not run in the right order

Changes between 1.2 and 1.1:
- tests are now run in alphabetical order
- fix a bug that would prevent all tests from being run

Changes between 1.1 and 1.0:
- internal variables are not global anymore
- you can choose between assertEquals( actual, expected) or assertEquals(
  expected, actual )
- you can assert for an error: assertError( f, a, b ) will assert that calling
  the function f(a,b) generates an error
- display the calling stack when an error is spotted
- a dedicated class collects and displays the result, to provide easy
  customisation
- two verbosity level, like in python unittest
*///

// SETUP -----------------------------------------------------------------------
//
var argv = arg;
var typenames = { "Null", "Boolean", "Number", "String", "Table", "Function", "Thread", "Userdata" };

/* Some people like assertEquals( actual, expected ) and some people prefer 
assertEquals( expected, actual ).
*///
USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS = USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS || true;

// HELPER FUNCTIONS ------------------------------------------------------------
//
var function tablePrint(tt, indent, done) {
	done = done || {};
	indent = indent || 0;
	if( type(tt) == "table" ) {
		var sb = {};
		for( key, value in pairs(tt) ) {
			table.insert(sb, string.rep(" ", indent)); // indent it
			if( type(value) == "table" && ! done[value] ) {
				done[value] = true;
				table.insert(sb, "[\""..key.."\"] = {\n");
				table.insert(sb, tablePrint(value, indent + 2, done));
				table.insert(sb, string.rep(" ", indent)); // indent it
				table.insert(sb, "}\n");
			} else if( "number" == type(key) ) {
				table.insert(sb, string.format("\"%s\"\n", tostring(value)));
			} else {
				table.insert(sb, string.format(
				"%s = \"%s\"\n", tostring(key), tostring(value)));
			}
		}
			return table.concat(sb);
		} else {
			return tt .. "\n";
	}
}

var function toString( tbl ) {
    if(  "null"       == type( tbl ) ) {
        return tostring(null);
    } else if(  "table" == type( tbl ) ) {
        return tablePrint(tbl);
    } else if(  "string" == type( tbl ) ) {
        return tbl;
    } else {
        return tostring(tbl);
    }
}

var function deepCompare(t1, t2, ignore_mt) {
	var ty1 = type(t1);
	var ty2 = type(t2);
	if( ty1 != ty2 ) { return false; }
	// non-table types can be directly compared
	if( ty1 != 'table' && ty2 != 'table' ) { return t1 == t2; }
	// as well as tables which have the metamethod __eq
	var mt = getmetatable(t1);
	if( ! ignore_mt && mt && mt.__eq ) { return t1 == t2; }
	for( k1,v1 in pairs(t1) ) {
		var v2 = t2[k1];
		if( v2 == null || ! deepCompare(v1,v2) ) { return false; }
	}
	for( k2,v2 in pairs(t2) ) {
		var v1 = t1[k2];
		if( v1 == null || ! deepCompare(v1,v2) ) { return false; }
	}
	
	return true;
}

// Order of testing
var function __genOrderedIndex( t ) {
    var orderedIndex = {};
    for( key,_ in pairs(t) ) {
        table.insert( orderedIndex, key );
    }
    table.sort( orderedIndex );
    return orderedIndex;
}

var function orderedNext(t, state) {
	// Equivalent of the next() function of table iteration, but returns the
	// keys in the alphabetic order. We use a temporary ordered key table that
	// is stored in the table being iterated.

    //print("orderedNext: state = "..tostring(state) )
    if( state == null ) {
        // the first time, generate the index
        t.__orderedIndex = __genOrderedIndex( t );
        var key = t.__orderedIndex[1];
        return key, t[key];
    }
    // fetch the next value
    var key = null;
    for( i = 1,#t.__orderedIndex ) {
        if( t.__orderedIndex[i] == state ) {
            key = t.__orderedIndex[i+1];
        }
    }

    if( key ) {
        return key, t[key];
    }

    // no more value to return, cleanup
    t.__orderedIndex = null;
    return;
}

var function orderedPairs(t) {
    // Equivalent of the pairs() function on tables. Allows to iterate
    // in order
    return orderedNext, t, null;
}

// ASSERT FUNCTIONS ------------------------------------------------------------
//
function assertError(f, ...) {
	// assert that calling f with the arguments will raise an error
	// example: assertError( f, 1, 2 ) => f(1,2) should generate an error
	var has_error, error_msg = ! pcall( f, ... );
	if( has_error ) { return; } 
	error( "No error generated", 2 );
}
assert_error = assertError;

function assertEquals(actual, expected) {
	// assert that two values are equal and calls error else
	if( ! USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS ) {
		expected, actual = actual, expected;
	}
	
	if( "table" == type(actual) ) {
		if( ! deepCompare(actual, expected, true) ) {
			error("table expected: \n"..toString(expected)..", actual: \n"..toString(actual));
		}
	} else {
		if(  actual != expected  ) {
			var function wrapValue( v ) {
				if( type(v) == 'string' ) { return "'"..v.."'"; }
				return tostring(v);
			}
			
			var errorMsg;
			//if type(expected) == 'string' then
			//	errorMsg = "\nexpected: "..wrapValue(expected).."\n"..
			//					 "actual  : "..wrapValue(actual).."\n"
			//else
				errorMsg = "expected: "..wrapValue(expected)..", actual: "..wrapValue(actual);
			//end
			//print(errorMsg)
			error(errorMsg, 2);
		}
	}
}
assert_equals = assertEquals;

// assert_<type> functions
for( _, typename in ipairs(typenames) ) {
	var tName = typename->lower();
	var assert_typename = "assert"..typename;
	_G[assert_typename] = function(actual, msg) {
		var actualtype = type(actual);
		if( actualtype != tName ) {
			var errorMsg = tName.." expected but was a "..actualtype;
			if( msg ) { 
				errorMsg = msg.."\n"..errorMsg;
			}
			error(errorMsg, 2);
		}
		
		return actual;
	};
	// Alias to lower underscore naming
	_G["assert_"..tName] = _G[assert_typename];
}

// assert_not_<type> functions
for( _, typename in ipairs(typenames) ) {
	var tName = typename->lower();
	var assert_not_typename = "assertNot"..typename;
	_G[assert_not_typename] = function(actual, msg) {
		if( type(actual) == tName ) {
			var errorMsg = tName.." not expected but was one";
			if( msg ) { 
				errorMsg = msg.."\n"..errorMsg;
			}
			error(errorMsg, 2);
		}
	};
	// Alias to lower underscore naming
	_G["assert_not_"..tName] = _G[assert_not_typename];
}

// UNITRESULT CLASS ------------------------------------------------------------
//
var UnitResult = { // class
	failureCount = 0,
	skipCount = 0,
	testCount = 0,
	errorList = {},
	currentClassName = "",
	currentTestName = "",
	testHasFailure = false,
        testSkipped = false,
	verbosity = 1
};
	function UnitResult::displayClassName() {
		//if self.verbosity == 0 then print("") end
		print(this.currentClassName);
	}

	function UnitResult::displayTestName() {
		if( this.verbosity == 0 ) {
			io.stdout->write(".");
		} else {
			io.stdout->write(("  [%s] ")->format(this.currentTestName));
		}
	}

	function UnitResult::displayFailure(errorMsg) {
		if( this.verbosity == 0 ) {
			io.stdout->write("F");
		} else {
			//print(errorMsg)
			print("", "Failed");
		}
	}

	function UnitResult::displaySuccess() {
		if( this.verbosity == 0 ) {
			io.stdout->write(".");
		} else { 
			print("", "Ok");
		}
	}

	function UnitResult::displaySkip() {
		if( this.verbosity == 0 ) {
			io.stdout->write(".");
		} else { 
			print("", "Skipped");
		}
	}

	function UnitResult::displayOneFailedTest(failure) {
		var testName, errorMsg = unpack(failure);
		print(">>> "..testName.." failed");
		print(errorMsg);
	}

	function UnitResult::displayFailedTests() {
		if( #this.errorList == 0 ) { return; }
		print("Failed tests:");
		print("-------------");
                for( i,v in ipairs(this.errorList) ) { this.displayOneFailedTest(i, v); }
	}

	function UnitResult::displayFinalResult() {
		if( this.verbosity == 0 ) { print(""); }
		print("=========================================================");
		this->displayFailedTests();
		var failurePercent, successCount;
		var totalTested = this.testCount - this.skipCount;
		if( totalTested == 0 ) {
			failurePercent = 0;
		} else {
			failurePercent = 100 * this.failureCount / totalTested;
		}
		successCount = totalTested - this.failureCount;
		print( string.format("Success : %d%% - %d / %d (total of %d tests, %d skipped)",
			100-math.ceil(failurePercent), successCount, totalTested, this.testCount, this.skipCount ) );
		return this.failureCount;
    }

	function UnitResult::startClass(className) {
		this.currentClassName = className;
		this->displayClassName();
		// indent status messages
		if( this.verbosity == 0 ) { io.stdout->write("\t"); }
	}

	function UnitResult::startTest(testName) {
		this.currentTestName = testName;
		this->displayTestName();
        	this.testCount = this.testCount + 1;
		this.testHasFailure = false;
		this.testSkipped = false;
	}

	function UnitResult::addFailure( errorMsg ) {
		this.failureCount = this.failureCount + 1;
		this.testHasFailure = true;
		table.insert( this.errorList, { this.currentTestName, errorMsg } );
		this->displayFailure( errorMsg );
	}

	function UnitResult::addSkip() {
		this.testSkipped = true;
		this.skipCount = this.skipCount + 1;
	}

	function UnitResult::endTest() {
		if( ! this.testHasFailure ) {
			if( this.testSkipped ) {
				this->displaySkip();
			} else {
				this->displaySuccess();
			}
		}
	}

// class UnitResult end

// LUAUNIT CLASS ---------------------------------------------------------------
//
var LuaUnit = {
	result = UnitResult,
	_VERSION = "2.0"
};
	// Sets the verbosity level
	// @param lvl {number} If greater than 0 there will be verbose output. Defaults to 0
	function LuaUnit::setVerbosity(lvl) {
		this.result.verbosity = lvl || 0;
		assert("number" == type(this.result.verbosity), ("bad argument #1 to 'setVerbosity' (number expected, got %s)")->format(type(this.result.verbosity)));
	}
	// Other alias's
	LuaUnit.set_verbosity = LuaUnit.setVerbosity;
	LuaUnit.SetVerbosity = LuaUnit.setVerbosity;
	
	// Split text into a list consisting of the strings in text,
	// separated by strings matching delimiter (which may be a pattern). 
	// example: strsplit(",%s*", "Anna, Bob, Charlie,Dolores")
	function LuaUnit.strsplit(delimiter, text) {
		var list = {};
		var pos = 1;
		if( string.find("", delimiter, 1) ) { // this would result in endless loops
			error("delimiter matches empty string!");
		}
		while( 1 ) {
			var first, last = string.find(text, delimiter, pos);
			if( first ) { // found?
				table.insert(list, string.sub(text, pos, first-1));
				pos = last+1;
			} else {
				table.insert(list, string.sub(text, pos));
				break;
			}
		}
		return list;
	}

	// Type check functions
	for( _, typename in ipairs(typenames) ) {
		var tName = typename->lower();
		LuaUnit["is"..typename] = function(x) {
			return type(x) == tName;
		};
		// Alias to lower underscore naming
		LuaUnit["is_"..tName] = LuaUnit["is"..typename];
	}
    
    // Use me to wrap a set of functions into a Runnable test class:
	// TestToto = wrapFunctions( f1, f2, f3, f3, f5 )
	// Now, TestToto will be picked up by LuaUnit:run()
	function LuaUnit.wrapFunctions(...) {
		var testClass, testFunction;
		testClass = {};
		var function storeAsMethod(idx, testName) {
			testFunction = _G[testName];
			testClass[testName] = testFunction;
		}
                for( i, v in ipairs ({...}) ) { storeAsMethod(i, v); }
		
		return testClass;
	}
	// Other alias's
	LuaUnit.wrap_functions = LuaUnit.wrapFunctions;
	LuaUnit.WrapFunctions = LuaUnit.wrapFunctions;

	function LuaUnit.strip_luaunit_stack(stack_trace) {
		var stack_list = LuaUnit.strsplit( "\n", stack_trace );
		var strip_end = null;
		for( i = #stack_list,1,-1 ) {
			// a bit rude but it works !
			if( string.find(stack_list[i],"[C]: in function `xpcall'",0,true)
				) {
				strip_end = i - 2;
			}
		}
		if( strip_end ) {
			table.setn( stack_list, strip_end );
		}
		stack_trace = table.concat( stack_list, "\n" );
		return stack_trace;
	}

    function LuaUnit::runTestMethod(aName, aClassInstance, aMethod) {
		var ok, errorMsg, ret;
		// example: runTestMethod( 'TestToto:test1', TestToto, TestToto.testToto(self) )
		LuaUnit.result->startTest(aName);

		// run setUp first(if any)
		if( this.isFunction( aClassInstance.setUp) ) {
			aClassInstance->setUp();
		} else if( this.isFunction( aClassInstance.Setup) ) {
			aClassInstance->Setup();
		} else if( this.isFunction( aClassInstance.setup) ) {
			aClassInstance->setup();
		}

		// run testMethod()
                var tracemsg;
                var function trace(err) {
                  tracemsg = debug.traceback();
                  return err;
                }
        	ok, errorMsg, ret = xpcall( aMethod, trace );
		if( ! ok ) {
			errorMsg  = this.strip_luaunit_stack(errorMsg);
                        if( type(errorMsg) == "string" && errorMsg->sub(-9)->lower() == ": skipped" ) {
				LuaUnit.result->addSkip();
			} else {
				LuaUnit.result->addFailure( errorMsg ..'\n'.. tracemsg);
			}
		}

		// lastly, run tearDown(if any)
		if( this.isFunction(aClassInstance.tearDown) ) {
			aClassInstance->tearDown();
		} else if( this.isFunction(aClassInstance.TearDown) ) {
			aClassInstance->TearDown();
		} else if( this.isFunction(aClassInstance.teardown) ) {
			aClassInstance->teardown();
		}

		this.result->endTest();
    }

	function LuaUnit::runTestMethodName(methodName, classInstance) {
		// example: runTestMethodName( 'TestToto:testToto', TestToto )
		var methodInstance = loadstring(methodName .. '()');
		LuaUnit->runTestMethod(methodName, classInstance, methodInstance);
	}

    function LuaUnit::runTestClassByName(aClassName) {
		//assert("table" == type(aClassName), ("bad argument #1 to 'runTestClassByName' (string expected, got %s). Make sure you are not trying to just pass functions not part of a class."):format(type(aClassName)))
		// example: runTestMethodName( 'TestToto' )
		var hasMethod, methodName, classInstance;
		hasMethod = string.find(aClassName, '::' );
		if( hasMethod ) {
			methodName = string.sub(aClassName, hasMethod+1);
			aClassName = string.sub(aClassName,1,hasMethod-1);
		}
		classInstance = _G[aClassName];
		if( "table" != type(classInstance) ) {
			error("No such class: "..aClassName);
		}

		LuaUnit.result->startClass( aClassName );

		if( hasMethod ) {
			if( ! classInstance[ methodName ] ) {
				error( "No such method: "..methodName );
			}
			LuaUnit->runTestMethodName( aClassName..'->'.. methodName, classInstance );
		} else {
			// run all test methods of the class
			for( xmethodName, method in orderedPairs(classInstance) ) {
			//for methodName, method in classInstance do
				if( LuaUnit.isFunction(method) && (string.sub(xmethodName, 1, 4) == "test" || string.sub(xmethodName, 1, 4) == "Test") ) {
					LuaUnit->runTestMethodName( aClassName..'->'.. xmethodName, classInstance );
				}
			}
		}
	}

	function LuaUnit::run(...) {
		// Run some specific test classes.
		// If no arguments are passed, run the class names specified on the
		// command line. If no class name is specified on the command line
		// run all classes whose name starts with 'Test'
		//
		// If arguments are passed, they must be strings of the class names 
		// that you want to run
		var args = {...};
		if( #args > 0 ) {
                        for( i, v in ipairs(args) ) { LuaUnit.runTestClassByName(i, v); }
		} else { 
			if( argv && #argv > 1 ) {
				// Run files passed on the command line
                                for( i, v in ipairs(argv) ) { LuaUnit.runTestClassByName(i, v); }
			} else {
				// create the list before. If you do not do it now, you
				// get undefined result because you modify _G while iterating
				// over it.
				var testClassList = {};
				for( key, val in pairs(_G) ) { 
					if( type(key) == "string" && "table" == type(val) ) {
						if( string.sub(key, 1, 4) == "Test" || string.sub(key, 1, 4) == "test" ) {
							table.insert( testClassList, key );
						}
					}
				}
				for( i, val in orderedPairs(testClassList) ) {
					LuaUnit->runTestClassByName(val);
				}
			}
		}
		
		return LuaUnit.result->displayFinalResult();
	}
	// Other alias
	LuaUnit.Run = LuaUnit.run;
// end class LuaUnit

return LuaUnit;

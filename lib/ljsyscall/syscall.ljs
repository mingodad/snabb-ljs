// this puts everything into one table ready to use

var require, print, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string, math = 
require, print, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string, math;

var abi = require ("syscall.abi");

if( abi.rump && abi.types ) { abi.os = abi.types; } // pretend to be NetBSD for normal rump, Linux for rumplinux

if( abi.os == "netbsd" ) {
  // TODO merge
  require("syscall.netbsd.ffitypes");
  if( ! abi.rump ) {
    require("syscall.netbsd.ffifunctions");
  }
} else {
  require("syscall." .. abi.os .. ".ffi");
}

var c = require("syscall." .. abi.os .. ".constants");

var ostypes = require("syscall." .. abi.os .. ".types");
var bsdtypes;
if( (abi.rump && abi.types == "netbsd") || (! abi.rump && abi.bsd) ) {
  bsdtypes = require("syscall.bsd.types");
}
var types = require ("syscall.types").init(c, ostypes, bsdtypes);

var C;
if( abi.rump ) { // TODO merge these with conditionals
  C = require("syscall.rump.c");
} else {
  C = require("syscall." .. abi.os .. ".c");
}

// cannot put in S, needed for tests, cannot be put in c earlier due to deps TODO remove see #94
c.IOCTL = require("syscall." .. abi.os .. ".ioctl").init(types);

var S = require ("syscall.syscalls").init(C, c, types);

S.abi, S.types, S.t, S.c = abi, types, types.t, c; // add to main table returned

// add compatibility code
S = require ("syscall.compat").init(S);

// add functions from libc
S = require ("syscall.libc").init(S);

// add methods
S = require ("syscall.methods").init(S);

// add utils
S.util = require ("syscall.util").init(S);

if( abi.os == "linux" ) {
  S.cgroup = require ("syscall.linux.cgroup").init(S);
  S.nl = require ("syscall.linux.nl").init(S);
  // TODO add the other Linux specific modules here
}

S._VERSION = "v0.11pre";
S._DESCRIPTION = "ljsyscall: A Unix system call API for LuaJIT";
S._COPYRIGHT = "Copyright (C) 2011-2014 Justin Cormack. MIT licensed.";

return S;


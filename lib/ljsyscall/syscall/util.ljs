// generic utils not specific to any OS

// these are generally equivalent to things that are in man(1) or man(3)
// these can be made more modular as number increases

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) {

var h = require ("syscall.helpers");
var htonl = h.htonl;

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var abi, types, c = S.abi, S.types, S.c;
var t, pt, s = types.t, types.pt, types.s;

var mt, meth = {}, {};

var util = require("syscall." .. abi.os .. ".util").init(S);

mt.dir = {
  __tostring = function(t) {
    if( #t == 0 ) { return ""; }
    table.sort(t);
    return table.concat(t, "\n") .. "\n";
    }
};

function util.dirtable(name, nodots) { // return table of directory entries, remove . and .. if nodots true
  var d = {};
  var size = 4096;
  var buf = t.buffer(size);
  var iter, err = util.ls(name, buf, size);
  if( ! iter ) { return null, err; }
  for( f in iter ) {
    if( ! (nodots && (f == "." || f == "..")) ) { d[#d + 1] = f; }
  }
  return setmetatable(d, mt.dir);
}

// this returns an iterator over multiple calls to getdents TODO add nodots?
// note how errors work, getdents will throw as called multiple times, but normally should not fail if open succeeds
// getdents can fail eg on nfs though.
function util.ls(name, buf, size) {
  size = size || 4096;
  buf = buf || t.buffer(size);
  if( ! name ) { name = "."; }
  var fd, err = S.open(name, "directory, rdonly");
  if( err ) { return null, err; }
  var di;
  return function() {
    while( true ) {
      if( di ) {
        var d = di();
        if( d ) { return d.name, d; }
      }
      // Fetch more entries.
      var err;
      di, err = fd->getdents(buf, size);
      if( ! di ) {
        fd->close();
        if( err ) { error(err); } else { return null; }
      }
    }
  };
}

// recursive rm TODO use ls iterator, which also returns type
var function rmhelper(file, prefix) {
  var name, ok;
  if( prefix ) { name = prefix .. "/" .. file; } else { name = file; }
  var st, err = S.lstat(name);
  if( ! st ) { return null, err; }
  if( st.isdir ) {
    var files;
    files, err = util.dirtable(name, true);
    if( ! files ) { return null, err; }
    for( _, f in pairs(files) ) {
      ok, err = rmhelper(f, name);
      if( ! ok ) { return null, err; }
    }
    ok, err = S.rmdir(name);
    if( ! ok ) { return null, err; }
  } else {
    ok, err = S.unlink(name);
    if( ! ok ) { return null, err; }
  }
  return true;
}

function util.rm(...) {
  for( _, f in ipairs({...}) ) {
    var ok, err = rmhelper(f);
    if( ! ok ) { return null, err; }
  }
  return true;
}

// TODO warning broken
function util.cp(source, dest, mode) { // TODO make much more functional, less broken, esp fix mode! and size issue!!
  var contents, err = util.readfile(source);
  if( ! contents ) { return null, err; }
  var ok;
  ok, err = util.writefile(dest, contents, mode);
  if( ! ok ) { return null, err; }
  return true;
}

function util.touch(file) {
  var fd, err = S.open(file, "wronly,creat,noctty,nonblock", "0666");
  if( ! fd ) { return null, err; }
  var fd2, ok;
  fd2, err = S.dup(fd);
  if( ! fd2 ) {
    fd2->close();
    return null, err;
  }
  fd->close();
  ok, err = S.futimes(fd2);
  fd2->close();
  if( ! ok ) { return null, err; }
  return true;
}

function util.createfile(file) { // touch without timestamp adjustment
  var fd, err = S.open(file, "wronly,creat,noctty,nonblock", "0666");
  if( ! fd ) { return null, err; }
  var ok;
  ok, err = fd->close();
  if( ! ok ) { return null, err; }
  return true;
}

function util.mapfile(name) { // generally better to use, but no good for sysfs etc
  var fd, err = S.open(name, "rdonly");
  if( ! fd ) { return null, err; }
  var st, m, ok;
  st, err = S.fstat(fd);
  if( ! st ) { return null, err; }
  var size = st.size;
  m, err = S.mmap(null, size, "read", "shared", fd, 0);
  if( ! m ) { return null, err; }
  var str = ffi.string(m, size);
  ok, err = S.munmap(m, size);
  if( ! ok ) { return null, err; }
  ok, err = fd->close();
  if( ! ok ) { return null, err; }
  return str;
}

// TODO fix short reads, but mainly used for sysfs, proc
function util.readfile(name, buffer, length) {
  var fd, err = S.open(name, "rdonly");
  if( ! fd ) { return null, err; }
  var r, ok;
  r, err = S.read(fd, buffer, length || 4096);
  if( ! r ) { return null, err; }
  ok, err = fd->close();
  if( ! ok ) { return null, err; }
  return r;
}

// write string to named file; silently ignore short writes TODO fix
function util.writefile(name, str, mode, flags) {
  var fd, err, n, ok;
  if( mode ) { fd, err = S.creat(name, mode); } else { fd, err = S.open(name, flags || "wronly"); }
  if( ! fd ) { return null, err; }
  n, err = S.write(fd, str);
  if( ! n ) { return null, err; }
  ok, err = fd->close();
  if( ! ok ) { return null, err; }
  return true;
}

mt.ps = {
  __tostring = function(ps) {
    var s = {};
    for( i = 1, #ps ) {
      s[#s + 1] = tostring(ps[i]);
    }
    return table.concat(s, '\n');
  }
};

// note that Linux and NetBSD have /proc but FreeBSD does not usually have it mounted, although it is an option
function util.ps() {
  var ls, err = util.dirtable("/proc");
  if( ! ls ) { return null, err; }
  var ps = {};
  for( i = 1, #ls ) {
    if( ! string.match(ls[i], '[^%d]') ) {
      var p = util.proc(tonumber(ls[i]));
      if( p ) { ps[#ps + 1] = p; }
    }
  }
  table.sort(ps, function(a, b) { return a.pid < b.pid; });
  return setmetatable(ps, mt.ps);
}

mt.proc = {
  __index = function(p, k) {
    var name = p.dir .. k;
    var st, err = S.lstat(name);
    if( ! st ) { return null, err; }
    var fd, ret;
    if( st.isreg ) {
      fd, err = S.open(p.dir .. k, "rdonly");
      if( ! fd ) { return null, err; }
      ret, err = S.read(fd); // read defaults to 4k, sufficient?
      if( ! ret ) { return null, err; }
      S.close(fd);
      return ret; // TODO many could usefully do with some parsing
    }
    if( st.islnk ) {
      ret, err = S.readlink(name);
      if( ! ret ) { return null, err; }
      return ret;
    }
    // TODO directories
  },
  __tostring = function(p) { // TODO decide what to print
    var c = p.cmdline;
    if( c ) {
      if( #c == 0 ) {
        var comm = p.comm;
        if( comm && #comm > 0 ) {
          c = '[' .. comm->sub(1, -2) .. ']';
        }
      }
      return p.pid .. '  ' .. c;
    }
  }
};

function util.proc(pid) {
  if( ! pid ) { pid = S.getpid(); }
  return setmetatable({pid = pid, dir = "/proc/" .. pid .. "/"}, mt.proc);
}

// receive cmsg, extended helper on recvmsg, fairly incomplete at present
function util.recvcmsg(fd, msg, flags) {
  if( ! msg ) {
    var buf1 = t.buffer(1); // assume user wants to receive single byte to get cmsg
    var io = t.iovecs({{buf1, 1}});
    var bufsize = 1024; // sane default, build your own structure otherwise
    var buf = t.buffer(bufsize);
    msg = t.msghdr({iov = io, msg_control = buf, msg_controllen = bufsize});
  }
  var count, err = S.recvmsg(fd, msg, flags);
  if( ! count ) { return null, err; }
  var ret = {count = count, iovec = msg.msg_iov}; // thats the basic return value, and the iovec
  for( mc, cmsg in msg->cmsgs() ) {
    var pid, uid, gid = cmsg->credentials();
    if( pid ) {
      ret.pid = pid;
      ret.uid = uid;
      ret.gid = gid;
    }
    var fd_array = {};
    for( xfd in cmsg->fds() ) {
      fd_array[#fd_array + 1] = xfd;
    }
    ret.fd = fd_array;
  }
  return ret;
}

function util.sendfds(fd, ...) {
  var buf1 = t.buffer(1); // need to send one byte
  var io = t.iovecs({{buf1, 1}});
  var cmsg = t.cmsghdr("socket", "rights", {...});
  var msg = t.msghdr({iov = io, control = cmsg});
  return S.sendmsg(fd, msg, 0);
}

// generic inet name to ip, also with netmask support
// TODO convert to a type? either way should not really be in util, probably helpers
// better as a type that returns inet, mask
function util.inet_name(src, netmask) {
  var addr;
  if( ! netmask ) {
    var a, b = src->find("/", 1, true);
    if( a ) {
      netmask = tonumber(src->sub(b + 1));
      src = src->sub(1, a - 1);
    }
  }
  if( src->find(":", 1, true) ) { // ipv6
    addr = t.in6_addr(src);
    if( ! addr ) { return null; }
    if( ! netmask ) { netmask = 128; }
  } else {
    addr = t.in_addr(src);
    if( ! addr ) { return null; }
    if( ! netmask ) { netmask = 32; }
  }
  return addr, netmask;
}

var function lastslash(name) {
  var ls;
  var i = 0;
  while( true ) { 
    i = string.find(name, "/", i + 1);
    if( ! i ) { return ls; }
    ls = i;
  }
}

var function deltrailslash(name) {
  while( name->sub(#name) == "/" ) {
    name = string.sub(name, 1, #name - 1);
  }
  return name;
}

function util.basename(name) {
  if( name == "" ) { return "."; }
  name = deltrailslash(name);
  if( name == "" ) { return "/"; } // was / or // etc
  var ls = lastslash(name);
  if( ! ls ) { return name; }
  return string.sub(name, ls + 1);
}

function util.dirname(name) {
  if( name == "" ) { return "."; }
  name = deltrailslash(name);
  if( name == "" ) { return "/"; } // was / or // etc
  var ls = lastslash(name);
  if( ! ls ) { return "."; }
  name = string.sub(name, 1, ls - 1);
  name = deltrailslash(name);
  if( name == "" ) { return "/"; } // was / or // etc
  return name;
}

return util;

}

return {init = init};


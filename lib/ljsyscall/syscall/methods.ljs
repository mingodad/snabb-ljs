// this creates types with methods
// cannot do this in types as the functions have not been defined yet (as they depend on types)
// well we could, by passing in the empty table for S, but this is more modular

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) {

var abi = S.abi;

var c = S.c;
var types = S.types;
var t, s, pt = types.t, types.s, types.pt;

var bit = require ("syscall.bit");

var ffi = require ("ffi");

var h = require ("syscall.helpers");

var getfd, istype, mktype = h.getfd, h.istype, h.mktype;

var function metatype(tp, mt) {
  if( abi.rumpfn ) { tp = abi.rumpfn(tp); }
  return ffi.metatype(tp, mt);
}

// easier interfaces to some functions that are in common use TODO new fcntl code should make easier
var function nonblock(fd) {
  var fl, err = S.fcntl(fd, c.F.GETFL);
  if( ! fl ) { return null, err; }
  fl, err = S.fcntl(fd, c.F.SETFL, c.O(fl, "nonblock"));
  if( ! fl ) { return null, err; }
  return true;
}

var function block(fd) {
  var fl, err = S.fcntl(fd, c.F.GETFL);
  if( ! fl ) { return null, err; }
  fl, err = S.fcntl(fd, c.F.SETFL, c.O(fl, "~nonblock"));
  if( ! fl ) { return null, err; }
  return true;
}

var function tell(fd) { return S.lseek(fd, 0, c.SEEK.CUR); }

// somewhat confusing now we have flock too. I think this comes from nixio.
var function lockf(fd, cmd, len) {
  cmd = c.LOCKF[cmd];
  if( cmd == c.LOCKF.LOCK ) {
    return S.fcntl(fd, c.F.SETLKW, {l_type = c.FCNTL_LOCK.WRLCK, l_whence = c.SEEK.CUR, l_start = 0, l_len = len});
  } else if( cmd == c.LOCKF.TLOCK ) {
    return S.fcntl(fd, c.F.SETLK, {l_type = c.FCNTL_LOCK.WRLCK, l_whence = c.SEEK.CUR, l_start = 0, l_len = len});
  } else if( cmd == c.LOCKF.ULOCK ) {
    return S.fcntl(fd, c.F.SETLK, {l_type = c.FCNTL_LOCK.UNLCK, l_whence = c.SEEK.CUR, l_start = 0, l_len = len});
  } else if( cmd == c.LOCKF.TEST ) {
    var ret, err = S.fcntl(fd, c.F.GETLK, {l_type = c.FCNTL_LOCK.WRLCK, l_whence = c.SEEK.CUR, l_start = 0, l_len = len});
    if( ! ret ) { return null, err; }
    return ret.l_type == c.FCNTL_LOCK.UNLCK;
  }
}

// methods on an fd
// note could split, so a socket does not have methods only appropriate for a file; sometimes you do not know what type an fd is
var fdmethods = {'dup', 'dup2', 'dup3', 'read', 'write', 'pread', 'pwrite',
                   'lseek', 'fchdir', 'fsync', 'fdatasync', 'fstat', 'fcntl', 'fchmod',
                   'bind', 'listen', 'connect', 'accept', 'getsockname', 'getpeername',
                   'send', 'sendto', 'recv', 'recvfrom', 'readv', 'writev', 'sendmsg',
                   'recvmsg', 'setsockopt', 'epoll_ctl', 'epoll_wait', 'sendfile', 'getdents',
                   'ftruncate', 'shutdown', 'getsockopt',
                   'inotify_add_watch', 'inotify_rm_watch', 'inotify_read', 'flistxattr',
                   'fsetxattr', 'fgetxattr', 'fremovexattr', 'fxattr', 'splice', 'vmsplice', 'tee',
                   'timerfd_gettime', 'timerfd_settime',
                   'fadvise', 'fallocate', 'posix_fallocate', 'readahead',
                   'sync_file_range', 'fstatfs', 'futimens', 'futimes',
                   'fstatat', 'unlinkat', 'mkdirat', 'mknodat', 'faccessat', 'fchmodat', 'fchown',
                   'fchownat', 'readlinkat', 'setns', 'openat', 'accept4',
                   'preadv', 'pwritev', 'epoll_pwait', 'ioctl', 'flock', 'fpathconf',
                   'grantpt', 'unlockpt', 'ptsname', 'tcgetattr', 'tcsetattr', 'isatty',
                   'tcsendbreak', 'tcdrain', 'tcflush', 'tcflow', 'tcgetsid',
                   'sendmmsg', 'recvmmsg', 'syncfs',
                   'fchflags', 'fchroot', 'fsync_range', 'kevent', 'paccept', 'fktrace', // bsd only
                   'pdgetpid', 'pdkill' // freebsd only
                   };
var fmeth = {};
for( _, v in ipairs(fdmethods) ) { fmeth[v] = S[v]; }

// defined above
fmeth.block = block;
fmeth.nonblock = nonblock;
fmeth.tell = tell;
fmeth.lockf = lockf;

// fd not first argument
fmeth.mmap = function(fd, addr, length, prot, flags, offset) { return S.mmap(addr, length, prot, flags, fd, offset); };
if( S.bindat ) { fmeth.bindat = function(s, dirfd, addr, addrlen) { return S.bindat(dirfd, s, addr, addrlen); }; }
if( S.connectat ) { fmeth.connectat = function(s, dirfd, addr, addrlen) { return S.connectat(dirfd, s, addr, addrlen); }; }

// allow calling without leading f
fmeth.stat = S.fstat;
fmeth.chdir = S.fchdir;
fmeth.sync = S.fsync;
fmeth.datasync = S.fdatasync;
fmeth.chmod = S.fchmod;
fmeth.setxattr = S.fsetxattr;
fmeth.getxattr = S.gsetxattr;
fmeth.truncate = S.ftruncate;
fmeth.statfs = S.fstatfs;
fmeth.utimens = S.futimens;
fmeth.utimes = S.futimes;
fmeth.seek = S.lseek;
fmeth.chown = S.fchown;
fmeth.lock = S.flock;
fmeth.pathconf = S.fpathconf;
// netbsd only
fmeth.chflags = S.fchflags;
fmeth.chroot = S.fchroot;
fmeth.sync_range = S.fsync_range;
fmeth.ktrace = S.fktrace;
// no point having fd in name - bsd only
fmeth.extattr_get = S.extattr_get_fd;
fmeth.extattr_set = S.extattr_set_fd;
fmeth.extattr_delete = S.extattr_delete_fd;
fmeth.extattr_list = S.extattr_list_fd;

var function nogc(d) { return ffi.gc(d, null); }

fmeth.nogc = nogc;

// sequence number used by netlink messages
fmeth.seq = function(fd) {
  fd.sequence = fd.sequence + 1;
  return fd.sequence;
};

// TODO note this is not very friendly to user, as will just get EBADF from all calls
function fmeth.close(fd) {
  var fileno = getfd(fd);
  if( fileno == -1 ) { return true; } // already closed
  var ok, err = S.close(fileno);
  fd.filenum = -1; // make sure cannot accidentally close this fd object again
  return ok, err;
}

fmeth.getfd = function(fd) { return fd.filenum; };

t.fd = metatype("struct {int filenum; int sequence;}", {
  __index = fmeth,
  __gc = fmeth.close,
  __new = function(tp, i) {
    return istype(tp, i) || ffi.new(tp, i || -1);
  },
});

S.stdin = t.fd(c.STD.IN)->nogc();
S.stdout = t.fd(c.STD.OUT)->nogc();
S.stderr = t.fd(c.STD.ERR)->nogc();

if( S.mq_open ) { // TODO better test. TODO support in BSD
var mqmeth = {
  close = fmeth.close,
  nogc = nogc,
  getfd = function(fd) { return fd.filenum; },
  getattr = function(mqd, attr) {
    attr = attr || t.mq_attr();
    var ok, err = S.mq_getsetattr(mqd, null, attr);
    if( ! ok ) { return null, err; }
    return attr;
  },
  setattr = function(mqd, attr) {
    if( type(attr) == "number" || type(attr) == "string" ) { attr = {flags = attr}; } // only flags can be set so allow this
    attr = mktype(t.mq_attr, attr);
    return S.mq_getsetattr(mqd, attr, null);
  },
  timedsend = S.mq_timedsend,
  send = function(mqd, msg_ptr, msg_len, msg_prio) { return S.mq_timedsend(mqd, msg_ptr, msg_len, msg_prio); },
  timedreceive = S.mq_timedreceive,
  receive = function(mqd, msg_ptr, msg_len, msg_prio) { return S.mq_timedreceive(mqd, msg_ptr, msg_len, msg_prio); },
};

t.mqd = metatype("struct {mqd_t filenum;}", {
  __index = mqmeth,
  __gc = mqmeth.close,
  __new = function(tp, i) {
    return istype(tp, i) || ffi.new(tp, i || -1);
  },
});
}

// TODO deal with delete twice issue with delete and gc
t.timer = metatype("struct {timer_t timerid[1];}", {
  __index = {
    gettimerp = function(this) { return this.timerid; },
    gettimer = function(this) { return this.timerid[0]; },
    settime = S.timer_settime,
    gettime = S.timer_gettime,
    delete = S.timer_delete,
    getoverrun = S.timer_getoverrun,
  },
//__gc = S.timer_delete,
});

// TODO reinstate this, more like fd is, hence changes to destroy
/*
t.aio_context = metatype("struct {aio_context_t ctx;}", {
  __index = {destroy = S.io_destroy, submit = S.io_submit, getevents = S.io_getevents, cancel = S.io_cancel, nogc = nogc},
  __gc = S.io_destroy
})
*/

return S;

}

return {init = init};


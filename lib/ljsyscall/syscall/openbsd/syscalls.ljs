// OpenBSD specific syscalls

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");

return function(S, hh, c, C, types) {

var ret64, retnum, retfd, retbool, retptr = hh.ret64, hh.retnum, hh.retfd, hh.retbool, hh.retptr;

var ffi = require ("ffi");
var errno = ffi.errno;

var h = require ("syscall.helpers");

var istype, mktype, getfd = h.istype, h.mktype, h.getfd;

var t, pt, s = types.t, types.pt, types.s;

function S.reboot(howto) { return C.reboot(c.RB[howto]); }

// pty functions, using libc ones for now; the libc ones use a database of name to dev mappings
function S.ptsname(fd) {
  var name = ffi.C.ptsname(getfd(fd));
  if( ! name ) { return null; }
  return ffi.string(name);
}

function S.grantpt(fd) { return retbool(ffi.C.grantpt(getfd(fd))); }
function S.unlockpt(fd) { return retbool(ffi.C.unlockpt(getfd(fd))); }

return S;

};


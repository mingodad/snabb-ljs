// OSX specific syscalls

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");

return function(S, hh, c, C, types) {

var ret64, retnum, retfd, retbool, retptr = hh.ret64, hh.retnum, hh.retfd, hh.retbool, hh.retptr;

var ffi = require ("ffi");
var errno = ffi.errno;

var h = require ("syscall.helpers");

var istype, mktype, getfd = h.istype, h.mktype, h.getfd;

var t, pt, s = types.t, types.pt, types.s;

// TODO lutimes is implemented using setattrlist(2) in OSX

function S.grantpt(fd) { return S.ioctl(fd, "TIOCPTYGRANT"); }
function S.unlockpt(fd) { return S.ioctl(fd, "TIOCPTYUNLK"); }
function S.ptsname(fd) {
  var buf = t.buffer(128);
  var ok, err = S.ioctl(fd, "TIOCPTYGNAME", buf);
  if( ! ok ) { return null, err; }
  return ffi.string(buf);
}

function S.mach_absolute_time() { return C.mach_absolute_time(); }
function S.mach_task_self() { return C.mach_task_self_; }
function S.mach_host_self() { return C.mach_host_self(); }
function S.mach_port_deallocate(task, name) { return retbool(C.mach_port_deallocate(task || S.mach_task_self(), name)); }

function S.host_get_clock_service(host, clock_id, clock_serv) {
  clock_serv = clock_serv || t.clock_serv1();
  var ok, err = C.host_get_clock_service(host || S.mach_host_self(), c.CLOCKTYPE[clock_id || "SYSTEM"], clock_serv);
  if( ! ok ) { return null, err; }
  return clock_serv[0];
}

// TODO when mach ports do gc, can add 'clock_serv or S.host_get_clock_service()'
function S.clock_get_time(clock_serv, cur_time) {
  cur_time = cur_time || t.mach_timespec();
  var ok, err = C.clock_get_time(clock_serv, cur_time);
  if( ! ok ) { return null, err; }
  return cur_time;
}

return S;

};


// This mirrors syscall.lua, but some differences

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var ffi = require ("ffi");

var abi = require ("syscall.abi");

abi.rump = true;

var modules = {
  rump = ffi.load("rump", true),
  rumpuser = ffi.load("rumpuser", true),
};

_G[{}] = modules; // if you unload rump kernel crashes are likely, so hang on to them

var unchanged = {
  char = true,
  int = true,
  long = true,
  unsigned = true,
  ["unsigned char"] = true,
  ["unsigned int"] = true,
  ["unsigned long"] = true,
  int8_t = true,
  int16_t = true,
  int32_t = true,
  int64_t = true,
  intptr_t = true,
  uint8_t = true,
  uint16_t = true,
  uint32_t = true,
  uint64_t = true,
  uintptr_t = true,
// same in all OSs at present
  in_port_t = true,
  uid_t = true,
  gid_t = true,
  pid_t = true,
  off_t = true,
  size_t = true,
  ssize_t = true,
  socklen_t = true,
  ["struct in_addr"] = true,
  ["struct in6_addr"] = true,
  ["struct iovec"] = true,
  ["struct iphdr"] = true,
  ["struct udphdr"] = true,
  ["struct ethhdr"] = true,
  ["struct winsize"] = true,
  ["struct {int count; struct iovec iov[?];}"] = true,
};

var function rumpfn(tp) {
  if( unchanged[tp] ) { return tp; }
  if( tp == "void (*)(int, siginfo_t *, void *)" ) { return "void (*)(int, _netbsd_siginfo_t *, void *)"; }
  if( tp == "struct {dev_t dev;}" ) { return "struct {_netbsd_dev_t dev;}"; }
  if( tp == "struct {timer_t timerid[1];}" ) { return "struct {_netbsd_timer_t timerid[1];}"; }
  if( tp == "union sigval" ) { return "union _netbsd_sigval"; }
  if( tp == "struct {int count; struct mmsghdr msg[?];}" ) { return "struct {int count; struct _netbsd_mmsghdr msg[?];}"; }
  if( string.find(tp, "struct") ) {
    return (string.gsub(tp, "struct (%a)", "struct _netbsd_%1"));
  }
  return "_netbsd_" .. tp;
}

var S;

if( abi.types == "linux" ) { // load Linux compat module
  modules.rumpvfs = ffi.load("rumpvfs", true);
  modules.rumpnet = ffi.load("rumpnet", true);
  modules.rumpnetnet = ffi.load("rumpnet_net", true);
  modules.rumpcompat = ffi.load("rumpkern_sys_linux", true);
}

abi.rumpfn = null;

if( abi.host == "netbsd" && abi.types == "netbsd" ) { // running native (NetBSD on NetBSD)
  var SS = require ("syscall");
  var C = require ("syscall.rump.c");
  S = require ("syscall.syscalls").init(C, SS.c, SS.types);
  S.abi, S.c, S.types, S.t = abi, SS.c, SS.types, SS.types.t;
  S = require ("syscall.compat").init(S);
  S = require ("syscall.methods").init(S);
  S.util = require ("syscall.util").init(S);
} else if( abi.types == "linux" ) { // running Linux types, just need to use rump C which it will do if abi.rump set
  S = require ("syscall");
  // TODO lots of syscalls simply don't exist, so make some do ENOSYS
  var function nosys() {
    ffi.errno(S.c.E.NOSYS);
    return -1;
  }
  var C = require ("syscall.rump.c");
  var nolist = {"io_setup"}; // TODO can add more here
  for( _, sys in ipairs(nolist) ) { C[sys] = nosys; }

  // add a few netbsd types so can use mount
  // TODO ideally we would require netbsd.ffitypes but this is somewhat complex now
  ffi.cdef ([=[
typedef uint32_t _netbsd_mode_t;
typedef uint64_t _netbsd_ino_t;
struct _netbsd_ufs_args {
  char *fspec;
};
struct _netbsd_tmpfs_args {
  int ta_version;
  _netbsd_ino_t ta_nodes_max;
  off_t ta_size_max;
  uid_t ta_root_uid;
  gid_t ta_root_gid;
  _netbsd_mode_t ta_root_mode;
};
struct _netbsd_ptyfs_args {
  int version;
  gid_t gid;
  _netbsd_mode_t mode;
  int flags;
};
]=]);

  var addtype = require ("syscall.helpers").addtype;
  var addstructs = {
    ufs_args = "struct _netbsd_ufs_args",
    tmpfs_args = "struct _netbsd_tmpfs_args",
    ptyfs_args = "struct _netbsd_ptyfs_args",
  };
  for( k, v in pairs(addstructs) ) { addtype(S.types, k, v, {}); }
} else if( abi.types == "netbsd" ) { // run NetBSD types on another OS
  abi.rumpfn = rumpfn; // mangle NetBSD type names to avoid collisions
  S = require ("syscall");
} else {
  error ("unsupported ABI");
}

require ("syscall.rump.ffirump");

var t, pt = S.types.t, S.types.pt;

var modinfo = ffi.typeof("struct modinfo");

// TODO make this explcitly refer to NetBSD error codes
var function retbool(ret) {
  if( ret == -1 ) { return null, t.error(); }
  return true;
}

var function retnum(ret) { // return Lua number where double precision ok, eg file ops etc
  ret = tonumber(ret);
  if( ret == -1 ) { return null, t.error(); }
  return ret;
}

S.rump = {};

var h = require ("syscall.helpers");
var octal, multiflags, charflags, swapflags, strflag, atflag, modeflags
  = h.octal, h.multiflags, h.charflags, h.swapflags, h.strflag, h.atflag, h.modeflags;

var c = {};

c.ETFS = strflag ({
  REG = 0,
  BLK = 1,
  CHR = 2,
  DIR = 3,
  DIR_SUBDIRS = 4,
});

c.RUMPUIO = strflag ({
  READ = 0,
  WRITE = 1,
});

c.SIGMODEL = strflag ({
  PANIC = 0,
  IGNORE = 1,
  HOST = 2,
  RAISE = 3,
  RECORD = 4,
});

c.RF = strflag ({
  NONE    = 0x00, // not named, see issue https://github.com/anttikantee/buildrump.sh/issues/19
  FDG     = 0x01,
  CFDG    = 0x02,
});

c.CN_FREECRED = 0x02;
c.ETFS_SIZE_ENDOFF = h.uint64_max;

S.rump.c = c;

// We could also use rump_pub_module_init if loading later
function S.rump.module(s) {
  s = "rump" .. string.gsub(s, "%.", "_");
  var mod = ffi.load(s, true);
  modules[s] = mod;
}

var function loadmodules(ms) {
  var len = #ms;
  var remains = #ms;
  var succeeded = true;
  while( remains > 0 ) {
    succeeded = false;
    for( i = 1, #ms ) {
      var v = ms[i];
      if( v ) {
        v = "rump" .. string.gsub(v, "%.", "_");
        var ok, mod = pcall(ffi.load, v, true);
        if( ok ) {
          modules[v] = mod;
          ms[i] = null;
          succeeded = true;
          --remains    ;
        }
      }
    }
    if( ! succeeded ) { break; }
  }
  if( ! succeeded ) { error ("cannot load rump modules"); }
}

function S.rump.init(ms, ...) { // you must load the factions here eg dev, vfs, net, plus modules
  if( type(ms) == "string" ) { ms = {ms, ...}; }
  if( ms ) { loadmodules(ms); }
  var ok = ffi.C.rump_init();
  if( ok == -1 ) { return null, t.error(); }
  S.abi = abi;
  return S;
}

function S.rump.boot_gethowto() { return retnum(ffi.C.rump_boot_gethowto()); }
function S.rump.boot_sethowto(how) { ffi.C.rump_boot_sethowto(how); }
function S.rump.boot_setsigmodel(model) { ffi.C.rump_boot_etsigmodel(model); }
function S.rump.schedule() { ffi.C.rump_schedule(); }
function S.rump.unschedule() { ffi.C.rump_unschedule(); }
function S.rump.printevcnts() { ffi.C.rump_printevcnts(); }
function S.rump.daemonize_begin() { return retbool(ffi.C.rump_daemonize_begin()); }
function S.rump.daemonize_done(err) { return retbool(ffi.C.rump_daemonize_done(err)); }
function S.rump.init_server(url) { return retbool(ffi.C.rump_init_server(url)); }

function S.rump.i_know_what_i_am_doing_sysent_usenative() {
  ffi.C.rump_i_know_what_i_am_doing_with_sysents = 1;
  ffi.C.rump_pub_lwproc_sysent_usenative();
}

function S.rump.getversion() { return ffi.C.rump_pub_getversion(); }

// etfs functions
function S.rump.etfs_register(key, hostpath, ftype, begin, size) {
  var ret;
  ftype = S.rump.c.ETFS[ftype];
  if( begin ) {
    ret = ffi.C.rump_pub_etfs_register_withsize(key, hostpath, ftype, begin, size);
  } else {
    ret = ffi.C.rump_pub_etfs_register(key, hostpath, ftype);
  }
  return retbool(ret);
}
function S.rump.etfs_remove(key) {
  return retbool(ffi.C.rump_pub_etfs_remove(key));
}

// threading
function S.rump.rfork(flags) { return retbool(ffi.C.rump_pub_lwproc_rfork(S.rump.c.RF[flags])); }
function S.rump.newlwp(pid) { return retbool(ffi.C.rump_pub_lwproc_newlwp(pid)); }
function S.rump.switchlwp(lwp) { ffi.C.rump_pub_lwproc_switch(lwp); }
function S.rump.releaselwp() { ffi.C.rump_pub_lwproc_releaselwp(); }
function S.rump.curlwp() { return ffi.C.rump_pub_lwproc_curlwp(); }

// revert so can load non rump again
abi.rump = false;
abi.os = abi.host;

S.__rump = true;

return S.rump;
 


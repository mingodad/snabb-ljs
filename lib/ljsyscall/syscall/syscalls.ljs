// choose correct syscalls for OS, plus shared calls
// note that where functions are identical if present but may be missing they can also go here
// note that OS specific calls are loaded at the end so they may override generic calls here

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");
var ffi = require ("ffi");
var bit = require ("syscall.bit");

var h = require ("syscall.helpers");
var err64 = h.err64;
var errpointer = h.errpointer;
var getfd, istype, mktype, reviter = h.getfd, h.istype, h.mktype, h.reviter;

var function init(C, c, types) {

// this could be an arguments, fcntl syscall is a function of this
var fcntl = require("syscall." .. abi.os .. ".fcntl").init(types);

var errno = ffi.errno;

var t, pt, s = types.t, types.pt, types.s;

var S = {};

var function getdev(dev) {
  if( type(dev) == "table" ) { return t.device(dev).dev; }
  if( ffi.istype(t.device, dev) ) { dev = dev.dev; }
  return dev;
}

// return helpers.

// 64 bit return helpers. Only use for lseek in fact; we use tonumber but remove if you need files over 56 bits long
// TODO only luaffi needs the cast as wont compare to number; hopefully fixed in future with 5.3 or a later luaffi.
var function ret64(ret, err) {
  if( ret == err64 ) { return null, t.error(err || errno()); }
  return tonumber(ret);
}

var function retnum(ret, err) { // return Lua number where double precision ok, eg file ops etc
  ret = tonumber(ret);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ret;
}

var function retfd(ret, err) {
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return t.fd(ret);
}

// used for no return value, return true for use of assert
var function retbool(ret, err) {
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return true;
}

// used for pointer returns, -1 is failure
var function retptr(ret, err) {
  if( ret == errpointer ) { return null, t.error(err || errno()); }
  return ret;
}

// generic iterator; this counts down to 0 so need no closure
var function retiter(ret, err, array) {
  ret = tonumber(ret);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return reviter, array, ret;
}

// generic system calls
function S.close(fd) {
  if( fd == getfd(fd) ) { // fd number
    return retbool(C.close(getfd(fd)));
  } else {                    // fd object: avoid mulitple close
    return fd->close();
  }
}
function S.chdir(path) { return retbool(C.chdir(path)); }
function S.fchdir(fd) { return retbool(C.fchdir(getfd(fd))); }
function S.fchmod(fd, mode) { return retbool(C.fchmod(getfd(fd), c.MODE[mode])); }
function S.fchown(fd, owner, group) { return retbool(C.fchown(getfd(fd), owner || -1, group || -1)); }
function S.lchown(path, owner, group) { return retbool(C.lchown(path, owner || -1, group || -1)); }
function S.chroot(path) { return retbool(C.chroot(path)); }
function S.umask(mask) { return C.umask(c.MODE[mask]); }
function S.sync() { C.sync(); }
function S.flock(fd, operation) { return retbool(C.flock(getfd(fd), c.LOCK[operation])); }
// TODO read should have consistent return type but then will differ from other calls.
function S.read(fd, buf, count) {
  if( buf ) { return retnum(C.read(getfd(fd), buf, count || #buf || 4096)); } // user supplied a buffer, standard usage
  count = count || 4096;
  buf = t.buffer(count);
  var ret, err = tonumber(C.read(getfd(fd), buf, count));
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ffi.string(buf, ret); // user gets a string back, can get length from #string
}
function S.readv(fd, iov) {
  iov = mktype(t.iovecs, iov);
  return retnum(C.readv(getfd(fd), iov.iov, #iov));
}
function S.write(fd, buf, count) { return retnum(C.write(getfd(fd), buf, count || #buf)); }
function S.writev(fd, iov) {
  iov = mktype(t.iovecs, iov);
  return retnum(C.writev(getfd(fd), iov.iov, #iov));
}
function S.pread(fd, buf, count, offset) { return retnum(C.pread(getfd(fd), buf, count, offset)); }
function S.pwrite(fd, buf, count, offset) { return retnum(C.pwrite(getfd(fd), buf, count || #buf, offset)); }
if( C.preadv && C.pwritev ) { // these are missing in eg OSX
  function S.preadv(fd, iov, offset) {
    iov = mktype(t.iovecs, iov);
    return retnum(C.preadv(getfd(fd), iov.iov, #iov, offset));
  }
  function S.pwritev(fd, iov, offset) {
    iov = mktype(t.iovecs, iov);
    return retnum(C.pwritev(getfd(fd), iov.iov, #iov, offset));
  }
}
function S.lseek(fd, offset, whence) {
  return ret64(C.lseek(getfd(fd), offset || 0, c.SEEK[whence || c.SEEK.SET]));
}
if( C.readlink ) {
  function S.readlink(path, buffer, size) {
    size = size || c.PATH_MAX;
    buffer = buffer || t.buffer(size);
    var ret, err = tonumber(C.readlink(path, buffer, size));
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return ffi.string(buffer, ret);
  }
} else {
  function S.readlink(path, buffer, size) {
    size = size || c.PATH_MAX;
    buffer = buffer || t.buffer(size);
    var ret, err = tonumber(C.readlinkat(c.AT_FDCWD.FDCWD, path, buffer, size));
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return ffi.string(buffer, ret);
  }
}
function S.fsync(fd) { return retbool(C.fsync(getfd(fd))); }
if( C.stat ) {
  function S.stat(path, buf) {
    if( ! buf ) { buf = t.stat(); }
    var ret = C.stat(path, buf);
    if( ret == -1 ) { return null, t.error(); }
    return buf;
  }
} else {
  function S.stat(path, buf) {
    if( ! buf ) { buf = t.stat(); }
    var ret = C.fstatat(c.AT_FDCWD.FDCWD, path, buf, 0);
    if( ret == -1 ) { return null, t.error(); }
    return buf;
  }
}
if( C.lstat ) {
  function S.lstat(path, buf) {
    if( ! buf ) { buf = t.stat(); }
    var ret, err = C.lstat(path, buf);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return buf;
  }
} else {
  function S.lstat(path, buf) {
    if( ! buf ) { buf = t.stat(); }
    var ret, err = C.fstatat(c.AT_FDCWD.FDCWD, path, buf, c.AT.SYMLINK_NOFOLLOW);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return buf;
  }
}
function S.fstat(fd, buf) {
  if( ! buf ) { buf = t.stat(); }
  var ret, err = C.fstat(getfd(fd), buf);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return buf;
}
function S.truncate(path, length) { return retbool(C.truncate(path, length)); }
function S.ftruncate(fd, length) { return retbool(C.ftruncate(getfd(fd), length)); }

// recent Linux does not have open, rmdir, unlink etc any more as syscalls
if( C.open ) {
  function S.open(pathname, flags, mode) { return retfd(C.open(pathname, c.O[flags], c.MODE[mode])); }
} else {
  function S.open(pathname, flags, mode) { return retfd(C.openat(c.AT_FDCWD.FDCWD, pathname, c.O[flags], c.MODE[mode])); }
}
if( C.rmdir ) {
  function S.rmdir(path) { return retbool(C.rmdir(path)); }
} else {
  function S.rmdir(path) { return retbool(C.unlinkat(c.AT_FDCWD.FDCWD, path, c.AT.REMOVEDIR)); }
}
if( C.unlink ) {
  function S.unlink(pathname) { return retbool(C.unlink(pathname)); }
} else {
  function S.unlink(path) { return retbool(C.unlinkat(c.AT_FDCWD.FDCWD, path, 0)); }
}
if( C.chmod ) {
  function S.chmod(path, mode) { return retbool(C.chmod(path, c.MODE[mode])); }
} else {
  function S.chmod(path, mode) { return retbool(C.fchmodat(c.AT_FDCWD.FDCWD, path, c.MODE[mode], 0)); }
}
if( C.access ) {
  function S.access(pathname, mode) { return retbool(C.access(pathname, c.OK[mode])); }
} else {
  function S.access(pathname, mode) { return retbool(C.faccessat(c.AT_FDCWD.FDCWD, pathname, c.OK[mode], 0)); }
}
if( C.chown ) {
  function S.chown(path, owner, group) { return retbool(C.chown(path, owner || -1, group || -1)); }
} else {
  function S.chown(path, owner, group) { return retbool(C.fchownat(c.AT_FDCWD.FDCWD, path, owner || -1, group || -1, 0)); }
}
if( C.mkdir ) {
  function S.mkdir(path, mode) { return retbool(C.mkdir(path, c.MODE[mode])); }
} else {
  function S.mkdir(path, mode) { return retbool(C.mkdirat(c.AT_FDCWD.FDCWD, path, c.MODE[mode])); }
}
if( C.symlink ) {
  function S.symlink(oldpath, newpath) { return retbool(C.symlink(oldpath, newpath)); }
} else {
  function S.symlink(oldpath, newpath) { return retbool(C.symlinkat(oldpath, c.AT_FDCWD.FDCWD, newpath)); }
}
if( C.link ) {
  function S.link(oldpath, newpath) { return retbool(C.link(oldpath, newpath)); }
} else {
  function S.link(oldpath, newpath) { return retbool(C.linkat(c.AT_FDCWD.FDCWD, oldpath, c.AT_FDCWD.FDCWD, newpath, 0)); }
}
if( C.rename ) {
  function S.rename(oldpath, newpath) { return retbool(C.rename(oldpath, newpath)); }
} else {
  function S.rename(oldpath, newpath) { return retbool(C.renameat(c.AT_FDCWD.FDCWD, oldpath, c.AT_FDCWD.FDCWD, newpath)); }
}
if( C.mknod ) {
  function S.mknod(pathname, mode, dev) { return retbool(C.mknod(pathname, c.S_I[mode], getdev(dev) || 0)); }
} else {
  function S.mknod(pathname, mode, dev) { return retbool(C.mknodat(c.AT_FDCWD.FDCWD, pathname, c.S_I[mode], getdev(dev) || 0)); }
}

var function sproto(domain, protocol) { // helper function to lookup protocol type depending on domain TODO table?
  protocol = protocol || 0;
  if( domain == c.AF.NETLINK ) { return c.NETLINK[protocol]; }
  return c.IPPROTO[protocol];
}

function S.socket(domain, stype, protocol) {
  domain = c.AF[domain];
  return retfd(C.socket(domain, c.SOCK[stype], sproto(domain, protocol)));
}
function S.socketpair(domain, stype, protocol, sv2) {
  domain = c.AF[domain];
  sv2 = sv2 || t.int2();
  var ret, err = C.socketpair(domain, c.SOCK[stype], sproto(domain, protocol), sv2);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return true, null, t.fd(sv2[0]), t.fd(sv2[1]);
}

function S.dup(oldfd) { return retfd(C.dup(getfd(oldfd))); }
if( C.dup2 ) { function S.dup2(oldfd, newfd) { return retfd(C.dup2(getfd(oldfd), getfd(newfd))); } }
if( C.dup3 ) { function S.dup3(oldfd, newfd, flags) { return retfd(C.dup3(getfd(oldfd), getfd(newfd), flags || 0)); } }

function S.sendto(fd, buf, count, flags, addr, addrlen) {
  if( ! addr ) { addrlen = 0; }
  var saddr = pt.sockaddr(addr);
  return retnum(C.sendto(getfd(fd), buf, count || #buf, c.MSG[flags], saddr, addrlen || #addr));
}
function S.recvfrom(fd, buf, count, flags, addr, addrlen) {
  var saddr;
  if( addr == false ) {
    addr = null;
    addrlen = null;
  } else {
    if( addr ) {
      addrlen = addrlen || #addr;
    } else {
      addr = t.sockaddr_storage();
      addrlen = addrlen || s.sockaddr_storage;
    }
    if( type(addrlen) == "number" ) { addrlen = t.socklen1(addrlen); }
    saddr = pt.sockaddr(addr);
  }
  var ret, err = C.recvfrom(getfd(fd), buf, count || #buf, c.MSG[flags], saddr, addrlen); // TODO addrlen 0 here???
  ret = tonumber(ret);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( addr ) { return ret, null, t.sa(addr, addrlen[0]); } else { return ret; }
}
function S.sendmsg(fd, msg, flags) {
  if( ! msg ) { // send a single byte message, eg enough to send credentials
    var buf1 = t.buffer(1);
    var io = t.iovecs({{buf1, 1}});
    msg = t.msghdr({msg_iov = io.iov, msg_iovlen = #io});
  }
  return retnum(C.sendmsg(getfd(fd), msg, c.MSG[flags]));
}
function S.recvmsg(fd, msg, flags) { return retnum(C.recvmsg(getfd(fd), msg, c.MSG[flags])); }

// TODO better handling of msgvec, create one structure/table
if( C.sendmmsg ) {
  function S.sendmmsg(fd, msgvec, flags) {
    msgvec = mktype(t.mmsghdrs, msgvec);
    return retbool(C.sendmmsg(getfd(fd), msgvec.msg, msgvec.count, c.MSG[flags]));
  }
}
if( C.recvmmsg ) {
  function S.recvmmsg(fd, msgvec, flags, timeout) {
    if( timeout ) { timeout = mktype(t.timespec, timeout); }
    msgvec = mktype(t.mmsghdrs, msgvec);
    return retbool(C.recvmmsg(getfd(fd), msgvec.msg, msgvec.count, c.MSG[flags], timeout));
  }
}

// TODO {get,set}sockopt may need better type handling see new unfinished sockopt file, plus not always c.SO[]
function S.setsockopt(fd, level, optname, optval, optlen) {
   // allocate buffer for user, from Lua type if know how, int and bool so far
  if( ! optlen && type(optval) == 'boolean' ) { optval = h.booltoc(optval); }
  if( ! optlen && type(optval) == 'number' ) {
    optval = t.int1(optval);
    optlen = s.int;
  }
  return retbool(C.setsockopt(getfd(fd), c.SOL[level], c.SO[optname], optval, optlen));
}
function S.getsockopt(fd, level, optname, optval, optlen) {
  if( ! optval ) { optval, optlen = t.int1(), s.int; }
  optlen = optlen || #optval;
  var len = t.socklen1(optlen);
  var ret, err = C.getsockopt(getfd(fd), c.SOL[level], c.SO[optname], optval, len);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( len[0] != optlen ) { error("incorrect optlen for getsockopt: set " .. optlen .. " got " .. len[0]); }
  return optval[0]; // TODO will not work if struct, eg see netfilter
}
function S.bind(sockfd, addr, addrlen) {
  var saddr = pt.sockaddr(addr);
  return retbool(C.bind(getfd(sockfd), saddr, addrlen || #addr));
}
function S.listen(sockfd, backlog) { return retbool(C.listen(getfd(sockfd), backlog || c.SOMAXCONN)); }
function S.connect(sockfd, addr, addrlen) {
  var saddr = pt.sockaddr(addr);
  return retbool(C.connect(getfd(sockfd), saddr, addrlen || #addr));
}
function S.accept(sockfd, addr, addrlen) {
  var saddr = pt.sockaddr(addr);
  if( addr ) { addrlen = addrlen || t.socklen1(); }
  return retfd(C.accept(getfd(sockfd), saddr, addrlen));
}
function S.getsockname(sockfd, addr, addrlen) {
  addr = addr || t.sockaddr_storage();
  addrlen = addrlen || t.socklen1(#addr);
  var saddr = pt.sockaddr(addr);
  var ret, err = C.getsockname(getfd(sockfd), saddr, addrlen);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return t.sa(addr, addrlen[0]);
}
function S.getpeername(sockfd, addr, addrlen) {
  addr = addr || t.sockaddr_storage();
  addrlen = addrlen || t.socklen1(#addr);
  var saddr = pt.sockaddr(addr);
  var ret, err = C.getpeername(getfd(sockfd), saddr, addrlen);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return t.sa(addr, addrlen[0]);
}
function S.shutdown(sockfd, how) { return retbool(C.shutdown(getfd(sockfd), c.SHUT[how])); }
if( C.poll ) {
  function S.poll(fds, timeout) { return retnum(C.poll(fds.pfd, #fds, timeout || -1)); }
}
// TODO rework fdset interface, see issue #71
// fdset handlers
var function mkfdset(fds, nfds) { // should probably check fd is within range (1024), or just expand structure size
  var set = t.fdset();
  for( i, v in ipairs(fds) ) {
    var fd = tonumber(getfd(v));
    if( fd + 1 > nfds ) { nfds = fd + 1; }
    var fdelt = bit.rshift(fd, 5); // always 32 bits
    set.fds_bits[fdelt] = bit.bor(set.fds_bits[fdelt], bit.lshift(1, fd % 32)); // always 32 bit words
  }
  return set, nfds;
}

var function fdisset(fds, set) {
  var f = {};
  for( i, v in ipairs(fds) ) {
    var fd = tonumber(getfd(v));
    var fdelt = bit.rshift(fd, 5); // always 32 bits
    if( bit.band(set.fds_bits[fdelt], bit.lshift(1, fd % 32)) != 0 ) { table.insert(f, v); } // careful not to duplicate fd objects
  }
  return f;
}

// TODO convert to metatype. Problem is how to deal with nfds
if( C.select ) {
function S.select(sel, timeout) { // note same structure as returned
  var r, w, e;
  var nfds = 0;
  if( timeout ) { timeout = mktype(t.timeval, timeout); }
  r, nfds = mkfdset(sel.readfds || {}, nfds || 0);
  w, nfds = mkfdset(sel.writefds || {}, nfds);
  e, nfds = mkfdset(sel.exceptfds || {}, nfds);
  var ret, err = C.select(nfds, r, w, e, timeout);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return {readfds = fdisset(sel.readfds || {}, r), writefds = fdisset(sel.writefds || {}, w),
          exceptfds = fdisset(sel.exceptfds || {}, e), count = tonumber(ret)};
}
} else {
  function S.select(sel, timeout) {
    if( timeout ) { timeout = mktype(t.timespec, timeout / 1000); }
    return S.pselect(sel, timeout);
  }
}

// TODO note that in Linux syscall modifies timeout, which is non standard, like ppoll
function S.pselect(sel, timeout, set) { // note same structure as returned
  var r, w, e;
  var nfds = 0;
  if( timeout ) { timeout = mktype(t.timespec, timeout); }
  if( set ) { set = mktype(t.sigset, set); }
  r, nfds = mkfdset(sel.readfds || {}, nfds || 0);
  w, nfds = mkfdset(sel.writefds || {}, nfds);
  e, nfds = mkfdset(sel.exceptfds || {}, nfds);
  var ret, err = C.pselect(nfds, r, w, e, timeout, set);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return {readfds = fdisset(sel.readfds || {}, r), writefds = fdisset(sel.writefds || {}, w),
          exceptfds = fdisset(sel.exceptfds || {}, e), count = tonumber(ret)};
}

function S.getuid() { return C.getuid(); }
function S.geteuid() { return C.geteuid(); }
function S.getpid() { return C.getpid(); }
function S.getppid() { return C.getppid(); }
function S.getgid() { return C.getgid(); }
function S.getegid() { return C.getegid(); }
function S.setuid(uid) { return retbool(C.setuid(uid)); }
function S.setgid(gid) { return retbool(C.setgid(gid)); }
function S.seteuid(uid) { return retbool(C.seteuid(uid)); }
function S.setegid(gid) { return retbool(C.setegid(gid)); }
function S.getsid(pid) { return retnum(C.getsid(pid || 0)); }
function S.setsid() { return retnum(C.setsid()); }
function S.setpgid(pid, pgid) { return retbool(C.setpgid(pid || 0, pgid || 0)); }
function S.getpgid(pid) { return retnum(C.getpgid(pid || 0)); }
if( C.getpgrp ) {
  function S.getpgrp() { return retnum(C.getpgrp()); }
} else {
  function S.getpgrp() { return retnum(C.getpgid(0)); }
}
function S.getgroups() {
  var size = C.getgroups(0, null); // note for BSD could use NGROUPS_MAX instead
  if( size == -1 ) { return null, t.error(); }
  var groups = t.groups(size);
  var ret = C.getgroups(size, groups.list);
  if( ret == -1 ) { return null, t.error(); }
  return groups;
}
function S.setgroups(groups) {
  if( type(groups) == "table" ) { groups = t.groups(groups); }
  return retbool(C.setgroups(groups.count, groups.list));
}

function S.sigprocmask(how, set, oldset) {
  oldset = oldset || t.sigset();
  if( ! set ) { how = c.SIGPM.SETMASK; } // value does not matter if set nil, just returns old set
  var ret, err = C.sigprocmask(c.SIGPM[how], t.sigset(set), oldset);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return oldset;
}
function S.sigpending() {
  var set = t.sigset();
  var ret, err = C.sigpending(set);
  if( ret == -1 ) { return null, t.error(err || errno()); }
 return set;
}
function S.sigsuspend(mask) { return retbool(C.sigsuspend(t.sigset(mask))); }
function S.kill(pid, sig) { return retbool(C.kill(pid, c.SIG[sig])); }

// _exit is the real exit syscall, or whatever is suitable if overridden in c.lua; libc.lua may override
function S.exit(status) { C._exit(c.EXIT[status || 0]); }

function S.fcntl(fd, cmd, arg) {
  cmd = c.F[cmd];
  if( fcntl.commands[cmd] ) { arg = fcntl.commands[cmd](arg); }
  var ret, err = C.fcntl(getfd(fd), cmd, pt.void(arg || 0));
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( fcntl.ret[cmd] ) { return fcntl.ret[cmd](ret, arg); }
  return true;
}

// TODO return metatype that has length and can gc?
function S.mmap(addr, length, prot, flags, fd, offset) {
  return retptr(C.mmap(addr, length, c.PROT[prot], c.MAP[flags], getfd(fd || -1), offset || 0));
}
function S.munmap(addr, length) {
  return retbool(C.munmap(addr, length));
}
function S.msync(addr, length, flags) { return retbool(C.msync(addr, length, c.MSYNC[flags])); }
function S.mlock(addr, len) { return retbool(C.mlock(addr, len)); }
function S.munlock(addr, len) { return retbool(C.munlock(addr, len)); }
function S.munlockall() { return retbool(C.munlockall()); }
function S.madvise(addr, length, advice) { return retbool(C.madvise(addr, length, c.MADV[advice])); }

function S.ioctl(d, request, argp) {
  var read, singleton = false, false;
  var name = request;
  if( type(name) == "string" ) {
    request = c.IOCTL[name];
  }
  if( type(request) == "table" ) {
    var write = request.write;
    var tp = request.type;
    read = request.read;
    singleton = request.singleton;
    request = request.number;
    if( type(argp) != "string" && type(argp) != "cdata" && type != "userdata" ) {
      if( write ) {
        if( ! argp ) { error("no argument supplied for ioctl " .. name); }
        argp = mktype(tp, argp);
      }
      if( read ) {
        argp = argp || tp();
      }
    }
  } else { // some sane defaults if no info
    if( type(request) == "table" ) { request = request.number; }
    if( type(argp) == "string" ) { argp = pt.char(argp); }
    if( type(argp) == "number" ) { argp = t.int1(argp); }
  }
  var ret, err = C.ioctl(getfd(d), request, argp);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( read && singleton ) { return argp[0]; }
  if( read ) { return argp; }
  return true; // will need override for few linux ones that return numbers
}

if( C.pipe ) {
  function S.pipe(fd2) {
    fd2 = fd2 || t.int2();
    var ret, err = C.pipe(fd2);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return true, null, t.fd(fd2[0]), t.fd(fd2[1]);
  }
} else {
  function S.pipe(fd2) {
    fd2 = fd2 || t.int2();
    var ret, err = C.pipe2(fd2, 0);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return true, null, t.fd(fd2[0]), t.fd(fd2[1]);
  }
}

if( C.gettimeofday ) {
  function S.gettimeofday(tv) {
    tv = tv || t.timeval(); // note it is faster to pass your own tv if you call a lot
    var ret, err = C.gettimeofday(tv, null);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return tv;
  }
}

if( C.settimeofday ) {
  function S.settimeofday(tv) { return retbool(C.settimeofday(tv, null)); }
}

function S.getrusage(who, ru) {
  ru = ru || t.rusage();
  var ret, err = C.getrusage(c.RUSAGE[who], ru);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ru;
}

if( C.fork ) {
  function S.fork() { return retnum(C.fork()); }
} else {
  function S.fork() { return retnum(C.clone(c.SIG.CHLD, 0)); }
}

function S.execve(filename, argv, envp) {
  var cargv = t.string_array(#argv + 1, argv || {});
  cargv[#argv] = null; // LuaJIT does not zero rest of a VLA
  var cenvp = t.string_array(#envp + 1, envp || {});
  cenvp[#envp] = null;
  return retbool(C.execve(filename, cargv, cenvp));
}

// man page says obsolete for Linux, but implemented and useful for compatibility
function S.wait4(pid, options, ru, status) { // note order of arguments changed as rarely supply status (as waitpid)
  if( ru == false ) { ru = null; } else { ru = ru || t.rusage(); } // false means no allocation
  status = status || t.int1();
  var ret, err = C.wait4(c.WAIT[pid], status, c.W[options], ru);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ret, null, t.waitstatus(status[0]), ru;
}

if( C.waitpid ) {
  function S.waitpid(pid, options, status) { // note order of arguments changed as rarely supply status
    status = status || t.int1();
    var ret, err = C.waitpid(c.WAIT[pid], status, c.W[options]);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return ret, null, t.waitstatus(status[0]);
  }
}

if( S.waitid ) {
  function S.waitid(idtype, id, options, infop) { // note order of args, as usually dont supply infop
    if( ! infop ) { infop = t.siginfo(); }
    var ret, err = C.waitid(c.P[idtype], id || 0, infop, c.W[options]);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return infop;
  }
}

function S.setpriority(which, who, prio) { return retbool(C.setpriority(c.PRIO[which], who || 0, prio)); }
// Linux overrides getpriority as it offsets return values so that they are not negative
function S.getpriority(which, who) {
  errno(0);
  var ret, err = C.getpriority(c.PRIO[which], who || 0);
  if( ret == -1 && (err || errno()) != 0 ) { return null, t.error(err || errno()); }
  return ret;
}

// these may not always exist, but where they do they have the same interface
if( C.creat ) {
  function S.creat(pathname, mode) { return retfd(C.creat(pathname, c.MODE[mode])); }
}
if( C.pipe2 ) {
  function S.pipe2(flags, fd2) {
    fd2 = fd2 || t.int2();
    var ret, err = C.pipe2(fd2, c.OPIPE[flags]);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return true, null, t.fd(fd2[0]), t.fd(fd2[1]);
  }
}
if( C.mlockall ) {
  function S.mlockall(flags) { return retbool(C.mlockall(c.MCL[flags])); }
}
if( C.linkat ) {
  function S.linkat(olddirfd, oldpath, newdirfd, newpath, flags) {
    return retbool(C.linkat(c.AT_FDCWD[olddirfd], oldpath, c.AT_FDCWD[newdirfd], newpath, c.AT[flags]));
  }
}
if( C.symlinkat ) {
  function S.symlinkat(oldpath, newdirfd, newpath) { return retbool(C.symlinkat(oldpath, c.AT_FDCWD[newdirfd], newpath)); }
}
if( C.unlinkat ) {
  function S.unlinkat(dirfd, path, flags) { return retbool(C.unlinkat(c.AT_FDCWD[dirfd], path, c.AT[flags])); }
}
if( C.renameat ) {
  function S.renameat(olddirfd, oldpath, newdirfd, newpath) {
    return retbool(C.renameat(c.AT_FDCWD[olddirfd], oldpath, c.AT_FDCWD[newdirfd], newpath));
  }
}
if( C.mkdirat ) {
  function S.mkdirat(fd, path, mode) { return retbool(C.mkdirat(c.AT_FDCWD[fd], path, c.MODE[mode])); }
}
if( C.fchownat ) {
  function S.fchownat(dirfd, path, owner, group, flags) {
    return retbool(C.fchownat(c.AT_FDCWD[dirfd], path, owner || -1, group || -1, c.AT[flags]));
  }
}
if( C.faccessat ) {
  function S.faccessat(dirfd, pathname, mode, flags) {
    return retbool(C.faccessat(c.AT_FDCWD[dirfd], pathname, c.OK[mode], c.AT[flags]));
  }
}
if( C.readlinkat ) {
  function S.readlinkat(dirfd, path, buffer, size) {
    size = size || c.PATH_MAX;
    buffer = buffer || t.buffer(size);
    var ret, err = C.readlinkat(c.AT_FDCWD[dirfd], path, buffer, size);
    ret = tonumber(ret);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return ffi.string(buffer, ret);
  }
}
if( C.mknodat ) {
  function S.mknodat(fd, pathname, mode, dev) {
    return retbool(C.mknodat(c.AT_FDCWD[fd], pathname, c.S_I[mode], getdev(dev) || 0));
  }
}
if( C.utimensat ) {
  function S.utimensat(dirfd, path, ts, flags) {
    if( ts ) { ts = t.timespec2(ts); } // TODO use mktype?
    return retbool(C.utimensat(c.AT_FDCWD[dirfd], path, ts, c.AT[flags]));
  }
}
if( C.fstatat ) {
  function S.fstatat(fd, path, buf, flags) {
    if( ! buf ) { buf = t.stat(); }
    var ret, err = C.fstatat(c.AT_FDCWD[fd], path, buf, c.AT[flags]);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return buf;
  }
}
if( C.fchmodat ) {
  function S.fchmodat(dirfd, pathname, mode, flags) {
    return retbool(C.fchmodat(c.AT_FDCWD[dirfd], pathname, c.MODE[mode], c.AT[flags]));
  }
}
if( C.openat ) {
  function S.openat(dirfd, pathname, flags, mode) {
    return retfd(C.openat(c.AT_FDCWD[dirfd], pathname, c.O[flags], c.MODE[mode]));
  }
}

if( C.fchroot ) {
  function S.fchroot(fd) { return retbool(C.fchroot(getfd(fd))); }
}
if( C.lchmod ) {
  function S.lchmod(path, mode) { return retbool(C.lchmod(path, c.MODE[mode])); }
}

if( C.fdatasync ) {
  function S.fdatasync(fd) { return retbool(C.fdatasync(getfd(fd))); }
}
// Linux does not have mkfifo syscalls, emulated
if( C.mkfifo ) {
  function S.mkfifo(pathname, mode) { return retbool(C.mkfifo(pathname, c.S_I[mode])); }
}
if( C.mkfifoat ) {
  function S.mkfifoat(dirfd, pathname, mode) { return retbool(C.mkfifoat(c.AT_FDCWD[dirfd], pathname, c.S_I[mode])); }
}
if( C.utimes ) {
  function S.utimes(filename, ts) {
    if( ts ) { ts = t.timeval2(ts); }
    return retbool(C.utimes(filename, ts));
  }
}
if( C.lutimes ) {
  function S.lutimes(filename, ts) {
    if( ts ) { ts = t.timeval2(ts); }
    return retbool(C.lutimes(filename, ts));
  }
}
if( C.futimes ) {
  function S.futimes(fd, ts) {
    if( ts ) { ts = t.timeval2(ts); }
    return retbool(C.futimes(getfd(fd), ts));
  }
}

if( C.getdents ) {
  function S.getdents(fd, buf, size) {
    size = size || 4096; // may have to be equal to at least block size of fs
    buf = buf || t.buffer(size);
    var ret, err = C.getdents(getfd(fd), buf, size);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    if( ret == 0 ) { return null, null; }
    return t.dirents(buf, ret);
  }
}
if( C.futimens ) {
  function S.futimens(fd, ts) {
    if( ts ) { ts = t.timespec2(ts); }
    return retbool(C.futimens(getfd(fd), ts));
  }
}
if( C.accept4 ) {
  function S.accept4(sockfd, addr, addrlen, flags) {
    var saddr = pt.sockaddr(addr);
    if( addr ) { addrlen = addrlen || t.socklen1(); }
    return retfd(C.accept4(getfd(sockfd), saddr, addrlen, c.SOCK[flags]));
  }
}
if( C.sigaction ) {
  function S.sigaction(signum, handler, oldact) {
    if( type(handler) == "string" || type(handler) == "function" ) {
      handler = {handler = handler, mask = "", flags = 0}; // simple case like signal
    }
    if( handler ) { handler = mktype(t.sigaction, handler); }
    return retbool(C.sigaction(c.SIG[signum], handler, oldact));
  }
}
if( C.getitimer ) {
  function S.getitimer(which, value) {
    value = value || t.itimerval();
    var ret, err = C.getitimer(c.ITIMER[which], value);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return value;
  }
}
if( C.setitimer ) {
  function S.setitimer(which, it, oldtime) {
    oldtime = oldtime || t.itimerval();
    var ret, err = C.setitimer(c.ITIMER[which], mktype(t.itimerval, it), oldtime);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return oldtime;
  }
}
if( C.clock_getres ) {
  function S.clock_getres(clk_id, ts) {
    ts = ts || t.timespec();
    var ret, err = C.clock_getres(c.CLOCK[clk_id], ts);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return ts;
  }
}
if( C.clock_gettime ) {
  function S.clock_gettime(clk_id, ts) {
    ts = ts || t.timespec();
    var ret, err = C.clock_gettime(c.CLOCK[clk_id], ts);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return ts;
  }
}
if( C.clock_settime ) {
  function S.clock_settime(clk_id, ts) {
    ts = mktype(t.timespec, ts);
    return retbool(C.clock_settime(c.CLOCK[clk_id], ts));
  }
}
if( C.clock_nanosleep ) {
  function S.clock_nanosleep(clk_id, flags, req, rem) {
    rem = rem || t.timespec();
    var ret, err = C.clock_nanosleep(c.CLOCK[clk_id], c.TIMER[flags || 0], mktype(t.timespec, req), rem);
    if( ret == -1 ) {
      if( (err || errno()) == c.E.INTR ) { return true, null, rem; } else { return null, t.error(err || errno()); }
    }
    return true; // no time remaining
  }
}

if( C.timer_create ) {
  function S.timer_create(clk_id, sigev, timerid) {
    timerid = timerid || t.timer();
    if( sigev ) { sigev = mktype(t.sigevent, sigev); }
    var ret, err = C.timer_create(c.CLOCK[clk_id], sigev, timerid->gettimerp());
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return timerid;
  }
  function S.timer_delete(timerid) { return retbool(C.timer_delete(timerid->gettimer())); }
  function S.timer_settime(timerid, flags, new_value, old_value) {
    if( old_value != false ) { old_value = old_value || t.itimerspec(); } else { old_value = null; }
    new_value = mktype(t.itimerspec, new_value);
    var ret, err = C.timer_settime(timerid->gettimer(), c.TIMER[flags], new_value, old_value);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return true, null, old_value;
  }
  function S.timer_gettime(timerid, curr_value) {
    curr_value = curr_value || t.itimerspec();
    var ret, err = C.timer_gettime(timerid->gettimer(), curr_value);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    return curr_value;
  }
  function S.timer_getoverrun(timerid) { return retnum(C.timer_getoverrun(timerid->gettimer())); }
}

// legacy in many OSs, implemented using recvfrom, sendto
if( C.send ) {
  function S.send(fd, buf, count, flags) { return retnum(C.send(getfd(fd), buf, count, c.MSG[flags])); }
}
if( C.recv ) {
  function S.recv(fd, buf, count, flags) { return retnum(C.recv(getfd(fd), buf, count, c.MSG[flags], false)); }
}

// TODO not sure about this interface, maybe return rem as extra parameter see #103
if( C.nanosleep ) {
  function S.nanosleep(req, rem) {
    rem = rem || t.timespec();
    var ret, err = C.nanosleep(mktype(t.timespec, req), rem);
    if( ret == -1 ) {
      if( (err || errno()) == c.E.INTR ) { return true, null, rem; } else { return null, t.error(err || errno()); }
    }
    return true; // no time remaining
  }
}

// getpagesize might be a syscall, or in libc, or may not exist
if( C.getpagesize ) {
  function S.getpagesize() { return retnum(C.getpagesize()); }
}

if( C.syncfs ) {
  function S.syncfs(fd) { return retbool(C.syncfs(getfd(fd))); }
}

// although the pty functions are not syscalls, we include here, like eg shm functions, as easier to provide as methods on fds
// Freebsd has a syscall, other OSs use /dev/ptmx
if( C.posix_openpt ) {
  function S.posix_openpt(flags) { return retfd(C.posix_openpt(c.O[flags])); }
} else {
  function S.posix_openpt(flags) { return S.open("/dev/ptmx", flags); }
}
S.openpt = S.posix_openpt;

function S.isatty(fd) {
  var tc, err = S.tcgetattr(fd);
  if( tc ) { return true; } else { return null, err; }
}

if( c.IOCTL.TIOCGSID ) { // OpenBSD only has in legacy ioctls
  function S.tcgetsid(fd) { return S.ioctl(fd, "TIOCGSID"); }
}

// now call OS specific for non-generic calls
var hh = {
  ret64 = ret64, retnum = retnum, retfd = retfd, retbool = retbool, retptr = retptr, retiter = retiter
};

if( (abi.rump && abi.types == "netbsd") || (! abi.rump && abi.bsd) ) {
  S = require("syscall.bsd.syscalls")(S, hh, c, C, types);
}
S = require("syscall." .. abi.os .. ".syscalls")(S, hh, c, C, types);

return S;

}

return {init = init};


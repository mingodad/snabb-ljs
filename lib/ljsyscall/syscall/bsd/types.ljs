// BSD shared types

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(c, types) {

var abi = require ("syscall.abi");

var t, pt, s, ctypes = types.t, types.pt, types.s, types.ctypes;

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var h = require ("syscall.helpers");

var addtype, addtype_var, addtype_fn, addraw2 = h.addtype, h.addtype_var, h.addtype_fn, h.addraw2;
var ptt, reviter, mktype, istype, lenfn, lenmt, getfd, newfn
  = h.ptt, h.reviter, h.mktype, h.istype, h.lenfn, h.lenmt, h.getfd, h.newfn;
var ntohl, ntohs, htons = h.ntohl, h.ntohs, h.htons;

var mt = {}; // metatables

var addtypes = {
};

var addstructs = {
};

for( k, v in pairs(addtypes) ) { addtype(types, k, v); }
for( k, v in pairs(addstructs) ) { addtype(types, k, v, lenmt); }

mt.sockaddr = {
  index = {
    len = function(sa) { return sa.sa_len; },
    family = function(sa) { return sa.sa_family; },
  },
  newindex = {
    len = function(sa, v) { sa.sa_len = v; },
  },
};

addtype(types, "sockaddr", "struct sockaddr", mt.sockaddr);

// cast socket address to actual type based on family, defined later
var samap_pt = {};

mt.sockaddr_storage = {
  index = {
    len = function(sa) { return sa.ss_len; },
    family = function(sa) { return sa.ss_family; },
  },
  newindex = {
    len = function(sa, v) { sa.ss_len = v; },
    family = function(sa, v) { sa.ss_family = c.AF[v]; },
  },
  __index = function(sa, k) {
    if( mt.sockaddr_storage.index[k] ) { return mt.sockaddr_storage.index[k](sa); }
    var st = samap_pt[sa.ss_family];
    if( st ) {
      var cs = st(sa);
      return cs[k];
    }
    error("invalid index " .. k);
  },
  __newindex = function(sa, k, v) {
    if( mt.sockaddr_storage.newindex[k] ) {
      mt.sockaddr_storage.newindex[k](sa, v);
      return;
    }
    var st = samap_pt[sa.ss_family];
    if( st ) {
      var cs = st(sa);
      cs[k] = v;
      return;
    }
    error("invalid index " .. k);
  },
  __new = function(tp, init) {
    var ss = ffi.new(tp);
    var family;
    if( init && init.family ) { family = c.AF[init.family]; }
    var st;
    if( family ) {
      st = samap_pt[family];
      ss.ss_family = family;
      init.family = null;
    }
    if( st ) {
      var cs = st(ss);
      for( k, v in pairs(init) ) {
        cs[k] = v;
      }
    }
    ss.len = #ss;
    return ss;
  },
  // netbsd likes to see the correct size when it gets a sockaddr; Linux was ok with a longer one
  __len = function(sa) {
    if( samap_pt[sa.family] ) {
      var cs = samap_pt[sa.family](sa);
      return #cs;
    } else {
      return s.sockaddr_storage;
    }
  },
};

// experiment, see if we can use this as generic type, to avoid allocations.
addtype(types, "sockaddr_storage", "struct sockaddr_storage", mt.sockaddr_storage);

mt.sockaddr_in = {
  index = {
    len = function(sa) { return sa.sin_len; },
    family = function(sa) { return sa.sin_family; },
    port = function(sa) { return ntohs(sa.sin_port); },
    addr = function(sa) { return sa.sin_addr; },
  },
  newindex = {
    len = function(sa, v) { sa.sin_len = v; },
    family = function(sa, v) { sa.sin_family = v; },
    port = function(sa, v) { sa.sin_port = htons(v); },
    addr = function(sa, v) { sa.sin_addr = mktype(t.in_addr, v); },
  },
  __new = function(tp, port, addr) {
    if( type(port) == "table" ) {
      port.len = s.sockaddr_in;
      return newfn(tp, port);
    }
   return newfn(tp, {len = s.sockaddr_in, family = c.AF.INET, port = port, addr = addr});
  },
  __len = function(tp) { return s.sockaddr_in; },
};

addtype(types, "sockaddr_in", "struct sockaddr_in", mt.sockaddr_in);

mt.sockaddr_in6 = {
  index = {
    len = function(sa) { return sa.sin6_len; },
    family = function(sa) { return sa.sin6_family; },
    port = function(sa) { return ntohs(sa.sin6_port); },
    addr = function(sa) { return sa.sin6_addr; },
  },
  newindex = {
    len = function(sa, v) { sa.sin6_len = v; },
    family = function(sa, v) { sa.sin6_family = v; },
    port = function(sa, v) { sa.sin6_port = htons(v); },
    addr = function(sa, v) { sa.sin6_addr = mktype(t.in6_addr, v); },
    flowinfo = function(sa, v) { sa.sin6_flowinfo = v; },
    scope_id = function(sa, v) { sa.sin6_scope_id = v; },
  },
  __new = function(tp, port, addr, flowinfo, scope_id) { // reordered initialisers.
    if( type(port) == "table" ) {
      port.len = s.sockaddr_in6;
      return newfn(tp, port);
    }
    return newfn(tp, {len = s.sockaddr_in6, family = c.AF.INET6, port = port, addr = addr, flowinfo = flowinfo, scope_id = scope_id});
  },
  __len = function(tp) { return s.sockaddr_in6; },
};

addtype(types, "sockaddr_in6", "struct sockaddr_in6", mt.sockaddr_in6);

mt.sockaddr_un = {
  index = {
    family = function(sa) { return sa.sun_family; },
    path = function(sa) { return ffi.string(sa.sun_path); },
  },
  newindex = {
    family = function(sa, v) { sa.sun_family = v; },
    path = function(sa, v) { ffi.copy(sa.sun_path, v); },
  },
  __new = function(tp, path) { return newfn(tp, {family = c.AF.UNIX, path = path, sun_len = s.sockaddr_un}); },
  __len = function(sa) { return 2 + #sa.path; },
};

addtype(types, "sockaddr_un", "struct sockaddr_un", mt.sockaddr_un);

function t.sa(addr, addrlen) { return addr; } // non Linux is trivial, Linux has odd unix handling

// TODO need to check in detail all this as ported from Linux and may differ
mt.termios = {
  makeraw = function(termios) {
    termios.c_iflag = bit.band(termios.iflag, bit.bnot(c.IFLAG["IGNBRK,BRKINT,PARMRK,ISTRIP,INLCR,IGNCR,ICRNL,IXON"]));
    termios.c_oflag = bit.band(termios.oflag, bit.bnot(c.OFLAG["OPOST"]));
    termios.c_lflag = bit.band(termios.lflag, bit.bnot(c.LFLAG["ECHO,ECHONL,ICANON,ISIG,IEXTEN"]));
    termios.c_cflag = bit.bor(bit.band(termios.cflag, bit.bnot(c.CFLAG["CSIZE,PARENB"])), c.CFLAG.CS8);
    termios.c_cc[c.CC.VMIN] = 1;
    termios.c_cc[c.CC.VTIME] = 0;
    return true;
  },
  index = {
    iflag = function(termios) { return tonumber(termios.c_iflag); },
    oflag = function(termios) { return tonumber(termios.c_oflag); },
    cflag = function(termios) { return tonumber(termios.c_cflag); },
    lflag = function(termios) { return tonumber(termios.c_lflag); },
    makeraw = function(termios) { return mt.termios.makeraw; },
    ispeed = function(termios) { return termios.c_ispeed; },
    ospeed = function(termios) { return termios.c_ospeed; },
  },
  newindex = {
    iflag = function(termios, v) { termios.c_iflag = c.IFLAG(v); },
    oflag = function(termios, v) { termios.c_oflag = c.OFLAG(v); },
    cflag = function(termios, v) { termios.c_cflag = c.CFLAG(v); },
    lflag = function(termios, v) { termios.c_lflag = c.LFLAG(v); },
    ispeed = function(termios, v) { termios.c_ispeed = v; },
    ospeed = function(termios, v) { termios.c_ospeed = v; },
    speed = function(termios, v) {
      termios.c_ispeed = v;
      termios.c_ospeed = v;
    },
  },
};

for( k, i in pairs(c.CC) ) {
  mt.termios.index[k] = function(termios) { return termios.c_cc[i]; };
  mt.termios.newindex[k] = function(termios, v) { termios.c_cc[i] = v; };
}

addtype(types, "termios", "struct termios", mt.termios);

mt.kevent = {
  index = {
    size = function(kev) { return tonumber(kev.data); },
    fd = function(kev) { return tonumber(kev.ident); },
    signal = function(kev) { return tonumber(kev.ident); },
  },
  newindex = {
    fd = function(kev, v) { kev.ident = t.uintptr(getfd(v)); },
    signal = function(kev, v) { kev.ident = c.SIG[v]; },
    // due to naming, use 'set' names TODO better naming scheme reads oddly as not a function
    setflags = function(kev, v) { kev.flags = c.EV[v]; },
    setfilter = function(kev, v) { kev.filter = c.EVFILT[v]; },
  },
  __new = function(tp, tab) {
    if( type(tab) == "table" ) {
      tab.flags = c.EV[tab.flags];
      tab.filter = c.EVFILT[tab.filter]; // TODO this should also support extra ones via ioctl see man page
      tab.fflags = c.NOTE[tab.fflags];
    }
    var obj = ffi.new(tp);
    for( k, v in pairs(tab || {}) ) { obj[k] = v; }
    return obj;
  },
};

for( k, v in pairs(c.NOTE) ) {
  mt.kevent.index[k] = function(kev) { return bit.band(kev.fflags, v) != 0; };
}

for( _, k in pairs({"FLAG1", "EOF", "ERROR"}) ) {
  mt.kevent.index[k] = function(kev) { return bit.band(kev.flags, c.EV[k]) != 0; };
}

addtype(types, "kevent", "struct kevent", mt.kevent);

mt.kevents = {
  __len = function(kk) { return kk.count; },
  __new = function(tp, ks) {
    if( type(ks) == 'number' ) { return ffi.new(tp, ks, ks); }
    var count = #ks;
    var kks = ffi.new(tp, count, count);
    for( n = 1, count ) { // TODO ideally we use ipairs on both arrays/tables
      var v = mktype(t.kevent, ks[n]);
      kks.kev[n - 1] = v;
    }
    return kks;
  },
  __ipairs = function(kk) { return reviter, kk.kev, kk.count; }
};

addtype_var(types, "kevents", "struct {int count; struct kevent kev[?];}", mt.kevents);

// this is declared above
samap_pt = {
  [c.AF.UNIX] = pt.sockaddr_un,
  [c.AF.INET] = pt.sockaddr_in,
  [c.AF.INET6] = pt.sockaddr_in6,
};

return types;

}

return {init = init};


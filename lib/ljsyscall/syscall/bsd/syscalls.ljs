// syscalls shared by BSD based operating systems

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");

return function(S, hh, c, C, types) {

var ret64, retnum, retfd, retbool, retptr, retiter = hh.ret64, hh.retnum, hh.retfd, hh.retbool, hh.retptr, hh.retiter;

var ffi = require ("ffi");
var errno = ffi.errno;

var h = require ("syscall.helpers");

var istype, mktype, getfd = h.istype, h.mktype, h.getfd;
var octal, split = h.octal, h.split;

var t, pt, s = types.t, types.pt, types.s;

// note emulated in libc in NetBSD
if( C.getdirentries ) {
  function S.getdirentries(fd, buf, size, basep) {
    size = size || 4096;
    buf = buf || t.buffer(size);
    basep = basep || t.long1();
    var ret, err = C.getdirentries(getfd(fd), buf, size, basep);
    if( ret == -1 ) { return null, t.error(err || errno()); }
    if( ret == 0 ) { return null, null; }
    return t.dirents(buf, ret);
  }
}

function S.unmount(target, flags) {
  return retbool(C.unmount(target, c.MNT[flags]));
}

function S.revoke(path) { return retbool(C.revoke(path)); }
function S.chflags(path, flags) { return retbool(C.chflags(path, c.CHFLAGS[flags])); }
if( C.lchflags ) {
  function S.lchflags(path, flags) { return retbool(C.lchflags(path, c.CHFLAGS[flags])); }
}
function S.fchflags(fd, flags) { return retbool(C.fchflags(getfd(fd), c.CHFLAGS[flags])); }
if( C.chflagsat ) {
  function S.chflagsat(dirfd, path, flags, atflag) {
    return retbool(C.chflagsat(c.AT_FDCWD[dirfd], path, c.CHFLAGS[flags], c.AT[atflag]));
  }
}

function S.pathconf(path, name) { return retnum(C.pathconf(path, c.PC[name])); }
function S.fpathconf(fd, name) { return retnum(C.fpathconf(getfd(fd), c.PC[name])); }
if( C.lpathconf ) {
  function S.lpathconf(path, name) { return retnum(C.lpathconf(path, c.PC[name])); }
}

function S.kqueue() { return retfd(C.kqueue()); }

var sysctltypes = require("syscall." .. abi.os .. ".sysctl");

var function sysctlnametomib(name) {
  var origname = name;
  name = name->lower();
  var tp = sysctltypes[name];
  if( ! tp ) { error("unknown sysctl " .. name); }
  if( type(tp) == "table" ) { tp = tp[2]; }
  // an internal node will be a number or line above will have pulled out table
  // we do allow calls on internal node to see if that subsystem is there though
  if( type(tp) == "number" || type(tp) == "table" ) { tp = "none"; }
  name = split("%.", name);
  var prefix;
  var tab;
  for( i = 1, #name ) {
    if( ! prefix ) { prefix = name[i]; } else { prefix = prefix .. "." .. name[i]; }
    var part = sysctltypes[prefix];
    if( i == #name ) {
      if( type(part) == "table" ) { name[i] = part[1];
      } else if( type(part) == "number" ) { name[i] = part;
      } else {
        if( tab && tab[name[i]] ) { name[i] = tab[name[i]]; } else { error("sysctl unknown " .. name[i] .. " in " .. origname); }
      }
    } else {
      if( type(part) == "table" ) { name[i], tab = part[1], part[2]; } else { name[i] = part; }
    }
  }
  return name, tp;
}

var function sysctlsort(a, b) {
  a = sysctlnametomib(a);
  b = sysctlnametomib(b);
  for( i = 1, #a ) {
    if( i > #b ) { return true; }
    if( a[i] < b[i] ) { return true; }
    if( b[i] < a[i] ) { return false; }
  }
  return true;
}

var allmeta = {
  __tostring = function(t) {
    var names = {};
    for( k, v in pairs(t) ) { names[#names + 1] = k; }
    table.sort(names, sysctlsort);
    var tt = {};
    for( i, v in pairs(names) ) { tt[i] = v .. " = " .. tostring(t[v]); }
    return table.concat(tt, '\n');
  },
};

// "-a" functionality, well all the ones we know about
// TODO also use for all under one node
var function allsysctl() {
  var all = {};
  for( k, v in pairs(sysctltypes) ) {
    if( type(v) == "table" && type(v[2]) == "string" ) { v = v[2]; }
    if( type(v) == "string" ) {
      var res, err = S.sysctl(k);
      if( res ) { all[k] = res; }
    }
  }
  return setmetatable(all, allmeta);
}

// TODO understand return types
function S.sysctl(name, new, old) { // TODO may need to change arguments, note order as should not need to specify old
  if( ! name ) { return allsysctl(); }
  var tp;
  if( type(name) == "string" ) {
    name, tp = sysctlnametomib(name);
  }
  var namelen = #name;
  var oldlenp, newlen;
  if( tp ) {
    if( tp == "string" ) {
      oldlenp = t.size1(256); // TODO adapt if too small
      old = t.buffer(oldlenp[0]);
    } else if( tp == "int" ) {
      oldlenp = t.size1(s.int);
      old = t.int1();
    } else if( tp == "int64" ) {
      oldlenp = t.size1(s.int64);
      old = t.int64_1();
    } else if( tp == "none" ) { // TODO not apparently working, maybe just list all children for internal node case
      oldlenp = t.size1(s.int);
      old = t.int1();
    } else {
      oldlenp = t.size1(s[tp]);
      old = t[tp]();
    }
  } else if( type(old) == "number" ) { // specified length of buffer
    oldlenp = t.size1(old);
    old = t.buffer(old);
  } else if( ! old ) { // default to int
    tp = "int";
    oldlenp = t.size1(s.int);
    old = t.int1();
  } else {
    oldlenp = t.size1(#old);
  }
  if( new ) { newlen = #new; } else { newlen = 0; } // TODO set based on known types too
  name = t.ints(namelen, name);
  var ret, err = C.sysctl(name, namelen, old, oldlenp, new, newlen);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( tp ) { // we know type of value being returned
    if( tp == "string" ) { return ffi.string(old);
    } else if( tp == "int" ) { return tonumber(old[0]);
    } else if( tp == "int64" ) { return old[0];
    } else if( tp == "none" ) { return true;
    } else { return old;
    }
    return old;
  }
  return old, null, oldlenp[0]; // not ideal, but add the sysctls you want to sysctl.lua...
}

// note osx has kevent64 too, different type
function S.kevent(kq, changelist, eventlist, timeout) {
  if( timeout ) { timeout = mktype(t.timespec, timeout); }
  var changes, changecount = null, 0;
  if( changelist ) { changes, changecount = changelist.kev, changelist.count; }
  if( eventlist ) {
    var ret, err = C.kevent(getfd(kq), changes, changecount, eventlist.kev, eventlist.count, timeout);
    return retiter(ret, err, eventlist.kev);
  }
  return retnum(C.kevent(getfd(kq), changes, changecount, null, 0, timeout));
}

function S.tcgetattr(fd) { return S.ioctl(fd, "TIOCGETA"); }
var tcsets = {
  [c.TCSA.NOW]   = "TIOCSETA",
  [c.TCSA.DRAIN] = "TIOCSETAW",
  [c.TCSA.FLUSH] = "TIOCSETAF",
};
function S.tcsetattr(fd, optional_actions, tio) {
  // TODO also implement TIOCSOFT, which needs to make a modified copy of tio
  var inc = c.TCSA[optional_actions];
  return S.ioctl(fd, tcsets[inc], tio);
}
function S.tcsendbreak(fd, duration) {
  var ok, err = S.ioctl(fd, "TIOCSBRK");
  if( ! ok ) { return null, err; }
  S.nanosleep(0.4); // BSD just does constant time
  ok, err = S.ioctl(fd, "TIOCCBRK");
  if( ! ok ) { return null, err; }
  return true;
}
function S.tcdrain(fd) {
  return S.ioctl(fd, "TIOCDRAIN");
}
function S.tcflush(fd, com) {
  return S.ioctl(fd, "TIOCFLUSH", c.TCFLUSH[com]); // while defined as FREAD, FWRITE, values same
}
var posix_vdisable = octal ("0377"); // TODO move to constants? check in all BSDs
function S.tcflow(fd, action) {
  action = c.TCFLOW[action];
  if( action == c.TCFLOW.OOFF ) { return S.ioctl(fd, "TIOCSTOP"); }
  if( action == c.TCFLOW.OON ) { return S.ioctl(fd, "TIOCSTART"); }
  if( action != c.TCFLOW.ION && action != c.TCFLOW.IOFF ) { return null; }
  var term, err = S.tcgetattr(fd);
  if( ! term ) { return null, err; }
  var cc;
  if( action == c.TCFLOW.IOFF ) { cc = term.VSTOP; } else { cc = term.VSTART; }
  if( cc != posix_vdisable && ! S.write(fd, t.uchar1(cc), 1) ) { return null; }
  return true;
}
function S.issetugid() { return C.issetugid(); }

// these are not in NetBSD; they are syscalls in FreeBSD, OSX, libs functions in Linux; they could be in main syscall.
if( C.shm_open ) {
  function S.shm_open(pathname, flags, mode) {
    if( type(pathname) == "string" && pathname->sub(1, 1) != "/" ) { pathname = "/" .. pathname; }
    return retfd(C.shm_open(pathname, c.O[flags], c.MODE[mode]));
  }
}
if( C.shm_unlink ) {
  function S.shm_unlink(pathname) { return retbool(C.shm_unlink(pathname)); }
}

// TODO move these to FreeBSD only as apparently NetBSD deprecates the non Linux xattr interfaces
// although there are no man pages for the Linux ones...
// doc says behaves like read, write, but as there seem to be limits on attr size and total size
// seems pointless to not read the whole thing at once

var function extattr_get_helper(fn, ff, attrnamespace, attrname, data, nbytes) {
  attrnamespace = c.EXTATTR_NAMESPACE[attrnamespace];
  if( data || data == false ) {
    if( data == false ) { data, nbytes = null, 0; }
    return retnum(fn(ff, attrnamespace, attrname, data, nbytes || #data));
  }
  var n, err;
  nbytes, err = fn(ff, attrnamespace, attrname, null, 0);
  nbytes = tonumber(nbytes);
  if( nbytes == -1 ) { return null, t.error(err || errno()); }
  data = t.buffer(nbytes);
  n, err = fn(ff, attrnamespace, attrname, data, nbytes);
  n = tonumber(n);
  if( n == -1 ) { return null, t.error(err || errno()); }
  return ffi.string(data, n);
}

if( C.extattr_get_fd ) {
  function S.extattr_get_fd(fd, attrnamespace, attrname, data, nbytes) {
    return extattr_get_helper(C.extattr_get_fd, getfd(fd), attrnamespace, attrname, data, nbytes);
  }
}

if( C.extattr_get_file ) {
  function S.extattr_get_file(file, attrnamespace, attrname, data, nbytes) {
    return extattr_get_helper(C.extattr_get_file, file, attrnamespace, attrname, data, nbytes);
  }
}

if( C.extattr_get_link ) {
  function S.extattr_get_link(file, attrnamespace, attrname, data, nbytes) {
    return extattr_get_helper(C.extattr_get_link, file, attrnamespace, attrname, data, nbytes);
  }
}

if( C.extattr_set_fd ) {
   function S.extattr_set_fd(fd, attrnamespace, attrname, data, nbytes) {
     var str = data; // do not gc
     if( type(data) == "string" ) { data, nbytes = pt.char(str), #str; }
     return retnum(C.extattr_set_fd(getfd(fd), c.EXTATTR_NAMESPACE[attrnamespace], attrname, data, nbytes || #data));
   }
}

if( C.extattr_delete_fd ) {
  function S.extattr_delete_fd(fd, attrnamespace, attrname) {
    return retbool(C.extattr_delete_fd(getfd(fd), c.EXTATTR_NAMESPACE[attrnamespace], attrname));
  }
}

if( C.extattr_set_file ) {
   function S.extattr_set_file(file, attrnamespace, attrname, data, nbytes) {
     var str = data; // do not gc
     if( type(data) == "string" ) { data, nbytes = pt.char(str), #str; }
     return retnum(C.extattr_set_file(file, c.EXTATTR_NAMESPACE[attrnamespace], attrname, data, nbytes || #data));
   }
}

if( C.extattr_delete_file ) {
  function S.extattr_delete_file(file, attrnamespace, attrname) {
    return retbool(C.extattr_delete_file(file, c.EXTATTR_NAMESPACE[attrnamespace], attrname));
  }
}

if( C.extattr_set_link ) {
   function S.extattr_set_link(file, attrnamespace, attrname, data, nbytes) {
     var str = data; // do not gc
     if( type(data) == "string" ) { data, nbytes = pt.char(str), #str; }
     return retnum(C.extattr_set_link(file, c.EXTATTR_NAMESPACE[attrnamespace], attrname, data, nbytes || #data));
   }
}

if( C.extattr_delete_link ) {
  function S.extattr_delete_link(file, attrnamespace, attrname) {
    return retbool(C.extattr_delete_link(file, c.EXTATTR_NAMESPACE[attrnamespace], attrname));
  }
}

var function parse_extattr(buf, n) {
  var tab, i = {}, 0;
  while( n > 0 ) {
    var len = buf[i];
    tab[#tab + 1] = ffi.string(buf + i + 1, len);
    i, n = i + (len + 1), n - (len + 1);
  }
  return tab;
}

var function extattr_list_helper(fn, ff, attrnamespace, data, nbytes) {
  attrnamespace = c.EXTATTR_NAMESPACE[attrnamespace];
  if( data == false ) { return retnum(fn(ff, attrnamespace, null, 0)); }
  if( data ) {
    return retnum(fn(ff, attrnamespace, data, nbytes || #data)); // TODO should we parse?
  }
  nbytes, err = fn(ff, attrnamespace, null, 0);
  nbytes = tonumber(nbytes);
  if( nbytes == -1 ) { return null, t.error(err || errno()); }
  data = t.buffer(nbytes);
  var n;
  n, err = fn(ff, attrnamespace, data, nbytes);
  n = tonumber(n);
  if( n == -1 ) { return null, t.error(err || errno()); }
  return parse_extattr(data, n);
}

if( C.extattr_list_fd ) {
  function S.extattr_list_fd(fd, attrnamespace, data, nbytes) {
    return extattr_list_helper(C.extattr_list_fd, getfd(fd), attrnamespace, data, nbytes);
  }
}

if( C.extattr_list_file ) {
  function S.extattr_list_file(file, attrnamespace, data, nbytes) {
    return extattr_list_helper(C.extattr_list_file, file, attrnamespace, data, nbytes);
  }
}

if( C.extattr_list_link ) {
  function S.extattr_list_link(file, attrnamespace, data, nbytes) {
    return extattr_list_helper(C.extattr_list_link, file, attrnamespace, data, nbytes);
  }
}

return S;

};


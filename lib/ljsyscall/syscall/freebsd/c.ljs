// This sets up the table of C functions

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");

var ffi = require ("ffi");

require ("syscall.freebsd.ffi");

var voidp = ffi.typeof("void *");

var function void(x) {
  return ffi.cast(voidp, x);
}

// basically all types passed to syscalls are int or long, so we do not need to use nicely named types, so we can avoid importing t.
var int, long = ffi.typeof("int"), ffi.typeof("long");
var uint, ulong = ffi.typeof("unsigned int"), ffi.typeof("unsigned long");

var function inlibc_fn(k) { return ffi.C[k]; }

var C = setmetatable({}, {
  __index = function(C, k) {
    if( pcall(inlibc_fn, k) ) {
      C[k] = ffi.C[k]; // add to table, so no need for this slow path again
      return C[k];
    } else {
      return null;
    }
  }
});

// quite a few FreeBSD functions are weak aliases to __sys_ prefixed versions, some seem to resolve but others do not, odd.
C.futimes = C.__sys_futimes;
C.lutimes = C.__sys_lutimes;
C.utimes = C.__sys_utimes;
C.wait4 = C.__sys_wait4;
C.sigaction = C.__sys_sigaction;

return C;


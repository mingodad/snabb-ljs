// FreeBSD types

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(types) {

var abi = require ("syscall.abi");

var t, pt, s, ctypes = types.t, types.pt, types.s, types.ctypes;

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var h = require ("syscall.helpers");

var addtype, addtype_var, addtype_fn, addraw2 = h.addtype, h.addtype_var, h.addtype_fn, h.addraw2;
var ptt, reviter, mktype, istype, lenfn, lenmt, getfd, newfn
  = h.ptt, h.reviter, h.mktype, h.istype, h.lenfn, h.lenmt, h.getfd, h.newfn;
var ntohl, ntohs, htons, octal = h.ntohl, h.ntohs, h.htons, h.octal;

var c = require ("syscall.freebsd.constants");

var mt = {}; // metatables

var addtypes = {
};

var addstructs = {
  fiodgname_arg = "struct fiodgname_arg",
};

for( k, v in pairs(addtypes) ) { addtype(types, k, v); }
for( k, v in pairs(addstructs) ) { addtype(types, k, v, lenmt); }

// 32 bit dev_t, 24 bit minor, 8 bit major, but minor is a cookie and neither really used just legacy
var function makedev(major, minor) {
  if( type(major) == "table" ) { major, minor = major[1], major[2]; }
  var dev = major || 0;
  if( minor ) { dev = bit.bor(minor, bit.lshift(major, 8)); }
  return dev;
}

mt.device = {
  index = {
    major = function(dev) { return bit.bor(bit.band(bit.rshift(dev.dev, 8), 0xff)); },
    minor = function(dev) { return bit.band(dev.dev, 0xffff00ff); },
    device = function(dev) { return tonumber(dev.dev); },
  },
  newindex = {
    device = function(dev, major, minor) { dev.dev = makedev(major, minor); },
  },
  __new = function(tp, major, minor) {
    return ffi.new(tp, makedev(major, minor));
  },
};

addtype(types, "device", "struct {dev_t dev;}", mt.device);

mt.stat = {
  index = {
    dev = function(st) { return t.device(st.st_dev); },
    mode = function(st) { return st.st_mode; },
    ino = function(st) { return tonumber(st.st_ino); },
    nlink = function(st) { return st.st_nlink; },
    uid = function(st) { return st.st_uid; },
    gid = function(st) { return st.st_gid; },
    rdev = function(st) { return t.device(st.st_rdev); },
    atime = function(st) { return st.st_atim.time; },
    ctime = function(st) { return st.st_ctim.time; },
    mtime = function(st) { return st.st_mtim.time; },
    birthtime = function(st) { return st.st_birthtim.time; },
    size = function(st) { return tonumber(st.st_size); },
    blocks = function(st) { return tonumber(st.st_blocks); },
    blksize = function(st) { return tonumber(st.st_blksize); },
    flags = function(st) { return st.st_flags; },
    gen = function(st) { return st.st_gen; },

    type = function(st) { return bit.band(st.st_mode, c.S_I.FMT); },
    todt = function(st) { return bit.rshift(st.type, 12); },
    isreg = function(st) { return st.type == c.S_I.FREG; },
    isdir = function(st) { return st.type == c.S_I.FDIR; },
    ischr = function(st) { return st.type == c.S_I.FCHR; },
    isblk = function(st) { return st.type == c.S_I.FBLK; },
    isfifo = function(st) { return st.type == c.S_I.FIFO; },
    islnk = function(st) { return st.type == c.S_I.FLNK; },
    issock = function(st) { return st.type == c.S_I.FSOCK; },
    iswht = function(st) { return st.type == c.S_I.FWHT; },
  },
};

// add some friendlier names to stat, also for luafilesystem compatibility
mt.stat.index.access = mt.stat.index.atime;
mt.stat.index.modification = mt.stat.index.mtime;
mt.stat.index.change = mt.stat.index.ctime;

var namemap = {
  file             = mt.stat.index.isreg,
  directory        = mt.stat.index.isdir,
  link             = mt.stat.index.islnk,
  socket           = mt.stat.index.issock,
  ["char device"]  = mt.stat.index.ischr,
  ["block device"] = mt.stat.index.isblk,
  ["named pipe"]   = mt.stat.index.isfifo,
};

mt.stat.index.typename = function(st) {
  for( k, v in pairs(namemap) ) { if( v(st) ) { return k; } }
  return "other";
};

addtype(types, "stat", "struct stat", mt.stat);

mt.flock = {
  index = {
    type = function(this) { return this.l_type; },
    whence = function(this) { return this.l_whence; },
    start = function(this) { return this.l_start; },
    len = function(this) { return this.l_len; },
    pid = function(this) { return this.l_pid; },
    sysid = function(this) { return this.l_sysid; },
  },
  newindex = {
    type = function(this, v) { this.l_type = c.FCNTL_LOCK[v]; },
    whence = function(this, v) { this.l_whence = c.SEEK[v]; },
    start = function(this, v) { this.l_start = v; },
    len = function(this, v) { this.l_len = v; },
    pid = function(this, v) { this.l_pid = v; },
    sysid = function(this, v) { this.l_sysid = v; },
  },
  __new = newfn,
};

addtype(types, "flock", "struct flock", mt.flock);

mt.dirent = {
  index = {
    fileno = function(this) { return tonumber(this.d_fileno); },
    reclen = function(this) { return this.d_reclen; },
    namlen = function(this) { return this.d_namlen; },
    type = function(this) { return this.d_type; },
    name = function(this) { return ffi.string(this.d_name, this.d_namlen); },
    toif = function(this) { return bit.lshift(this.d_type, 12); }, // convert to stat types
  },
  __len = function(this) { return this.d_reclen; },
};

mt.dirent.index.ino = mt.dirent.index.fileno; // alternate name

// TODO previously this allowed lower case values, but this static version does not
// could add mt.dirent.index[tolower(k)] = mt.dirent.index[k] but need to do consistently elsewhere
for( k, v in pairs(c.DT) ) {
  mt.dirent.index[k] = function(this) { return this.type == v; };
}

addtype(types, "dirent", "struct dirent", mt.dirent);

mt.fdset = {
  index = {
    fds_bits = function(this) { return this.__fds_bits; },
  },
};

addtype(types, "fdset", "fd_set", mt.fdset);

mt.cap_rights = {
  // TODO
};

addtype(types, "cap_rights", "cap_rights_t", mt.cap_rights);

// TODO see Linux notes. Also maybe can be shared with BSDs, have not checked properly
// TODO also remove WIF prefixes.
mt.wait = {
  __index = function(w, k) {
    var _WSTATUS = bit.band(w.status, octal("0177"));
    var _WSTOPPED = octal("0177");
    var WTERMSIG = _WSTATUS;
    var EXITSTATUS = bit.band(bit.rshift(w.status, 8), 0xff);
    var WIFEXITED = (_WSTATUS == 0);
    var tab = {
      WIFEXITED = WIFEXITED,
      WIFSTOPPED = bit.band(w.status, 0xff) == _WSTOPPED,
      WIFSIGNALED = _WSTATUS != _WSTOPPED && _WSTATUS != 0
    };
    if( tab.WIFEXITED ) { tab.EXITSTATUS = EXITSTATUS; }
    if( tab.WIFSTOPPED ) { tab.WSTOPSIG = EXITSTATUS; }
    if( tab.WIFSIGNALED ) { tab.WTERMSIG = WTERMSIG; }
    if( tab[k] ) { return tab[k]; }
    var uc = 'W' .. k->upper();
    if( tab[uc] ) { return tab[uc]; }
  }
};

function t.waitstatus(status) {
  return setmetatable({status = status}, mt.wait);
}

var signames = {};
var duplicates = {LWT = true};
for( k, v in pairs(c.SIG) ) {
  if( ! duplicates[k] ) { signames[v] = k; }
}

mt.siginfo = {
  index = {
    signo   = function(s) { return s.si_signo; },
    errno   = function(s) { return s.si_errno; },
    code    = function(s) { return s.si_code; },
    pid     = function(s) { return s.si_pid; },
    uid     = function(s) { return s.si_uid; },
    status  = function(s) { return s.si_status; },
    addr    = function(s) { return s.si_addr; },
    value   = function(s) { return s.si_value; },
    trapno  = function(s) { return s._fault._trapno; },
    timerid = function(s) { return s._timer._timerid; },
    overrun = function(s) { return s._timer._overrun; },
    mqd     = function(s) { return s._mesgq._mqd; },
    band    = function(s) { return s._poll._band; },
    signame = function(s) { return signames[s.signo]; },
  },
  newindex = {
    signo   = function(s, v) { s.si_signo = v; },
    errno   = function(s, v) { s.si_errno = v; },
    code    = function(s, v) { s.si_code = v; },
    pid     = function(s, v) { s.si_pid = v; },
    uid     = function(s, v) { s.si_uid = v; },
    status  = function(s, v) { s.si_status = v; },
    addr    = function(s, v) { s.si_addr = v; },
    value   = function(s, v) { s.si_value = v; },
    trapno  = function(s, v) { s._fault._trapno = v; },
    timerid = function(s, v) { s._timer._timerid = v; },
    overrun = function(s, v) { s._timer._overrun = v; },
    mqd     = function(s, v) { s._mesgq._mqd = v; },
    band    = function(s, v) { s._poll._band = v; },
  },
  __len = lenfn,
};

addtype(types, "siginfo", "siginfo_t", mt.siginfo);

// sigaction, standard POSIX behaviour with union of handler and sigaction
addtype_fn(types, "sa_sigaction", "void (*)(int, siginfo_t *, void *)");

mt.sigaction = {
  index = {
    handler = function(sa) { return sa.__sigaction_u.__sa_handler; },
    sigaction = function(sa) { return sa.__sigaction_u.__sa_sigaction; },
    mask = function(sa) { return sa.sa_mask; },
    flags = function(sa) { return tonumber(sa.sa_flags); },
  },
  newindex = {
    handler = function(sa, v) {
      if( type(v) == "string" ) { v = pt.void(c.SIGACT[v]); }
      if( type(v) == "number" ) { v = pt.void(v); }
      sa.__sigaction_u.__sa_handler = v;
    },
    sigaction = function(sa, v) {
      if( type(v) == "string" ) { v = pt.void(c.SIGACT[v]); }
      if( type(v) == "number" ) { v = pt.void(v); }
      sa.__sigaction_u.__sa_sigaction = v;
    },
    mask = function(sa, v) {
      if( ! ffi.istype(t.sigset, v) ) { v = t.sigset(v); }
      sa.sa_mask = v;
    },
    flags = function(sa, v) { sa.sa_flags = c.SA[v]; },
  },
  __new = function(tp, tab) {
    var sa = ffi.new(tp);
    if( tab ) { for( k, v in pairs(tab) ) { sa[k] = v; } }
    if( tab && tab.sigaction ) { sa.sa_flags = bit.bor(sa.flags, c.SA.SIGINFO); } // this flag must be set if sigaction set
    return sa;
  },
};

addtype(types, "sigaction", "struct sigaction", mt.sigaction);

// TODO some fields still missing
mt.sigevent = {
  index = {
    notify = function(this) { return this.sigev_notify; },
    signo = function(this) { return this.sigev_signo; },
    value = function(this) { return this.sigev_value; },
  },
  newindex = {
    notify = function(this, v) { this.sigev_notify = c.SIGEV[v]; },
    signo = function(this, v) { this.sigev_signo = c.SIG[v]; },
    value = function(this, v) { this.sigev_value = t.sigval(v); }, // auto assigns based on type
  },
  __new = newfn,
};

addtype(types, "sigevent", "struct sigevent", mt.sigevent);

return types;

}

return {init = init};


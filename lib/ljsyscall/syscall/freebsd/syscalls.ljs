// FreeBSD specific syscalls

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var version = require ("syscall.freebsd.version").version;

return function(S, hh, c, C, types) {

var ret64, retnum, retfd, retbool, retptr = hh.ret64, hh.retnum, hh.retfd, hh.retbool, hh.retptr;

var ffi = require ("ffi");
var errno = ffi.errno;

var h = require ("syscall.helpers");

var istype, mktype, getfd = h.istype, h.mktype, h.getfd;

var t, pt, s = types.t, types.pt, types.s;

function S.reboot(howto) { return C.reboot(c.RB[howto]); }

if( C.bindat ) {
  function S.bindat(dirfd, sockfd, addr, addrlen) {
    var saddr = pt.sockaddr(addr);
    return retbool(C.bindat(c.AT_FDCWD[dirfd], getfd(sockfd), saddr, addrlen || #addr));
  }
}
if( C.connectat ) {
  function S.connectat(dirfd, sockfd, addr, addrlen) {
    var saddr = pt.sockaddr(addr);
    return retbool(C.connectat(c.AT_FDCWD[dirfd], getfd(sockfd), saddr, addrlen || #addr));
  }
}

function S.pdfork(flags, fdp) { // changed order as rarely supply fdp
  fdp = fdp || t.int1();
  var pid, err = C.pdfork(fdp, c.PD[flags]);
  if( pid == -1 ) { return null, t.error(err || errno()); }
  if( pid == 0 ) { return 0; } // the child does not get an fd
  return pid, null, t.fd(fdp[0]);
}
function S.pdgetpid(fd, pidp) {
  pidp = pidp || t.int1();
  var ok, err = C.pdgetpid(getfd(fd), pidp);
  if( ok == -1 ) { return null, t.error(err || errno()); }
  return pidp[0];
}
function S.pdkill(fd, sig) { return retbool(C.pdkill(getfd(fd), c.SIG[sig])); }
// pdwait4 not implemented in FreeBSD yet

if( C.cap_enter && version >= 10 ) { // do not support on FreeBSD 9, only partial implementation
  function S.cap_enter() { return retbool(C.cap_enter()); }
}
if( C.cap_getmode && version >= 10 ) {
  function S.cap_getmode(modep) {
    modep = modep || t.uint1();
    var ok, err = C.cap_getmode(modep);
    if( ok == -1 ) { return null, t.error(err || errno()); }
    return modep[0];
  }
  function S.cap_sandboxed() {
    var modep = S.cap_getmode();
    if( ! modep ) { return false; }
    return modep != 0;
  }
}

// pty functions
var function isptmaster(fd) { return fd->ioctl("TIOCPTMASTER"); }
S.grantpt = isptmaster;
S.unlockpt = isptmaster;

var SPECNAMELEN = 63;

function S.ptsname(fd) {
  var ok, err = isptmaster(fd);
  if( ! ok ) { return null, err; }
  var buf = t.buffer(SPECNAMELEN);
  var fgn = t.fiodgname_arg({buf = buf, len = SPECNAMELEN});
  ok, err = fd->ioctl("FIODGNAME", fgn);
  if( ! ok ) { return null, err; }
  return "/dev/" .. ffi.string(buf);
}

return S;

};


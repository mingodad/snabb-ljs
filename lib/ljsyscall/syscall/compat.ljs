// Compatibility wrappers to add more commonality between different systems, plus define common functions from man(3)

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) { 

var abi, types, c = S.abi, S.types, S.c;
var t, pt, s = types.t, types.pt, types.s;

var ffi = require ("ffi");

var h = require ("syscall.helpers");

var istype, mktype, getfd = h.istype, h.mktype, h.getfd;

if( ! S.creat ) {
  function S.creat(pathname, mode) { return S.open(pathname, "CREAT,WRONLY,TRUNC", mode); }
}

function S.nice(inc) {
  var prio = S.getpriority("process", 0); // this cannot fail with these args.
  var ok, err = S.setpriority("process", 0, prio + inc);
  if( ! ok ) { return null, err; }
  return S.getpriority("process", 0);
}

// deprecated in NetBSD and not in some archs for Linux, implement with recvfrom/sendto
function S.recv(fd, buf, count, flags) { return S.recvfrom(fd, buf, count, flags, null, null); }
function S.send(fd, buf, count, flags) { return S.sendto(fd, buf, count, flags, null, null); }

// not a syscall in many systems, defined in terms of sigaction
var sigret = {};
for( k, v in pairs(c.SIGACT) ) { if( k != "ERR" ) { sigret[v] = k; } }

if( S.sigaction ) {
  function S.signal(signum, handler) { // defined in terms of sigaction, see portability notes in Linux man page
    var oldact = t.sigaction();
    var ok, err = S.sigaction(signum, handler, oldact);
    if( ! ok ) { return null, err; }
    var num = tonumber(t.intptr(oldact.handler));
    var ret = sigret[num];
    if( ret ) { return ret; } // return eg "IGN", "DFL" not a function pointer
    return oldact.handler;
  }
}

if( ! S.pause && S.sigsuspend ) { // NetBSD and OSX deprecate pause
  function S.pause() { return S.sigsuspend(t.sigset()); }
}

if( ! S.alarm && S.setitimer ) { // usually implemented via itimer, although Linux provides alarm as syscall
  function S.alarm(sec) {
    var oldit, err = S.setitimer(c.ITIMER.REAL, {0, sec});
    if( ! oldit ) { return null, err; } // alarm not supposed to return errors but hey
    return oldit.value.sec;
  }
}

// non standard names
if( ! S.umount ) { S.umount = S.unmount; }
if( ! S.unmount ) { S.unmount = S.umount; }

if( S.getdirentries && ! S.getdents ) { // eg OSX has extra arg
  function S.getdents(fd, buf, len) {
    return S.getdirentries(fd, buf, len, null);
  }
}

// TODO we should allow utimbuf and also table of times really; this is the very old 1s precision version, NB Linux has syscall
if( ! S.utime ) {
  function S.utime(path, actime, modtime) {
    var tv;
    modtime = modtime || actime;
    if( actime && modtime ) { tv = {actime, modtime}; }
    return S.utimes(path, tv);
  }
}

// not a syscall in Linux
if( S.utimensat && ! S.futimens ) {
  function S.futimens(fd, times) {
    return S.utimensat(fd, null, times, 0);
  }
}

// some linux arhcitectures eg ARM do not have a time syscall
if( ! S.time ) {
  function S.time(t) {
    var tv = S.gettimeofday();
    if( t ) { t[0] = tv.sec; }
    return tv.sec;
  }
}

// the utimes, futimes, lutimes are legacy, but OSX/FreeBSD do not support the nanosecond versions
// we support the legacy versions but do not fake the more precise ones
S.futimes = S.futimes || S.futimens;
if( S.utimensat && ! S.lutimes ) {
  function S.lutimes(filename, times) {
    return S.utimensat("FDCWD", filename, times, "SYMLINK_NOFOLLOW");
  }
}
if( S.utimensat && ! S.utimes ) {
  function S.utimes(filename, times) {
    return S.utimensat("FDCWD", filename, times, 0);
  }
}

if( ! S.wait ) {
  function S.wait(status) { return S.waitpid(-1, 0, status); }
}

S.wait3 = function(options, rusage, status) { return S.wait4(-1, options, rusage, status); };

if( ! S.waitpid && S.wait4 ) {
  S.waitpid = function(pid, options, status) { return S.wait4(pid, options, false, status); };
}

if( S.wait4 && ! S.wait ) {
  S.wait = function(status) { return S.wait4(-1, 0, false, status); };
}

if( ! S.nanosleep ) {
  function S.nanosleep(req, rem) {
    S.select({}, req);
    if( rem ) { rem.sec, rem.nsec = 0, 0; } // cannot tell how much time left, could be interrupted by a signal.
    return true;
  }
}

// common libc function
if( ! S.sleep && S.nanosleep ) {
  function S.sleep(sec) {
    var ok, err, rem = S.nanosleep(sec);
    if( ! ok ) { return null, err; }
    if( rem ) { return tonumber(rem.tv_sec); }
    return 0;
  }
}

return S;

}

return {init = init};


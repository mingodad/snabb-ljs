// this module defines the types with metatypes that are always common, so do not get errors redefining metatypes

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var ffi = require ("ffi");

var bit = require ("syscall.bit");

var t, ctypes, pt, s = {}, {}, {}, {};
var types = {t = t, pt = pt, s = s, ctypes = ctypes};

var h = require ("syscall.helpers");

var addtype, addtype_var, addtype_fn, addraw2 = h.addtype, h.addtype_var, h.addtype_fn, h.addraw2;
var addtype1, addtype2, addptrtype = h.addtype1, h.addtype2, h.addptrtype;
var ptt, reviter, mktype, istype, lenfn, lenmt, getfd, newfn
  = h.ptt, h.reviter, h.mktype, h.istype, h.lenfn, h.lenmt, h.getfd, h.newfn;
var ntohl, ntohs, htons, htonl = h.ntohl, h.ntohs, h.htons, h.htonl;
var split, trim, strflag = h.split, h.trim, h.strflag;
var align = h.align;

var addtypes = {
  char = "char",
  uchar = "unsigned char",
  int = "int",
  uint = "unsigned int",
  int8 = "int8_t",
  uint8 = "uint8_t",
  int16 = "int16_t",
  uint16 = "uint16_t",
  int32 = "int32_t",
  uint32 = "uint32_t",
  int64 = "int64_t",
  uint64 = "uint64_t",
  long = "long",
  ulong = "unsigned long",
};

for( k, v in pairs(addtypes) ) { addtype(types, k, v); }

var addtypes1 = {
  char1 = "char",
  uchar1 = "unsigned char",
  int1 = "int",
  uint1 = "unsigned int",
  int16_1 = "int16_t",
  uint16_1 = "uint16_t",
  int32_1 = "int32_t",
  uint32_1 = "uint32_t",
  int64_1 = "int64_t",
  uint64_1 = "uint64_t",
  long1 = "long",
  ulong1 = "unsigned long",
  intptr1 = "intptr_t",
  size1 = "size_t",
};

for( k, v in pairs(addtypes1) ) { addtype1(types, k, v); }

var addtypes2 = {
  char2 = "char",
  int2 = "int",
  uint2 = "unsigned int",
};

for( k, v in pairs(addtypes2) ) { addtype2(types, k, v); }

var ptrtypes = {
  uintptr = "uintptr_t",
  intptr = "intptr_t",
};

for( k, v in pairs(ptrtypes) ) { addptrtype(types, k, v); }

t.ints = ffi.typeof("int[?]");
t.buffer = ffi.typeof("char[?]"); // TODO rename as chars?
t.string_array = ffi.typeof("const char *[?]");

var mt = {};

mt.iovec = {
  index = {
    base = function(this) { return this.iov_base; },
    len = function(this) { return this.iov_len; },
  },
};

addtype(types, "iovec", "struct iovec", mt.iovec);

mt.iovecs = {
  __len = function(io) { return io.count; },
  __tostring = function(io) {
    var s = {};
    for( i = 0, io.count - 1 ) {
      var iovec = io.iov[i];
      s[i + 1] = ffi.string(iovec.iov_base, iovec.iov_len);
    }
    return table.concat(s);
  };
  __new = function(tp, is) {
    if( type(is) == 'number' ) { return ffi.new(tp, is, is); }
    var count = #is;
    var iov = ffi.new(tp, count, count);
    var j = 0;
    for( n, i in ipairs(is) ) {
      if( type(i) == 'string' ) {
        var buf = t.buffer(#i);
        ffi.copy(buf, i, #i);
        iov.iov[j].iov_base = buf;
        iov.iov[j].iov_len = #i;
      } else if( type(i) == 'number' ) {
        iov.iov[j].iov_base = t.buffer(i);
        iov.iov[j].iov_len = i;
      } else if( ffi.istype(t.iovec, i) ) {
        ffi.copy(iov[n], i, s.iovec);
      } else if( type(i) == 'cdata' || type(i) == 'userdata' ) { // eg buffer or other structure, userdata if luaffi
        iov.iov[j].iov_base = i;
        iov.iov[j].iov_len = ffi.sizeof(i);
      } else { // eg table
        iov.iov[j] = i;
      }
      ++j    ;
    }
    return iov;
  },
};

addtype_var(types, "iovecs", "struct {int count; struct iovec iov[?];}", mt.iovecs);

// convert strings to inet addresses and the reverse
var function inet4_ntop(src) {
  var b = pt.uchar(src);
  return b[0] .. "." .. b[1] .. "." .. b[2] .. "." .. b[3];
}

var function inet6_ntop(src) {
  var a = src.s6_addr;
  var parts = {256*a[0] + a[1], 256*a[2] + a[3],   256*a[4] + a[5],   256*a[6] + a[7],
                 256*a[8] + a[9], 256*a[10] + a[11], 256*a[12] + a[13], 256*a[14] + a[15]};

  for( i = 1, #parts ) { parts[i] = string.format("%x", parts[i]); }

  var start, max = 0, 0;
  for( i = 1, #parts ) {
    if( parts[i] == "0" ) {
      var count = 0;
      for( j = i, #parts ) {
        if( parts[j] == "0" ) { ++count    ; } else { break; }
      }
      if( count > max ) { max, start = count, i; }
    }
  }

  if( max > 2 ) {
    parts[start] = "";
    if( start == 1 || start + max == 9 ) { parts[start] = ":"; }
    if( start == 1 && start + max == 9 ) { parts[start] = "::"; } 
    for( i = 1, max - 1 ) { table.remove(parts, start + 1); }
  }

  return table.concat(parts, ":");
}

var function inet4_pton(src) {
  var ip4 = split("%.", src);
  if( #ip4 != 4 ) { error ("malformed IP address"); }
  return htonl(tonumber(ip4[1]) * 0x1000000 + tonumber(ip4[2]) * 0x10000 + tonumber(ip4[3]) * 0x100 + tonumber(ip4[4]));
}

var function hex(str) { return tonumber("0x" .. str); }

var function inet6_pton(src, addr) {
  // TODO allow form with decimals at end for ipv4 addresses
  var ip8 = split(":", src);
  if( #ip8 > 8 ) { return null; }
  var before, after = src->find("::");
  before, after = src->sub(1, before - 1), src->sub(after + 1);
  if( before ) {
    if( #ip8 == 8 ) { return null; } // must be some missing
    if( before == "" ) { before = "0"; }
    if( after == "" ) { after = "0"; }
    src = before .. ":" .. string.rep("0:", 8 - #ip8 + 1) .. after;
    ip8 = split(":", src);
  }
  for( i = 1, 8 ) {
    addr.s6_addr[i * 2 - 1] = bit.band(hex(ip8[i]), 0xff);
    addr.s6_addr[i * 2 - 2] = bit.rshift(hex(ip8[i]), 8);
  }
  return addr;
}

var inaddr = strflag ({
  ANY = "0.0.0.0",
  LOOPBACK = "127.0.0.1",
  BROADCAST = "255.255.255.255",
});

var in6addr = strflag ({
  ANY = "::",
  LOOPBACK = "::1",
});

 // given this address and a mask, return a netmask and broadcast as in_addr
var function mask_bcast(address, netmask) {
  var bcast = t.in_addr();
  var nmask = t.in_addr(); // TODO
  if( netmask > 32 ) { error("bad netmask " .. netmask); }
  if( netmask < 32 ) { nmask.s_addr = htonl(bit.rshift(-1, netmask)); }
  bcast.s_addr = bit.bor(tonumber(address.s_addr), nmask.s_addr);
  return {address = address, broadcast = bcast, netmask = nmask};
}

mt.in_addr = {
  __index = {
    get_mask_bcast = function(addr, mask) { return mask_bcast(addr, mask); },
  },
  newindex = {
    addr = function(addr, s) {
      if( ffi.istype(t.in_addr, s) ) {
        addr.s_addr = s.s_addr;
      } else if( type(s) == "string" ) {
        if( inaddr[s] ) { s = inaddr[s]; }
        addr.s_addr = inet4_pton(s);
      } else { // number
        addr.s_addr = htonl(s);
      }
    },
  },
  __tostring = inet4_ntop,
  __new = function(tp, s) {
    var addr = ffi.new(tp);
    if( s ) { addr.addr = s; }
    return addr;
  },
  __len = lenfn,
};

addtype(types, "in_addr", "struct in_addr", mt.in_addr);

mt.in6_addr = {
  __tostring = inet6_ntop,
  __new = function(tp, s) {
    var addr = ffi.new(tp);
    if( s ) {
      if( in6addr[s] ) { s = in6addr[s]; }
      addr = inet6_pton(s, addr);
    }
    return addr;
  },
  __len = lenfn,
};

addtype(types, "in6_addr", "struct in6_addr", mt.in6_addr);

// ip, udp types. Need endian conversions.
var ptchar = ffi.typeof("char *");
var uint16 = ffi.typeof("uint16_t[1]");

var function ip_checksum(buf, size, c, notfinal) {
  c = c || 0;
  var b8 = ffi.cast(ptchar, buf);
  var i16 = uint16();
  for( i = 0, size - 1, 2 ) {
    ffi.copy(i16, b8 + i, 2);
    c = c + i16[0];
  }
  if( size % 2 == 1 ) {
    i16[0] = 0;
    ffi.copy(i16, b8[size - 1], 1);
    c = c + i16[0];
  }

  var v = bit.band(c, 0xffff);
  if( v < 0 ) { v +=   0x10000; } // positive
  c = bit.rshift(c, 16) + v;
  c = c + bit.rshift(c, 16);

  if( ! notfinal ) { c = bit.bnot(c); }
  if( c < 0 ) { c +=   0x10000; } // positive
  return c;
}

mt.iphdr = {
  index = {
    checksum = function(i) { return function(i) {
      i.check = 0;
      i.check = ip_checksum(i, s.iphdr);
      return i.check;
    }; },
  },
};

addtype(types, "iphdr", "struct iphdr", mt.iphdr);

var udphdr_size = ffi.sizeof("struct udphdr");

// ugh, naming problems as cannot remove namespace as usual
// checksum = function(u, ...) return 0 end, -- TODO checksum, needs IP packet info too. as method.
mt.udphdr = {
  index = {
    src = function(u) { return ntohs(u.source); },
    dst = function(u) { return ntohs(u.dest); },
    length = function(u) { return ntohs(u.len); },
    checksum = function(i) { return function(i, ip, body) {
      var bip = pt.char(ip);
      var bup = pt.char(i);
      var cs = 0;
      // checksum pseudo header
      cs = ip_checksum(bip + ffi.offsetof(ip, "saddr"), 4, cs, true);
      cs = ip_checksum(bip + ffi.offsetof(ip, "daddr"), 4, cs, true);
      var pr = t.char2(0, 17); // c.IPPROTO.UDP
      cs = ip_checksum(pr, 2, cs, true);
      cs = ip_checksum(bup + ffi.offsetof(i, "len"), 2, cs, true);
      // checksum udp header
      i.check = 0;
      cs = ip_checksum(i, udphdr_size, cs, true);
      // checksum body
      cs = ip_checksum(body, i.length - udphdr_size, cs);
      if( cs == 0 ) { cs = 0xffff; }
      i.check = cs;
      return cs;
    }; },
  },
  newindex = {
    src = function(u, v) { u.source = htons(v); },
    dst = function(u, v) { u.dest = htons(v); },
    length = function(u, v) { u.len = htons(v); },
  },
};

addtype(types, "udphdr", "struct udphdr", mt.udphdr);

mt.ethhdr = {
  // TODO
};

addtype(types, "ethhdr", "struct ethhdr", mt.ethhdr);

mt.winsize = {
  index = {
    row = function(ws) { return ws.ws_row; },
    col = function(ws) { return ws.ws_col; },
    xpixel = function(ws) { return ws.ws_xpixel; },
    ypixel = function(ws) { return ws.ws_ypixel; },
  },
  newindex = {
    row = function(ws, v) { ws.ws_row = v; },
    col = function(ws, v) { ws.ws_col = v; },
    xpixel = function(ws, v) { ws.ws_xpixel = v; },
    ypixel = function(ws, v) { ws.ws_ypixel = v; },
  },
  __new = newfn,
};

addtype(types, "winsize", "struct winsize", mt.winsize);

return types;


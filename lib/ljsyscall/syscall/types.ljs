// choose correct types for OS

// these are either simple ffi types or ffi metatypes for the kernel types
// plus some Lua metatables for types that cannot be sensibly done as Lua types eg arrays, integers

// note that some types will be overridden, eg default fd type will have metamethods added

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string, math = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string, math;

var function init(c, ostypes, bsdtypes) {

var abi = require ("syscall.abi");

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var h = require ("syscall.helpers");

var ptt, reviter, mktype, istype, lenfn, lenmt, getfd, newfn
  = h.ptt, h.reviter, h.mktype, h.istype, h.lenfn, h.lenmt, h.getfd, h.newfn;
var addtype, addtype_var, addtype_fn, addraw2 = h.addtype, h.addtype_var, h.addtype_fn, h.addraw2;
var ntohl, ntohs, htons = h.ntohl, h.ntohs, h.htons;
var split, trim, strflag = h.split, h.trim, h.strflag;
var align = h.align;

var types = {t = {}, pt = {}, s = {}, ctypes = {}};

var t, pt, s, ctypes = types.t, types.pt, types.s, types.ctypes;

var sharedtypes = require ("syscall.shared.types");

for( k, v in pairs(sharedtypes.t) ) { t[k] = v; }
for( k, v in pairs(sharedtypes.pt) ) { pt[k] = v; }
for( k, v in pairs(sharedtypes.s) ) { s[k] = v; }
for( k, v in pairs(sharedtypes.ctypes) ) { ctypes[k] = v; }

var mt = {}; // metatables

// generic types

var voidp = ffi.typeof("void *");

function pt.void(x) {
  return ffi.cast(voidp, x);
}

var addtypes = {
  size = "size_t",
  ssize = "ssize_t",
  mode = "mode_t",
  dev = "dev_t",
  off = "off_t",
  uid = "uid_t",
  gid = "gid_t",
  pid = "pid_t",
  in_port = "in_port_t",
  sa_family = "sa_family_t",
  socklen = "socklen_t",
  id = "id_t",
  daddr = "daddr_t",
  time = "time_t",
  clock = "clock_t",
  nlink = "nlink_t",
  ino = "ino_t",
  nfds = "nfds_t",
};

// note we cannot add any metatable, as may be declared in os and rump, so not even lenmt added
for( k, v in pairs(addtypes) ) { addtype(types, k, v); }

t.socklen1 = ffi.typeof("socklen_t[1]");
t.off1 = ffi.typeof("off_t[1]");
t.uid1 = ffi.typeof("uid_t[1]");
t.gid1 = ffi.typeof("gid_t[1]");

var errsyms = {}; // reverse lookup by number
var errnames = {}; // lookup error message by number
for( k, v in pairs(c.E) ) {
  errsyms[v] = k;
  errnames[v] = assert(c.errornames[k], "missing error name " .. k);
}

for( k, v in pairs(c.EALIAS || {}) ) {
  c.E[k] = v;
}
c.EALIAS = null;

mt.error = {
  __tostring = function(e) { return errnames[e.errno]; },
  __index = function(e, k) {
    if( k == 'sym' ) { return errsyms[e.errno]; }
    if( k == 'lsym' ) { return errsyms[e.errno]->lower(); }
    if( c.E[k] ) { return c.E[k] == e.errno; }
    error("invalid error " .. k);
  },
  __new = function(tp, errno) {
    if( ! errno ) { errno = ffi.errno(); }
    return ffi.new(tp, errno);
  },
};

t.error = ffi.metatype("struct {int errno;}", mt.error);

mt.timeval = {
  index = {
    time = function(tv) { return tonumber(tv.tv_sec) + tonumber(tv.tv_usec) / 1000000; },
    sec = function(tv) { return tonumber(tv.tv_sec); },
    usec = function(tv) { return tonumber(tv.tv_usec); },
  },
  newindex = {
    time = function(tv, v) {
      var i, f = math.modf(v);
      tv.tv_sec, tv.tv_usec = i, math.floor(f * 1000000);
    },
    sec = function(tv, v) { tv.tv_sec = v; },
    usec = function(tv, v) { tv.tv_usec = v; },
  },
  __new = function(tp, v) {
    if( ! v ) { v = {0, 0}; }
    if( istype(t.timespec, v) ) { v = {v.tv_sec, math.floor(v.tv_nsec / 1000)}; }
    if( type(v) == "table" ) {
      if( v.tv_nsec ) { // compat with timespec
        v.tv_usec = math.floor(v.tv_nsec / 1000);
        v.tv_nsec = 0;
      }
    }
    if( type(v) != "number" ) { return ffi.new(tp, v); }
    var ts = ffi.new(tp);
    ts.time = v;
    return ts;
  },
  __tostring = function(tv) { return tostring(tv.time); },
};

addtype(types, "timeval", "struct timeval", mt.timeval);

mt.timespec = {
  index = {
    time = function(tv) { return tonumber(tv.tv_sec) + tonumber(tv.tv_nsec) / 1000000000; },
    sec = function(tv) { return tonumber(tv.tv_sec); },
    nsec = function(tv) { return tonumber(tv.tv_nsec); },
  },
  newindex = {
    time = function(tv, v) {
      var i, f = math.modf(v);
      tv.tv_sec, tv.tv_nsec = i, math.floor(f * 1000000000);
    },
    sec = function(tv, v) { tv.tv_sec = v; },
    nsec = function(tv, v) { tv.tv_nsec = v; },
  },
  __new = function(tp, v) {
    if( ! v ) { v = {0, 0}; }
    if( istype(t.timeval, v) ) { v = {v.tv_sec, v.tv_usec * 1000}; }
    if( type(v) == "table" ) {
      if( v.tv_usec ) { // compat with timespec TODO add to methods, and use standard new allocation function?
        v.tv_nsec = v.tv_usec * 1000;
        v.tv_usec = 0;
      }
    }
    if( type(v) != "number" ) { return ffi.new(tp, v); }
    var ts = ffi.new(tp);
    ts.time = v;
    return ts;
  },
  __tostring = function(tv) { return tostring(tv.time); },
};

addtype(types, "timespec", "struct timespec", mt.timespec);

// array so cannot just add metamethods
addraw2(types, "timeval2_raw", "struct timeval");
t.timeval2 = function(tv1, tv2) {
  if( ffi.istype(t.timeval2_raw, tv1) ) { return tv1; }
  if( type(tv1) == "table" ) { tv1, tv2 = tv1[1], tv1[2]; }
  var tv = t.timeval2_raw();
  if( tv1 ) { tv[0] = t.timeval(tv1); }
  if( tv2 ) { tv[1] = t.timeval(tv2); }
  return tv;
};

// array so cannot just add metamethods
addraw2(types, "timespec2_raw", "struct timespec");
t.timespec2 = function(ts1, ts2) {
  if( ffi.istype(t.timespec2_raw, ts1) ) { return ts1; }
  if( type(ts1) == "table" ) { ts1, ts2 = ts1[1], ts1[2]; }
  var ts = t.timespec2_raw();
  if( ts1 ) { if( type(ts1) == 'string' ) { ts[0].tv_nsec = c.UTIME[ts1]; } else { ts[0] = t.timespec(ts1); } }
  if( ts2 ) { if( type(ts2) == 'string' ) { ts[1].tv_nsec = c.UTIME[ts2]; } else { ts[1] = t.timespec(ts2); } }
  return ts;
};

mt.groups = {
  __index = function(g, k) {
    return g.list[k - 1];
  },
  __newindex = function(g, k, v) {
    g.list[k - 1] = v;
  },
  __new = function(tp, gs) {
    if( type(gs) == 'number' ) { return ffi.new(tp, gs, gs); }
    return ffi.new(tp, #gs, #gs, gs);
  },
  __len = function(g) { return g.count; },
};

addtype_var(types, "groups", "struct {int count; gid_t list[?];}", mt.groups);

// signal set handlers
var function sigismember(set, sig) {
  var d = bit.rshift(sig - 1, 5); // always 32 bits
  return bit.band(set.sig[d], bit.lshift(1, (sig - 1) % 32)) != 0;
}

var function sigemptyset(set) {
  for( i = 0, s.sigset / 4 - 1 ) {
    if( set.sig[i] != 0 ) { return false; }
  }
  return true;
}

var function sigaddset(set, sig) {
  set = t.sigset(set);
  var d = bit.rshift(sig - 1, 5);
  set.sig[d] = bit.bor(set.sig[d], bit.lshift(1, (sig - 1) % 32));
  return set;
}

var function sigdelset(set, sig) {
  set = t.sigset(set);
  var d = bit.rshift(sig - 1, 5);
  set.sig[d] = bit.band(set.sig[d], bit.bnot(bit.lshift(1, (sig - 1) % 32)));
  return set;
}

var function sigaddsets(set, sigs) { // allow multiple
  if( type(sigs) != "string" ) { return sigaddset(set, sigs); }
  set = t.sigset(set);
  var a = split(",", sigs);
  for( i, v in ipairs(a) ) {
    var s = trim(v);
    var sig = c.SIG[s];
    if( ! sig ) { error("invalid signal: " .. v); } // don't use this format if you don't want exceptions, better than silent ignore
    sigaddset(set, sig);
  }
  return set;
}

var function sigdelsets(set, sigs) { // allow multiple
  if( type(sigs) != "string" ) { return sigdelset(set, sigs); }
  set = t.sigset(set);
  var a = split(",", sigs);
  for( i, v in ipairs(a) ) {
    var s = trim(v);
    var sig = c.SIG[s];
    if( ! sig ) { error("invalid signal: " .. v); } // don't use this format if you don't want exceptions, better than silent ignore
    sigdelset(set, sig);
  }
  return set;
}

mt.sigset = {
  __index = function(set, k) {
    if( k == 'add' ) { return sigaddsets; }
    if( k == 'del' ) { return sigdelsets; }
    if( k == 'isemptyset' ) { return sigemptyset(set); }
    var sig = c.SIG[k];
    if( sig ) { return sigismember(set, sig); }
    error("invalid index " .. k);
  },
  __new = function(tp, str) {
    if( ffi.istype(tp, str) ) { return str; }
    if( ! str ) { return ffi.new(tp); }
    var f = ffi.new(tp);
    var a = split(",", str);
    for( i, v in ipairs(a) ) {
      var st = trim(v);
      var sig = c.SIG[st];
      if( ! sig ) { error("invalid signal: " .. v); } // don't use this format if you don't want exceptions, better than silent ignore
      var d = bit.rshift(sig - 1, 5); // always 32 bits
      f.sig[d] = bit.bor(f.sig[d], bit.lshift(1, (sig - 1) % 32));
    }
    return f;
  },
};

addtype(types, "sigset", "sigset_t", mt.sigset);

mt.sigval = {
  index = {
    int = function(this) { return this.sival_int; },
    ptr = function(this) { return this.sival_ptr; },
  },
  newindex = {
    int = function(this, v) { this.sival_int = v; },
    ptr = function(this, v) { this.sival_ptr = v; },
  },
  __new = function(tp, v) {
    if( ! v || type(v) == "table" ) { return newfn(tp, v); }
    var siv = ffi.new(tp);
    if( type(v) == "number" ) { siv.int = v; } else { siv.ptr = v; }
    return siv;
  },
};

addtype(types, "sigval", "union sigval", mt.sigval); // not always called sigval_t

// cmsg functions, try to hide some of this nasty stuff from the user
var cmsgtype = "struct cmsghdr";
if( abi.rumpfn ) { cmsgtype = abi.rumpfn(cmsgtype); }
var cmsg_hdrsize = ffi.sizeof(ffi.typeof(cmsgtype), 0);
var voidalign = ffi.alignof(ffi.typeof("void *"));
var function cmsg_align(len) { return align(len, voidalign); } // TODO double check this is correct for all OSs
var cmsg_ahdr = cmsg_align(cmsg_hdrsize);
//local function cmsg_space(len) return cmsg_ahdr + cmsg_align(len) end
var function cmsg_len(len) { return cmsg_ahdr + len; }

// TODO move this to sockopt file, like set/getsockopt as very similar mapping
var typemap = {
  [c.SOL.SOCKET] = c.SCM,
};

// TODO add the othes here, they differ by OS
if( c.SOL.IP ) { typemap[c.SOL.IP] = c.IP; }

mt.cmsghdr = {
  __index = {
    len = function(this) { return tonumber(this.cmsg_len); },
    data = function(this) { return this.cmsg_data; },
    datalen = function(this) { return this->len() - cmsg_ahdr; },
    hdrsize = function(this) { return cmsg_hdrsize; }, // constant, but better to have it here
    align = function(this) { return cmsg_align(this->len()); },
    fds = function(this) {
      if( this.cmsg_level == c.SOL.SOCKET && this.cmsg_type == c.SCM.RIGHTS ) {
        var fda = pt.int(this->data());
        var fdc = bit.rshift(this->datalen(), 2); // shift by int size
        var i = 0;
        return function() {
          if( i < fdc ) {
            var fd = t.fd(fda[i]);
            ++i    ;
            return fd;
          }
        };
      } else {
        return function() { };
      }
    },
    credentials = function(this) { // TODO Linux only, NetBSD uses SCM_CREDS
      if( this.cmsg_level == c.SOL.SOCKET && this.cmsg_type == c.SCM.CREDENTIALS ) {
        var cred = pt.ucred(this->data());
        return cred.pid, cred.uid, cred.gid;
      } else {
        return null, "cmsg does not contain credentials";
      }
    },
    setdata = function(this, data, datalen) {
      ffi.copy(this->data(), data, datalen || #data);
    },
    setfd = function(this, fd) { // single fd
      var int = pt.int(this->data());
      int[0] = getfd(fd);
    },
    setfds = function(this, fds) { // general case, note does not check size
      if( type(fds) == "number" || fds.getfd ) { return this->setfd(fds); }
      var int = pt.int(this->data());
      var off = 0;
      for( _, v in ipairs(fds) ) {
        int[off] = getfd(v);
        ++off    ;
      }
    },
  },
  __new = function (tp, level, scm, data, data_size) {
    if( ! data ) { data_size = data_size || 0; }
    level = c.SOL[level];
    if( typemap[level] ) { scm = typemap[level][scm]; }
    if( level == c.SOL.SOCKET && scm == c.SCM.RIGHTS ) {
      if( type(data) == "number" ) { // slightly odd but useful interfaces for fds - TODO document
        data_size = data * s.int;
        data = null;
      } else if( type(data) == "table" ) { data_size = #data * s.int; }
    }
    data_size = data_size || #data;
    var this = ffi.new(tp, data_size, {
      cmsg_len = cmsg_len(data_size),
      cmsg_level = level,
      cmsg_type = scm,
    });
    if( data && (level == c.SOL.SOCKET && scm == c.SCM.RIGHTS) ) {
      this->setfds(data);
    } else if( data ) {
      this->setdata(data, data_size);
    }
    return this;
  },
};

addtype_var(types, "cmsghdr", "struct cmsghdr", mt.cmsghdr);

// msg_control is a bunch of cmsg structs, but these are all different lengths, as they have variable size arrays

// these functions also take and return a raw char pointer to msg_control, to make life easier, as well as the cast cmsg
var function cmsg_firsthdr(msg) {
  var mc = msg.msg_control;
  var cmsg = pt.cmsghdr(mc);
  if( tonumber(msg.msg_controllen) < cmsg->hdrsize() ) { return null; } // hdrsize is a constant, so does not matter if invalid struct
  return mc, cmsg;
}

var function cmsg_nxthdr(msg, buf, cmsg) {
  if( tonumber(cmsg.cmsg_len) < cmsg->hdrsize() ) { return null; } // invalid cmsg
  buf = pt.char(buf);
  var msg_control = pt.char(msg.msg_control);
  buf = buf + cmsg->align(); // find next cmsg
  if( buf + cmsg->hdrsize() > msg_control + msg.msg_controllen ) { return null; } // header would not fit
  cmsg = pt.cmsghdr(buf);
  if( buf + cmsg->align() > msg_control + msg.msg_controllen ) { return null; } // whole cmsg would not fit
  return buf, cmsg;
}

var function cmsg_iter(msg, last_msg_control) {
  var msg_control;
  if( last_msg_control == null ) { // First iteration
    msg_control = pt.char(msg.msg_control);
  } else {
    var last_cmsg = pt.cmsghdr(last_msg_control);
    msg_control = last_msg_control + last_cmsg->align(); // find next cmsg
  }
  var end_offset = pt.char(msg.msg_control) + msg.msg_controllen;
  var cmsg = pt.cmsghdr(msg_control);
  if( msg_control + cmsg->hdrsize() > end_offset ) { return null; } // header would not fit
  if( msg_control + cmsg->align() > end_offset ) { return null; } // whole cmsg would not fit
  return msg_control, cmsg;
}
var function cmsg_headers(msg) {
  return cmsg_iter, msg, null;
}

mt.msghdr = {
  __index = {
    cmsg_firsthdr = cmsg_firsthdr,
    cmsg_nxthdr = cmsg_nxthdr,
    cmsgs = cmsg_headers,
    // TODO add iov
  },
  newindex = {
    name = function(m, n) {
      m.msg_name, m.msg_namelen = n, #n;
    },
    iov = function(m, io) {
      if( ffi.istype(t.iovec, io) ) { // single iovec
        m.msg_iov, m.msg_iovlen = io, 1;
      } else { // iovecs
        m.msg_iov, m.msg_iovlen = io.iov, #io;
      }
    },
    control = function(m, buf) {
      if( buf ) { m.msg_control, m.msg_controllen = buf, #buf; } else { m.msg_control, m.msg_controllen = null, 0; }
    },
  },
  __new = newfn,
};

addtype(types, "msghdr", "struct msghdr", mt.msghdr);

mt.pollfd = {
  index = {
    getfd = function(pfd) { return pfd.fd; },
  }
};

for( k, v in pairs(c.POLL) ) { mt.pollfd.index[k] = function(pfd) { return bit.band(pfd.revents, v) != 0; }; }

addtype(types, "pollfd", "struct pollfd", mt.pollfd);

mt.pollfds = {
  __len = function(p) { return p.count; },
  __new = function(tp, ps) {
    if( type(ps) == 'number' ) { return ffi.new(tp, ps, ps); }
    var count = #ps;
    var fds = ffi.new(tp, count, count);
    for( n = 1, count ) { // TODO ideally we use ipairs on both arrays/tables
      fds.pfd[n - 1].fd = ps[n].fd->getfd();
      fds.pfd[n - 1].events = c.POLL[ps[n].events];
      fds.pfd[n - 1].revents = 0;
    }
    return fds;
  },
  __ipairs = function(p) { return reviter, p.pfd, p.count; }
};

addtype_var(types, "pollfds", "struct {int count; struct pollfd pfd[?];}", mt.pollfds);

mt.rusage = {
  index = {
    utime    = function(ru) { return ru.ru_utime; },
    stime    = function(ru) { return ru.ru_stime; },
    maxrss   = function(ru) { return tonumber(ru.ru_maxrss); },
    ixrss    = function(ru) { return tonumber(ru.ru_ixrss); },
    idrss    = function(ru) { return tonumber(ru.ru_idrss); },
    isrss    = function(ru) { return tonumber(ru.ru_isrss); },
    minflt   = function(ru) { return tonumber(ru.ru_minflt); },
    majflt   = function(ru) { return tonumber(ru.ru_majflt); },
    nswap    = function(ru) { return tonumber(ru.ru_nswap); },
    inblock  = function(ru) { return tonumber(ru.ru_inblock); },
    oublock  = function(ru) { return tonumber(ru.ru_oublock); },
    msgsnd   = function(ru) { return tonumber(ru.ru_msgsnd); },
    msgrcv   = function(ru) { return tonumber(ru.ru_msgrcv); },
    nsignals = function(ru) { return tonumber(ru.ru_nsignals); },
    nvcsw    = function(ru) { return tonumber(ru.ru_nvcsw); },
    nivcsw   = function(ru) { return tonumber(ru.ru_nivcsw); },
  },
  print = {"utime", "stime", "maxrss", "ixrss", "idrss", "isrss", "minflt", "majflt", "nswap",
           "inblock", "oublock", "msgsnd", "msgrcv", "nsignals", "nvcsw", "nivcsw"},
};

addtype(types, "rusage", "struct rusage", mt.rusage);

var function itnormal(v) {
  if( ! v ) { v = {{0, 0}, {0, 0}}; }
  if( v.interval ) {
    v.it_interval = v.interval;
    v.interval = null;
  }
  if( v.value ) {
    v.it_value = v.value;
    v.value = null;
  }
  if( ! v.it_interval ) {
    v.it_interval = v[1];
    v[1] = null;
  }
  if( ! v.it_value ) {
    v.it_value = v[2];
    v[2] = null;
  }
  return v;
}

mt.itimerspec = {
  index = {
    interval = function(it) { return it.it_interval; },
    value = function(it) { return it.it_value; },
  },
  __new = function(tp, v) {
    v = itnormal(v);
    v.it_interval = istype(t.timespec, v.it_interval) || t.timespec(v.it_interval);
    v.it_value = istype(t.timespec, v.it_value) || t.timespec(v.it_value);
    return ffi.new(tp, v);
  },
};

addtype(types, "itimerspec", "struct itimerspec", mt.itimerspec);

mt.itimerval = {
  index = {
    interval = function(it) { return it.it_interval; },
    value = function(it) { return it.it_value; },
  },
  __new = function(tp, v) {
    v = itnormal(v);
    v.it_interval = istype(t.timeval, v.it_interval) || t.timeval(v.it_interval);
    v.it_value = istype(t.timeval, v.it_value) || t.timeval(v.it_value);
    return ffi.new(tp, v);
  },
};

addtype(types, "itimerval", "struct itimerval", mt.itimerval);

mt.macaddr = {
  __tostring = function(m) {
    var hex = {};
    for( i = 1, 6 ) {
      hex[i] = string.format("%02x", m.mac_addr[i - 1]);
    }
    return table.concat(hex, ":");
  },
  __new = function(tp, str) {
    var mac = ffi.new(tp);
    if( str ) {
      for( i = 1, 6 ) {
        var n = tonumber(str->sub(i * 3 - 2, i * 3 - 1), 16); // TODO more checks on syntax
        mac.mac_addr[i - 1] = n;
      }
    }
    return mac;
  },
};

addtype(types, "macaddr", "struct {uint8_t mac_addr[6];}", mt.macaddr);

// include OS specific types
types = ostypes.init(types);
if( bsdtypes ) { types = bsdtypes.init(c, types); }

// define dents type if dirent is defined
if( t.dirent ) {
  t.dirents = function(buf, size) { // buf should be char*
    var i = 0;
    return function() { // TODO work out if possible to make stateless
      while( i < size ) {
        var d = pt.dirent(buf + i);
        i = i + d.d_reclen;
        if( d.ino != 0 ) { return d; } // some systems use ino = 0 for deleted files before removed eg OSX; it is never valid
      }
      return null;
    };
  };
}

return types;

}

return {init = init};


// This simply returns ABI information
// Makes it easier to substitute for non-ffi solution, eg to run tests

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var ffi = require ("ffi");

var function inlibc_fn(k) { return ffi.C[k]; }

var abi = {
  arch = ffi.arch, // ppc, x86, arm, x64, mips
  abi32 = ffi.abi("32bit"), // boolean
  abi64 = ffi.abi("64bit"), // boolean
  le = ffi.abi("le"), // boolean
  be = ffi.abi("be"), // boolean
  os = ffi.os->lower(), // bsd, osx, linux
};

// Makes no difference to us I believe
if( abi.arch == "ppcspe" ) { abi.arch = "ppc"; }

if( abi.arch == "arm" && ! ffi.abi("eabi") ) { error("only support eabi for arm"); }

if( (abi.arch == "mips" || abi.arch == "mipsel") ) { abi.mipsabi = "o32"; } // only one supported now

if( abi.os == "bsd" || abi.os == "osx" ) { abi.bsd = true; } // some shared BSD functionality

// Xen generally behaves like NetBSD, but our tests need to do rump-like setup; bit of a hack
ffi.cdef([=[
  int __ljsyscall_under_xen;
]=]);
if( pcall(inlibc_fn, "__ljsyscall_under_xen") ) { abi.xen = true; }

// BSD detection
// OpenBSD doesn't have sysctlbyname
// The good news is every BSD has utsname
// The bad news is that on FreeBSD it is a legacy version that has 32 byte unless you use __xuname
// fortunately sysname is first so we can use this value
if( ! abi.xen && ! abi.rump && abi.os == "bsd" ) {
  ffi.cdef ([=[
  struct _utsname {
  char    sysname[256];
  char    nodename[256];
  char    release[256];
  char    version[256];
  char    machine[256];
  };
  int uname(struct _utsname *);
  ]=]);
  var uname = ffi.new("struct _utsname");
  ffi.C.uname(uname);
  abi.os = ffi.string(uname.sysname)->lower();
  abi.uname = uname;
}

// rump params
abi.host = abi.os; // real OS, used for rump at present may change this
abi.types = "netbsd"; // you can set to linux, or monkeypatch (see tests) to use Linux types

return abi;

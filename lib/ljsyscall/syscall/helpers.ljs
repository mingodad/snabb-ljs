// misc helper functions that we use across the board

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string, math = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string, math;

var debug, collectgarbage = require ("debug"), collectgarbage;

var abi = require ("syscall.abi");

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var h = {};

// generic assert helper, mainly for tests
function h.assert(cond, err, ...) {
  if( ! cond ) {
    error(tostring(err || "unspecified error")); // annoyingly, assert does not call tostring!
  }
  collectgarbage("collect"); // force gc, to test for bugs
  if( type(cond) == "function" ) { return cond, err, ...; }
  if( cond == true ) { return ...; }
  return cond, ...;
}

var voidp = ffi.typeof("void *");

var function ptvoid(x) {
  return ffi.cast(voidp, x);
}

var function ptt(tp) {
  var ptp = ffi.typeof(tp .. " *");
  return function(x) { return ffi.cast(ptp, x); };
}
h.ptt = ptt;

// constants
h.uint64_max = ffi.cast("uint64_t", 0) - ffi.cast("uint64_t", 1);
h.err64 = ffi.cast("int64_t", -1);
if( abi.abi64 ) { h.errpointer = ptvoid(h.err64); } else { h.errpointer = ptvoid(0xffffffff); }
h.uint32_max = ffi.cast("uint32_t", 0xffffffff);
h.int32_max = 0x7fffffff;
if( abi.abi64 ) { h.longmax = bit.rshift64(h.err64, 1); } else { h.longmax = h.int32_max; }

// generic iterator that counts down so needs no closure to hold state
function h.reviter(array, i) {
  --i    ;
  if( i >= 0 ) { return i, array[i]; }
}

function h.mktype(tp, x) { if( ffi.istype(tp, x) ) { return x; } else { return tp(x); } }
function h.istype(tp, x) { if( ffi.istype(tp, x) ) { return x; } else { return false; } }

var function lenfn(tp) { return ffi.sizeof(tp); }
h.lenfn = lenfn;
h.lenmt = {__len = lenfn};

var tint = ffi.typeof("int");
var function getfd(fd) {
  if( type(fd) == "number" || ffi.istype(tint, fd) ) { return fd; }
  return fd->getfd();
}
h.getfd = getfd;

// generic function for __new
function h.newfn(tp, tab) {
  var obj = ffi.new(tp);
  if( ! tab ) { return obj; }
  // these are split out so __newindex is called, not just initialisers luajit understands
  for( k, v in pairs(tab) ) { if( type(k) == "string" ) { obj[k] = v; } } // set string indexes
  return obj;
}

// generic function for __tostring
var function simpleprint(pt, x) {
  var out = {};
  for( _, v in ipairs(pt) ) { out[#out + 1] = v .. " = " .. tostring(x[v]); }
  return "{ " .. table.concat(out, ", ") .. " }";
}

// type initialisation helpers
function h.addtype(types, name, tp, mt) {
  if( abi.rumpfn ) { tp = abi.rumpfn(tp); }
  if( mt ) {
    if( mt.index && ! mt.__index ) { // generic index method
      var index = mt.index;
      mt.index = null;
      mt.__index = function(tp, k) { if( index[k] ) { return index[k](tp); } else { error("invalid index " .. k); } };
    }
    if( mt.newindex && ! mt.__newindex ) { // generic newindex method
      var newindex = mt.newindex;
      mt.newindex = null;
      mt.__newindex = function(tp, k, v) { if( newindex[k] ) { newindex[k](tp, v); } else { error("invalid index " .. k); } };
    }
    if( ! mt.__len ) { mt.__len = lenfn; } // default length function is just sizeof
    if( ! mt.__tostring && mt.print ) { mt.__tostring = function(x) { return simpleprint(mt.print, x); }; }
    types.t[name] = ffi.metatype(tp, mt);
  } else {
    types.t[name] = ffi.typeof(tp);
  }
  types.ctypes[tp] = types.t[name];
  types.pt[name] = ptt(tp);
  types.s[name] = ffi.sizeof(types.t[name]);
}

// for variables length types, ie those with arrays
function h.addtype_var(types, name, tp, mt) {
  if( abi.rumpfn ) { tp = abi.rumpfn(tp); }
  if( ! mt.__len ) { mt.__len = lenfn; } // default length function is just sizeof, gives instance size for var lngth
  types.t[name] = ffi.metatype(tp, mt);
  types.pt[name] = ptt(tp);
}

function h.addtype_fn(types, name, tp) {
  if( abi.rumpfn ) { tp = abi.rumpfn(tp); }
  types.t[name] = ffi.typeof(tp);
  types.s[name] = ffi.sizeof(types.t[name]);
}

function h.addraw2(types, name, tp) {
  if( abi.rumpfn ) { tp = abi.rumpfn(tp); }
  types.t[name] = ffi.typeof(tp .. "[2]");
}

function h.addtype1(types, name, tp) {
  types.t[name] = ffi.typeof(tp .. "[1]");
  types.s[name] = ffi.sizeof(types.t[name]);
}

function h.addtype2(types, name, tp) {
  types.t[name] = ffi.typeof(tp .. "[2]");
  types.s[name] = ffi.sizeof(types.t[name]);
}

function h.addptrtype(types, name, tp) {
  var ptr = ffi.typeof(tp);
  types.t[name] = function(v) { return ffi.cast(ptr, v); };
  types.s[name] = ffi.sizeof(ptr);
}

// endian conversion
// TODO add tests eg for signs.
if( abi.be ) { // nothing to do
  function h.htonl(b) { return b; }
  function h.htons(b) { return b; }
  function h.convle32(b) { return bit.bswap(b); } // used by file system capabilities, always stored as le
} else {
  function h.htonl(b) { return bit.bswap(b); }
  function h.htons(b) { return bit.rshift(bit.bswap(b), 16); }
  function h.convle32(b) { return b; } // used by file system capabilities, always stored as le
}
h.ntohl = h.htonl; // reverse is the same
h.ntohs = h.htons; // reverse is the same

function h.octal(s) { return tonumber(s, 8); }
var octal = h.octal;

function h.split(delimiter, text) {
  if( delimiter == "" ) { return {text}; }
  if( #text == 0 ) { return {}; }
  var list = {};
  var pos = 1;
  while( true ) {
    var first, last = text->find(delimiter, pos);
    if( first ) {
      list[#list + 1] = text->sub(pos, first - 1);
      pos = last + 1;
    } else {
      list[#list + 1] = text->sub(pos);
      break;
    }
  }
  return list;
}

function h.trim(s) { // TODO should replace underscore with space
  return (s->gsub("^%s*(.-)%s*$", "%1"));
}

var split, trim = h.split, h.trim;

// for AT_FDCWD
function h.atflag(tab) {
  var function flag(cache, str) {
    if( ! str ) { return tab.FDCWD; }
    if( type(str) == "number" ) { return str; }
    if( type(str) != "string" ) { return getfd(str); }
    if( #str == 0 ) { return 0; }
    var s = trim(str)->upper();
    if( #s == 0 ) { return 0; }
    var val = rawget(tab, s);
    if( ! val ) { error("invalid flag " .. s); }
    cache[str] = val;
    return val;
  }
  return setmetatable(tab, {__index = setmetatable({}, {__index = flag}), __call = function(t, a) { return t[a]; }});
}

// for single valued flags
function h.strflag(tab) {
  var function flag(cache, str) {
    if( type(str) != "string" ) { return str; }
    if( #str == 0 ) { return 0; }
    var s = trim(str)->upper();
    if( #s == 0 ) { return 0; }
    var val = rawget(tab, s);
    if( ! val ) { return null; }
    cache[str] = val;
    return val;
  }
  return setmetatable(tab, {__index = setmetatable({}, {__index = flag}), __call = function(t, a) { return t[a]; }});
}

// take a bunch of flags in a string and return a number
// allows multiple comma sep flags that are ORed
function h.multiflags(tab) {
  var function flag(cache, str) {
    if( ! str ) { return 0; }
    if( type(str) != "string" ) { return str; }
    if( #str == 0 ) { return 0; }
    var f = 0;
    var a = split(",", str);
    if( #a == 1 && str == str->upper() ) { return null; } // this is to allow testing for presense, while catching errors
    for( _, v in ipairs(a) ) {
      var s = trim(v)->upper();
      if( #s == 0 ) { error("empty flag"); }
      var val = rawget(tab, s);
      if( ! val ) { error("invalid flag " .. s); }
      f = bit.bor(f, val);
    }
    cache[str] = f;
    return f;
  }
  return setmetatable(tab, {
    __index = setmetatable({}, {__index = flag}),
    __call = function(tab, x, ...) { // this allows easily adding or removing a flag
      var a = tab[x];
      for( _, v in ipairs({...}) ) {
        if( type(v) == "string" && v->find("~") ) { // allow negation eg c.IFF(old, "~UP")
          var sa = split(",", v);
          for( _, vv in ipairs(sa) ) {
            var s = trim(vv)->upper();
            if( #s == 0 ) { error("empty flag"); }
            var negate = false;
            if( s->sub(1, 1) == "~" ) {
              negate = true;
              s = trim(s->sub(2));
              if( #s == 0 ) { error("empty flag"); }
            }
            var val = rawget(tab, s);
            if( ! val ) { error("invalid flag " .. s); }
            if( negate ) { a = bit.band(a, bit.bnot(val)); } else { a = bit.bor(a, val); }
          }
        } else {
          a = bit.bor(a, tab[v]);
        }
      }
      return a;
    },
  });
}

// like multiflags but also allow octal values in string
function h.modeflags(tab) {
  var function flag(cache, str) {
    if( ! str ) { return 0; }
    if( type(str) != "string" ) { return str; }
    if( #str == 0 ) { return 0; }
    var f = 0;
    var a = split(",", str);
    if( #a == 1 && str == str->upper() && str->sub(1,1) != "0" ) { return null; } // this is to allow testing for presense, while catching errors
    for( i, v in ipairs(a) ) {
      var s = trim(v)->upper();
      if( #s == 0 ) { error("empty flag"); }
      var val;
      if( s->sub(1, 1) == "0" ) {
        val = octal(s);
      } else {
        val = rawget(tab, s);
        if( ! val ) { error("invalid flag " .. s); }
      }
      f = bit.bor(f, val);
    }
    cache[str] = f;
    return f;
  }
  return setmetatable(tab, {__index = setmetatable({}, {__index = flag}), __call = function(t, a) { return t[a]; }});
}

function h.swapflags(tab) {
  var function flag(cache, str) {
    if( ! str ) { return 0; }
    if( type(str) != "string" ) { return str; }
    if( #str == 0 ) { return 0; }
    var f = 0;
    var a = split(",", str);
    if( #a == 1 && str == str->upper() ) { return null; } // this is to allow testing for presense, while catching errors
    for( i, v in ipairs(a) ) {
      var s = trim(v)->upper();
      if( #s == 0 ) { error("empty flag"); }
      if( tonumber(s) ) {
        var val = tonumber(s);
        f = bit.bor(f, rawget(tab, "PREFER"), bit.lshift(bit.band(rawget(tab, "PRIO_MASK"), val), rawget(tab, "PRIO_SHIFT")));
      } else {
        var val = rawget(tab, s);
        if( ! val ) { error("invalid flag " .. s); }
        f = bit.bor(f, val);
      }
    }
    cache[str] = f;
    return f;
  }
  return setmetatable(tab, {__index = setmetatable({}, {__index = flag}), __call = function(t, a) { return t[a]; }});
}

// single char flags, eg used for access which allows "rwx"
function h.charflags(tab) {
  var function flag(cache, str) {
    if( ! str ) { return 0; }
    if( type(str) != "string" ) { return str; }
    str = trim(str->upper());
    var flag = 0;
    for( i = 1, #str ) {
      var c = str->sub(i, i);
      var val = rawget(tab, c);
      if( ! val ) { error("invalid flag " .. c); }
      flag = bit.bor(flag, val);
    }
    cache[str] = flag;
    return flag;
  }
  return setmetatable(tab, {__index = setmetatable({}, {__index = flag}), __call = function(t, a) { return t[a]; }});
}

h.divmod = function(a, b) {
  return math.floor(a / b), a % b;
};

h.booltoc = setmetatable({
  [0] = 0,
  [1] = 1,
  [false] = 0,
  [true] = 1,
}, {__call = function(tb, arg) { return tb[arg || 0]; }}); // allow nil as false

function h.ctobool(i) { return tonumber(i) != 0; }

var function align(len, a) { return bit.band(tonumber(len) + a - 1, bit.bnot(a - 1)); }
h.align = align;

return h;


// modularize netlink code as it is large and standalone

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) {

var nl = {}; // exports

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var h = require ("syscall.helpers");

var util = S.util;

var types = S.types;
var c = S.c;

var htonl = h.htonl;
var align = h.align;

var t, pt, s = types.t, types.pt, types.s;

var adtt = {
  [c.AF.INET] = t.in_addr,
  [c.AF.INET6] = t.in6_addr,
};

var function addrtype(af) {
  var tp = adtt[tonumber(af)];
  if( ! tp ) { error("bad address family"); }
  return tp();
}

var function mktype(tp, x) { if( ffi.istype(tp, x) ) { return x; } else { return tp(x); } }

var mt = {}; // metatables
var meth = {};

// similar functions for netlink messages
var function nlmsg_align(len) { return align(len, 4); }
var nlmsg_hdrlen = nlmsg_align(s.nlmsghdr);
var function nlmsg_length(len) { return len + nlmsg_hdrlen; }
var function nlmsg_ok(msg, len) {
  return len >= nlmsg_hdrlen && msg.nlmsg_len >= nlmsg_hdrlen && msg.nlmsg_len <= len;
}
var function nlmsg_next(msg, buf, len) {
  var inc = nlmsg_align(msg.nlmsg_len);
  return pt.nlmsghdr(buf + inc), buf + inc, len - inc;
}

var rta_align = nlmsg_align; // also 4 byte align
var function rta_length(len) { return len + rta_align(s.rtattr); }
var function rta_ok(msg, len) {
  return len >= s.rtattr && msg.rta_len >= s.rtattr && msg.rta_len <= len;
}
var function rta_next(msg, buf, len) {
  var inc = rta_align(msg.rta_len);
  return pt.rtattr(buf + inc), buf + inc, len - inc;
}

var addrlenmap = { // map interface type to length of hardware address TODO are these always same?
  [c.ARPHRD.ETHER] = 6,
  [c.ARPHRD.EETHER] = 6,
  [c.ARPHRD.LOOPBACK] = 6,
};

var ifla_decode = {
  [c.IFLA.IFNAME] = function(ir, buf, len) {
    ir.name = ffi.string(buf);
  },
  [c.IFLA.ADDRESS] = function(ir, buf, len) {
    var addrlen = addrlenmap[ir.type];
    if( (addrlen) ) {
      ir.addrlen = addrlen;
      ir.macaddr = t.macaddr();
      ffi.copy(ir.macaddr, buf, addrlen);
    }
  },
  [c.IFLA.BROADCAST] = function(ir, buf, len) {
    var addrlen = addrlenmap[ir.type]; // TODO always same
    if( (addrlen) ) {
      ir.broadcast = t.macaddr();
      ffi.copy(ir.broadcast, buf, addrlen);
    }
  },
  [c.IFLA.MTU] = function(ir, buf, len) {
    var u = pt.uint(buf);
    ir.mtu = tonumber(u[0]);
  },
  [c.IFLA.LINK] = function(ir, buf, len) {
    var i = pt.int(buf);
    ir.link = tonumber(i[0]);
  },
  [c.IFLA.QDISC] = function(ir, buf, len) {
    ir.qdisc = ffi.string(buf);
  },
  [c.IFLA.STATS] = function(ir, buf, len) {
    ir.stats = t.rtnl_link_stats(); // despite man page, this is what kernel uses. So only get 32 bit stats here.
    ffi.copy(ir.stats, buf, s.rtnl_link_stats);
  }
};

var ifa_decode = {
  [c.IFA.ADDRESS] = function(ir, buf, len) {
    ir.addr = addrtype(ir.family);
    ffi.copy(ir.addr, buf, ffi.sizeof(ir.addr));
  },
  [c.IFA.LOCAL] = function(ir, buf, len) {
    ir.loc = addrtype(ir.family);
    ffi.copy(ir.loc, buf, ffi.sizeof(ir.loc));
  },
  [c.IFA.BROADCAST] = function(ir, buf, len) {
    ir.broadcast = addrtype(ir.family);
    ffi.copy(ir.broadcast, buf, ffi.sizeof(ir.broadcast));
  },
  [c.IFA.LABEL] = function(ir, buf, len) {
    ir.label = ffi.string(buf);
  },
  [c.IFA.ANYCAST] = function(ir, buf, len) {
    ir.anycast = addrtype(ir.family);
    ffi.copy(ir.anycast, buf, ffi.sizeof(ir.anycast));
  },
  [c.IFA.CACHEINFO] = function(ir, buf, len) {
    ir.cacheinfo = t.ifa_cacheinfo();
    ffi.copy(ir.cacheinfo, buf, ffi.sizeof(t.ifa_cacheinfo));
  },
};

var rta_decode = {
  [c.RTA.DST] = function(ir, buf, len) {
    ir.dst = addrtype(ir.family);
    ffi.copy(ir.dst, buf, ffi.sizeof(ir.dst));
  },
  [c.RTA.SRC] = function(ir, buf, len) {
    ir.src = addrtype(ir.family);
    ffi.copy(ir.src, buf, ffi.sizeof(ir.src));
  },
  [c.RTA.IIF] = function(ir, buf, len) {
    var i = pt.int(buf);
    ir.iif = tonumber(i[0]);
  },
  [c.RTA.OIF] = function(ir, buf, len) {
    var i = pt.int(buf);
    ir.oif = tonumber(i[0]);
  },
  [c.RTA.GATEWAY] = function(ir, buf, len) {
    ir.gateway = addrtype(ir.family);
    ffi.copy(ir.gateway, buf, ffi.sizeof(ir.gateway));
  },
  [c.RTA.PRIORITY] = function(ir, buf, len) {
    var i = pt.int(buf);
    ir.priority = tonumber(i[0]);
  },
  [c.RTA.PREFSRC] = function(ir, buf, len) {
    var i = pt.uint32(buf);
    ir.prefsrc = tonumber(i[0]);
  },
  [c.RTA.METRICS] = function(ir, buf, len) {
    var i = pt.int(buf);
    ir.metrics = tonumber(i[0]);
  },
  [c.RTA.TABLE] = function(ir, buf, len) {
    var i = pt.uint32(buf);
    ir.table = tonumber(i[0]);
  },
  [c.RTA.CACHEINFO] = function(ir, buf, len) {
    ir.cacheinfo = t.rta_cacheinfo();
    ffi.copy(ir.cacheinfo, buf, s.rta_cacheinfo);
  },
  // TODO some missing
};

var nda_decode = {
  [c.NDA.DST] = function(ir, buf, len) {
    ir.dst = addrtype(ir.family);
    ffi.copy(ir.dst, buf, ffi.sizeof(ir.dst));
  },
  [c.NDA.LLADDR] = function(ir, buf, len) {
    ir.lladdr = t.macaddr();
    ffi.copy(ir.lladdr, buf, s.macaddr);
  },
  [c.NDA.CACHEINFO] = function(ir, buf, len) {
     ir.cacheinfo = t.nda_cacheinfo();
     ffi.copy(ir.cacheinfo, buf, s.nda_cacheinfo);
  },
  [c.NDA.PROBES] = function(ir, buf, len) {
     // TODO what is this? 4 bytes
  },
};

var ifflist = {};
for( k, _ in pairs(c.IFF) ) { ifflist[#ifflist + 1] = k; }

mt.iff = {
  __tostring = function(f) {
    var s = {};
    for( _, k in pairs(ifflist) ) { if( bit.band(f.flags, c.IFF[k]) != 0 ) { s[#s + 1] = k; } }
    return table.concat(s, ' ');
  },
  __index = function(f, k) {
    if( c.IFF[k] ) { return bit.band(f.flags, c.IFF[k]) != 0; }
  }
};

nl.encapnames = {
  [c.ARPHRD.ETHER] = "Ethernet",
  [c.ARPHRD.LOOPBACK] = "Local Loopback",
};

meth.iflinks = {
  fn = {
    refresh = function(i) {
      var j, err = nl.interfaces();
      if( ! j ) { return null, err; }
      for( k, _ in pairs(i) ) { i[k] = null; }
      for( k, v in pairs(j) ) { i[k] = v; }
      return i;
    },
  },
};

mt.iflinks = {
  __index = function(i, k) {
    if( meth.iflinks.fn[k] ) { return meth.iflinks.fn[k]; }
  },
  __tostring = function(is) {
    var s = {};
    for( _, v in ipairs(is) ) {
      s[#s + 1] = tostring(v);
    }
    return table.concat(s, '\n');
  }
};

meth.iflink = {
  index = {
    family = function(i) { return tonumber(i.ifinfo.ifi_family); },
    type = function(i) { return tonumber(i.ifinfo.ifi_type); },
    typename = function(i) {
      var n = nl.encapnames[i.type];
      return n || 'unknown ' .. i.type;
    },
    index = function(i) { return tonumber(i.ifinfo.ifi_index); },
    flags = function(i) { return setmetatable({flags = tonumber(i.ifinfo.ifi_flags)}, mt.iff); },
    change = function(i) { return tonumber(i.ifinfo.ifi_change); },
  },
  fn = {
    setflags = function(i, flags, change) {
      var ok, err = nl.newlink(i, 0, flags, change || c.IFF.ALL);
      if( ! ok ) { return null, err; }
      return i->refresh();
    },
    up = function(i) { return i->setflags("up", "up"); },
    down = function(i) { return i->setflags("", "up"); },
    setmtu = function(i, mtu) {
      var ok, err = nl.newlink(i.index, 0, 0, 0, "mtu", mtu);
      if( ! ok ) { return null, err; }
      return i->refresh();
    },
    setmac = function(i, mac) {
      var ok, err = nl.newlink(i.index, 0, 0, 0, "address", mac);
      if( ! ok ) { return null, err; }
      return i->refresh();
    },
    address = function(i, address, netmask) { // add address
      if( type(address) == "string" ) { address, netmask = util.inet_name(address, netmask); }
      if( ! address ) { return null; }
      var ok, err;
      if( ffi.istype(t.in6_addr, address) ) {
        ok, err = nl.newaddr(i.index, c.AF.INET6, netmask, "permanent", "local", address);
      } else {
        var broadcast = address->get_mask_bcast(netmask).broadcast;
        ok, err = nl.newaddr(i.index, c.AF.INET, netmask, "permanent", "local", address, "broadcast", broadcast);
      }
      if( ! ok ) { return null, err; }
      return i->refresh();
    },
    deladdress = function(i, address, netmask) {
      if( type(address) == "string" ) { address, netmask = util.inet_name(address, netmask); }
      if( ! address ) { return null; }
      var af;
      if( ffi.istype(t.in6_addr, address) ) { af = c.AF.INET6; } else { af = c.AF.INET; }
      var ok, err = nl.deladdr(i.index, af, netmask, "local", address);
      if( ! ok ) { return null, err; }
      return i->refresh();
    },
    delete = function(i) {
      var ok, err = nl.dellink(i.index);
      if( ! ok ) { return null, err; }
      return true;     
    },
    move_ns = function(i, ns) { // TODO also support file descriptor form as well as pid
      var ok, err = nl.newlink(i.index, 0, 0, 0, "net_ns_pid", ns);
      if( ! ok ) { return null, err; }
      return true; // no longer here so cannot refresh
    },
    rename = function(i, name) {
      var ok, err = nl.newlink(i.index, 0, 0, 0, "ifname", name);
      if( ! ok ) { return null, err; }
      i.name = name; // refresh not working otherwise as done by name TODO fix so by index
      return i->refresh();
    },
    refresh = function(i) {
      var j, err = nl.interface(i.name);
      if( ! j ) { return null, err; }
      for( k, _ in pairs(i) ) { i[k] = null; }
      for( k, v in pairs(j) ) { i[k] = v; }
      return i;
    },
  }
};

mt.iflink = {
  __index = function(i, k) {
    if( meth.iflink.index[k] ) { return meth.iflink.index[k](i); }
    if( meth.iflink.fn[k] ) { return meth.iflink.fn[k]; }
    if( k == "inet" || k == "inet6" ) { return; } // might not be set, as we add it, kernel does not provide
    if( c.ARPHRD[k] ) { return i.ifinfo.ifi_type == c.ARPHRD[k]; }
  },
  __tostring = function(i) {
    var hw = '';
    if( ! i.loopback && i.macaddr ) { hw = '  HWaddr ' .. tostring(i.macaddr); }
    var s = i.name .. string.rep(' ', 10 - #i.name) .. 'Link encap:' .. i.typename .. hw .. '\n';
    if( i.inet ) { for( a = 1, #i.inet ) {
      s = s .. '          ' .. 'inet addr: ' .. tostring(i.inet[a].addr) .. '/' .. i.inet[a].prefixlen .. '\n';
    } }
    if( i.inet6 ) { for( a = 1, #i.inet6 ) {
      s = s .. '          ' .. 'inet6 addr: ' .. tostring(i.inet6[a].addr) .. '/' .. i.inet6[a].prefixlen .. '\n';
    } }
      s = s .. '          ' .. tostring(i.flags) .. '  MTU: ' .. i.mtu .. '\n';
      s = s .. '          ' .. 'RX packets:' .. i.stats.rx_packets .. ' errors:' .. i.stats.rx_errors .. ' dropped:' .. i.stats.rx_dropped .. '\n';
      s = s .. '          ' .. 'TX packets:' .. i.stats.tx_packets .. ' errors:' .. i.stats.tx_errors .. ' dropped:' .. i.stats.tx_dropped .. '\n';
    return s;
  }
};

meth.rtmsg = {
  index = {
    family = function(i) { return tonumber(i.rtmsg.rtm_family); },
    dst_len = function(i) { return tonumber(i.rtmsg.rtm_dst_len); },
    src_len = function(i) { return tonumber(i.rtmsg.rtm_src_len); },
    index = function(i) { return tonumber(i.oif); },
    flags = function(i) { return tonumber(i.rtmsg.rtm_flags); },
    dest = function(i) { return i.dst || addrtype(i.family); },
    source = function(i) { return i.src || addrtype(i.family); },
    gw = function(i) { return i.gateway || addrtype(i.family); },
    // might not be set in Lua table, so return nil
    iif = function() { return null; },
    oif = function() { return null; },
    src = function() { return null; },
    dst = function() { return null; },
  },
  flags = { // TODO rework so iterates in fixed order. TODO Do not seem to be set, find how to retrieve.
    [c.RTF.UP] = "U",
    [c.RTF.GATEWAY] = "G",
    [c.RTF.HOST] = "H",
    [c.RTF.REINSTATE] = "R",
    [c.RTF.DYNAMIC] = "D",
    [c.RTF.MODIFIED] = "M",
    [c.RTF.REJECT] = "!",
  }
};

mt.rtmsg = {
  __index = function(i, k) {
    if( meth.rtmsg.index[k] ) { return meth.rtmsg.index[k](i); }
    // if S.RTF[k] then return bit.band(i.flags, S.RTF[k]) ~= 0 end -- TODO see above
  },
  __tostring = function(i) { // TODO make more like output of ip route
    var s = "dst: " .. tostring(i.dest) .. "/" .. i.dst_len .. " gateway: " .. tostring(i.gw) .. " src: " .. tostring(i.source) .. "/" .. i.src_len .. " if: " .. (i.output || i.oif);
    return s;
  },
};

meth.routes = {
  fn = {
    match = function(rs, addr, len) { // exact match
      if( type(addr) == "string" ) {
        var sl = addr->find("/", 1, true);
        if( sl ) {
          len = tonumber(addr->sub(sl + 1));
          addr = addr->sub(1, sl - 1);
        }
        if( rs.family == c.AF.INET6 ) { addr = t.in6_addr(addr); } else { addr = t.in_addr(addr); }
      }
      var matches = {};
      for( _, v in ipairs(rs) ) {
        if( len == v.dst_len ) {
          if( v.family == c.AF.INET ) {
            if( addr.s_addr == v.dest.s_addr ) { matches[#matches + 1] = v; }
          } else {
            var match = true;
            for( i = 0, 15 ) {
              if( addr.s6_addr[i] != v.dest.s6_addr[i] ) { match = false; }
            }
            if( match ) { matches[#matches + 1] = v; }
          }
        }
      }
      matches.tp, matches.family = rs.tp, rs.family;
      return setmetatable(matches, mt.routes);
    },
    refresh = function(rs) {
      var nr = nl.routes(rs.family, rs.tp);
      for( k, _ in pairs(rs) ) { rs[k] = null; }
      for( k, v in pairs(nr) ) { rs[k] = v; }
      return rs;
    },
  }
};

mt.routes = {
  __index = function(i, k) {
    if( meth.routes.fn[k] ) { return meth.routes.fn[k]; }
  },
  __tostring = function(is) {
    var s = {};
    for( k, v in ipairs(is) ) {
      s[#s + 1] = tostring(v);
    }
    return table.concat(s, '\n');
  },
};

meth.ifaddr = {
  index = {
    family = function(i) { return tonumber(i.ifaddr.ifa_family); },
    prefixlen = function(i) { return tonumber(i.ifaddr.ifa_prefixlen); },
    index = function(i) { return tonumber(i.ifaddr.ifa_index); },
    flags = function(i) { return tonumber(i.ifaddr.ifa_flags); },
    scope = function(i) { return tonumber(i.ifaddr.ifa_scope); },
  }
};

mt.ifaddr = {
  __index = function(i, k) {
    if( meth.ifaddr.index[k] ) { return meth.ifaddr.index[k](i); }
    if( c.IFA_F[k] ) { return bit.band(i.ifaddr.ifa_flags, c.IFA_F[k]) != 0; }
  }
};

// TODO functions repetitious
var function decode_link(buf, len) {
  var iface = pt.ifinfomsg(buf);
  buf = buf + nlmsg_align(s.ifinfomsg);
  len = len - nlmsg_align(s.ifinfomsg);
  var rtattr = pt.rtattr(buf);
  var ir = setmetatable({ifinfo = t.ifinfomsg()}, mt.iflink);
  ffi.copy(ir.ifinfo, iface, s.ifinfomsg);
  while( rta_ok(rtattr, len) ) {
    if( ifla_decode[rtattr.rta_type] ) {
      ifla_decode[rtattr.rta_type](ir, buf + rta_length(0), rta_align(rtattr.rta_len) - rta_length(0));
    }
    rtattr, buf, len = rta_next(rtattr, buf, len);
  }
  return ir;
}

var function decode_address(buf, len) {
  var addr = pt.ifaddrmsg(buf);
  buf = buf + nlmsg_align(s.ifaddrmsg);
  len = len - nlmsg_align(s.ifaddrmsg);
  var rtattr = pt.rtattr(buf);
  var ir = setmetatable({ifaddr = t.ifaddrmsg(), addr = {}}, mt.ifaddr);
  ffi.copy(ir.ifaddr, addr, s.ifaddrmsg);
  while( rta_ok(rtattr, len) ) {
    if( ifa_decode[rtattr.rta_type] ) {
      ifa_decode[rtattr.rta_type](ir, buf + rta_length(0), rta_align(rtattr.rta_len) - rta_length(0));
    }
    rtattr, buf, len = rta_next(rtattr, buf, len);
  }
  return ir;
}

var function decode_route(buf, len) {
  var rt = pt.rtmsg(buf);
  buf = buf + nlmsg_align(s.rtmsg);
  len = len - nlmsg_align(s.rtmsg);
  var rtattr = pt.rtattr(buf);
  var ir = setmetatable({rtmsg = t.rtmsg()}, mt.rtmsg);
  ffi.copy(ir.rtmsg, rt, s.rtmsg);
  while( rta_ok(rtattr, len) ) {
    if( rta_decode[rtattr.rta_type] ) {
      rta_decode[rtattr.rta_type](ir, buf + rta_length(0), rta_align(rtattr.rta_len) - rta_length(0));
    } else { error("NYI: " .. rtattr.rta_type);
    }
    rtattr, buf, len = rta_next(rtattr, buf, len);
  }
  return ir;
}

var function decode_neigh(buf, len) {
  var rt = pt.rtmsg(buf);
  buf = buf + nlmsg_align(s.rtmsg);
  len = len - nlmsg_align(s.rtmsg);
  var rtattr = pt.rtattr(buf);
  var ir = setmetatable({rtmsg = t.rtmsg()}, mt.rtmsg);
  ffi.copy(ir.rtmsg, rt, s.rtmsg);
  while( rta_ok(rtattr, len) ) {
    if( nda_decode[rtattr.rta_type] ) {
      nda_decode[rtattr.rta_type](ir, buf + rta_length(0), rta_align(rtattr.rta_len) - rta_length(0));
    } else { error("NYI: " .. rtattr.rta_type);
    }
    rtattr, buf, len = rta_next(rtattr, buf, len);
  }
  return ir;
}

// TODO other than the first few these could be a table
var nlmsg_data_decode = {
  [c.NLMSG.NOOP] = function(r, buf, len) { return r; },
  [c.NLMSG.ERROR] = function(r, buf, len) {
    var e = pt.nlmsgerr(buf);
    if( e.error != 0 ) { r.error = t.error(-e.error); } else { r.ack = true; } // error zero is ACK, others negative
    return r;
  },
  [c.NLMSG.DONE] = function(r, buf, len) { return r; },
  [c.NLMSG.OVERRUN] = function(r, buf, len) {
    r.overrun = true;
    return r;
  },
  [c.RTM.NEWADDR] = function(r, buf, len) {
    var ir = decode_address(buf, len);
    ir.op, ir.newaddr, ir.nl = "newaddr", true, c.RTM.NEWADDR;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.DELADDR] = function(r, buf, len) {
    var ir = decode_address(buf, len);
    ir.op, ir.deladdr, ir.nl = "delddr", true, c.RTM.DELADDR;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.GETADDR] = function(r, buf, len) {
    var ir = decode_address(buf, len);
    ir.op, ir.getaddr, ir.nl = "getaddr", true, c.RTM.GETADDR;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.NEWLINK] = function(r, buf, len) {
    var ir = decode_link(buf, len);
    ir.op, ir.newlink, ir.nl = "newlink", true, c.RTM.NEWLINK;
    r[ir.name] = ir;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.DELLINK] = function(r, buf, len) {
    var ir = decode_link(buf, len);
    ir.op, ir.dellink, ir.nl = "dellink", true, c.RTM.DELLINK;
    r[ir.name] = ir;
    r[#r + 1] = ir;
    return r;
  },
  // TODO need test that returns these, assume updates do
  [c.RTM.GETLINK] = function(r, buf, len) {
    var ir = decode_link(buf, len);
    ir.op, ir.getlink, ir.nl = "getlink", true, c.RTM.GETLINK;
    r[ir.name] = ir;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.NEWROUTE] = function(r, buf, len) {
    var ir = decode_route(buf, len);
    ir.op, ir.newroute, ir.nl = "newroute", true, c.RTM.NEWROUTE;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.DELROUTE] = function(r, buf, len) {
    var ir = decode_route(buf, len);
    ir.op, ir.delroute, ir.nl = "delroute", true, c.RTM.DELROUTE;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.GETROUTE] = function(r, buf, len) {
    var ir = decode_route(buf, len);
    ir.op, ir.getroute, ir.nl = "getroute", true, c.RTM.GETROUTE;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.NEWNEIGH] = function(r, buf, len) {
    var ir = decode_neigh(buf, len);
    ir.op, ir.newneigh, ir.nl = "newneigh", true, c.RTM.NEWNEIGH;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.DELNEIGH] = function(r, buf, len) {
    var ir = decode_neigh(buf, len);
    ir.op, ir.delneigh, ir.nl = "delneigh", true, c.RTM.DELNEIGH;
    r[#r + 1] = ir;
    return r;
  },
  [c.RTM.GETNEIGH] = function(r, buf, len) {
    var ir = decode_neigh(buf, len);
    ir.op, ir.getneigh, ir.nl = "getneigh", true, c.RTM.GETNEIGH;
    r[#r + 1] = ir;
    return r;
  },
};

function nl.read(s, addr, bufsize, untildone) {
  addr = addr || t.sockaddr_nl(); // default to kernel
  bufsize = bufsize || 8192;
  var reply = t.buffer(bufsize);
  var ior = t.iovecs({{reply, bufsize}});
  var m = t.msghdr({msg_iov = ior.iov, msg_iovlen = #ior, msg_name = addr, msg_namelen = ffi.sizeof(addr)});

  var done = false; // what should we do if we get a done message but there is some extra buffer? could be next message...
  var r = {};

  while( ! done ) {
    var len, err = s->recvmsg(m);
    if( ! len ) { return null, err; }
    var buffer = reply;

    var msg = pt.nlmsghdr(buffer);

    while( ! done && nlmsg_ok(msg, len) ) {
      var tp = tonumber(msg.nlmsg_type);

      if( nlmsg_data_decode[tp] ) {
        r = nlmsg_data_decode[tp](r, buffer + nlmsg_hdrlen, msg.nlmsg_len - nlmsg_hdrlen);

        if( r.overrun ) { return S.read(s, addr, bufsize * 2); } // TODO add test
        if( r.error ) { return null, r.error; } // not sure what the errors mean though!
        if( r.ack ) { done = true; }

      } else { error("unknown data " .. tp);
      }

      if( tp == c.NLMSG.DONE ) { done = true; }
      msg, buffer, len = nlmsg_next(msg, buffer, len);
    }
    if( ! untildone ) { done = true; }
  }

  return r;
}

// TODO share with read side
var ifla_msg_types = {
  ifla = {
    // IFLA.UNSPEC
    [c.IFLA.ADDRESS] = t.macaddr,
    [c.IFLA.BROADCAST] = t.macaddr,
    [c.IFLA.IFNAME] = "asciiz",
    // TODO IFLA.MAP
    [c.IFLA.MTU] = t.uint32,
    [c.IFLA.LINK] = t.uint32,
    [c.IFLA.MASTER] = t.uint32,
    [c.IFLA.TXQLEN] = t.uint32,
    [c.IFLA.WEIGHT] = t.uint32,
    [c.IFLA.OPERSTATE] = t.uint8,
    [c.IFLA.LINKMODE] = t.uint8,
    [c.IFLA.LINKINFO] = {"ifla_info", c.IFLA_INFO},
    [c.IFLA.NET_NS_PID] = t.uint32,
    [c.IFLA.NET_NS_FD] = t.uint32,
    [c.IFLA.IFALIAS] = "asciiz",
    //[c.IFLA.VFINFO_LIST] = "nested",
    //[c.IFLA.VF_PORTS] = "nested",
    //[c.IFLA.PORT_SELF] = "nested",
    //[c.IFLA.AF_SPEC] = "nested",
  },
  ifla_info = {
    [c.IFLA_INFO.KIND] = "ascii",
    [c.IFLA_INFO.DATA] = "kind",
  },
  ifla_vlan = {
    [c.IFLA_VLAN.ID] = t.uint16,
    // other vlan params
  },
  ifa = {
    // IFA.UNSPEC
    [c.IFA.ADDRESS] = "address",
    [c.IFA.LOCAL] = "address",
    [c.IFA.LABEL] = "asciiz",
    [c.IFA.BROADCAST] = "address",
    [c.IFA.ANYCAST] = "address",
    // IFA.CACHEINFO
  },
  rta = {
    // RTA_UNSPEC
    [c.RTA.DST] = "address",
    [c.RTA.SRC] = "address",
    [c.RTA.IIF] = t.uint32,
    [c.RTA.OIF] = t.uint32,
    [c.RTA.GATEWAY] = "address",
    [c.RTA.PRIORITY] = t.uint32,
    [c.RTA.METRICS] = t.uint32,
    //          RTA.PREFSRC
    //          RTA.MULTIPATH
    //          RTA.PROTOINFO
    //          RTA.FLOW
    //          RTA.CACHEINFO
  },
  veth_info = {
    // VETH_INFO_UNSPEC
    [c.VETH_INFO.PEER] = {"ifla", c.IFLA},
  },
  nda = {
    [c.NDA.DST]       = "address",
    [c.NDA.LLADDR]    = t.macaddr,
    [c.NDA.CACHEINFO] = t.nda_cacheinfo,
//    [c.NDA.PROBES] = ,
  },
};

/* TODO add
static const struct nla_policy ifla_vfinfo_policy[IFLA_VF_INFO_MAX+1] = {
        [IFLA_VF_INFO]          = { .type = NLA_NESTED },
};

static const struct nla_policy ifla_vf_policy[IFLA_VF_MAX+1] = {
        [IFLA_VF_MAC]           = { .type = NLA_BINARY,
                                    .len = sizeof(struct ifla_vf_mac) },
        [IFLA_VF_VLAN]          = { .type = NLA_BINARY,
                                    .len = sizeof(struct ifla_vf_vlan) },
        [IFLA_VF_TX_RATE]       = { .type = NLA_BINARY,
                                    .len = sizeof(struct ifla_vf_tx_rate) },
        [IFLA_VF_SPOOFCHK]      = { .type = NLA_BINARY,
                                    .len = sizeof(struct ifla_vf_spoofchk) },
};

static const struct nla_policy ifla_port_policy[IFLA_PORT_MAX+1] = {
        [IFLA_PORT_VF]          = { .type = NLA_U32 },
        [IFLA_PORT_PROFILE]     = { .type = NLA_STRING,
                                    .len = PORT_PROFILE_MAX },
        [IFLA_PORT_VSI_TYPE]    = { .type = NLA_BINARY,
                                    .len = sizeof(struct ifla_port_vsi)},
        [IFLA_PORT_INSTANCE_UUID] = { .type = NLA_BINARY,
                                      .len = PORT_UUID_MAX },
        [IFLA_PORT_HOST_UUID]   = { .type = NLA_STRING,
                                    .len = PORT_UUID_MAX },
        [IFLA_PORT_REQUEST]     = { .type = NLA_U8, },
        [IFLA_PORT_RESPONSE]    = { .type = NLA_U16, },
};
*/

var function ifla_getmsg(args, messages, values, tab, lookup, kind, af) {
  var msg = table.remove(args, 1);
  var value, len;
  var tp;

  if( type(msg) == "table" ) { // for nested attributes
    var nargs = msg;
    len = 0;
    while( #nargs != 0 ) {
      var nlen;
      nlen, nargs, messages, values, kind = ifla_getmsg(nargs, messages, values, tab, lookup, kind, af);
      len +=   nlen;
    }
    return len, args, messages, values, kind;
  }

  if( type(msg) == "cdata" || type(msg) == "userdata" ) {
    tp = msg;
    value = table.remove(args, 1);
    if( ! value ) { error("not enough arguments"); }
    value = mktype(tp, value);
    len = ffi.sizeof(value);
    messages[#messages + 1] = tp;
    values[#values + 1] = value;
    return len, args, messages, values, kind;
  }

  var rawmsg = msg;
  msg = lookup[msg];

  tp = ifla_msg_types[tab][msg];
  if( ! tp ) { error("unknown message type " .. tostring(rawmsg) .. " in " .. tab); }

  if( tp == "kind" ) {
    var kinds = {
      vlan = {"ifla_vlan", c.IFLA_VLAN},
      veth = {"veth_info", c.VETH_INFO},
    };
    tp = kinds[kind];
  }

  if( type(tp) == "table" ) {
    value = t.rtattr({rta_type = msg}); // missing rta_len, but have reference and can fix

    messages[#messages + 1] = t.rtattr;
    values[#values + 1] = value;

    tab, lookup = tp[1], tp[2];

    len, args, messages, values, kind = ifla_getmsg(args, messages, values, tab, lookup, kind, af);
    len = nlmsg_align(s.rtattr) + len;

    value.rta_len = len;

    return len, args, messages, values, kind;

  // recursion base case, just a value, not nested

  } else {
    value = table.remove(args, 1);
    if( ! value ) { error("not enough arguments"); }
  }

  if( tab == "ifla_info" && msg == c.IFLA_INFO.KIND ) {
    kind = value;
  }

  var slen;

  if( tp == "asciiz" ) { // zero terminated
    tp = t.buffer(#value + 1);
    slen = nlmsg_align(s.rtattr) + #value + 1;
  } else if( tp == "ascii" ) { // not zero terminated
    tp = t.buffer(#value);
    slen = nlmsg_align(s.rtattr) + #value;
  } else {
    if( tp == "address" ) {
      tp = adtt[tonumber(af)];
    }
    value = mktype(tp, value);
  }

  len = nlmsg_align(s.rtattr) + nlmsg_align(ffi.sizeof(tp));
  slen = slen || len;

  messages[#messages + 1] = t.rtattr;
  messages[#messages + 1] = tp;
  values[#values + 1] = t.rtattr({rta_type = msg, rta_len = slen});
  values[#values + 1] = value;

  return len, args, messages, values, kind;
}

var function ifla_f(tab, lookup, af, ...) {
  var len, kind;
  var messages, values = {t.nlmsghdr}, {false};

  var args = {...};
  while( #args != 0 ) {
    len, args, messages, values, kind = ifla_getmsg(args, messages, values, tab, lookup, kind, af);
  }

  len = 0;
  var offsets = {};
  var alignment = nlmsg_align(1);
  for( i, tp in ipairs(messages) ) {
    var item_alignment = align(ffi.sizeof(tp), alignment);
    offsets[i] = len;
    len +=   item_alignment;
  }
  var buf = t.buffer(len);

  for( i = 2, #offsets ) { // skip header
    var value = values[i];
    if( type(value) == "string" ) {
      ffi.copy(buf + offsets[i], value);
    } else {
      // slightly nasty
      if( ffi.istype(t.uint32, value) ) { value = t.uint32_1(value); }
      if( ffi.istype(t.uint16, value) ) { value = t.uint16_1(value); }
      if( ffi.istype(t.uint8, value) ) { value = t.uint8_1(value); }
      ffi.copy(buf + offsets[i], value, ffi.sizeof(value));
    }
  }

  return buf, len;
}

var rtpref = {
  [c.RTM.NEWLINK] = {"ifla", c.IFLA},
  [c.RTM.GETLINK] = {"ifla", c.IFLA},
  [c.RTM.DELLINK] = {"ifla", c.IFLA},
  [c.RTM.NEWADDR] = {"ifa", c.IFA},
  [c.RTM.GETADDR] = {"ifa", c.IFA},
  [c.RTM.DELADDR] = {"ifa", c.IFA},
  [c.RTM.NEWROUTE] = {"rta", c.RTA},
  [c.RTM.GETROUTE] = {"rta", c.RTA},
  [c.RTM.DELROUTE] = {"rta", c.RTA},
  [c.RTM.NEWNEIGH] = {"nda", c.NDA},
  [c.RTM.DELNEIGH] = {"nda", c.NDA},
  [c.RTM.GETNEIGH] = {"nda", c.NDA},
  [c.RTM.NEWNEIGHTBL] = {"ndtpa", c.NDTPA},
  [c.RTM.GETNEIGHTBL] = {"ndtpa", c.NDTPA},
  [c.RTM.SETNEIGHTBL] = {"ndtpa", c.NDTPA},
};

function nl.socket(tp, addr) {
  tp = c.NETLINK[tp];
  var sock, err = S.socket(c.AF.NETLINK, c.SOCK.RAW, tp);
  if( ! sock ) { return null, err; }
  if( addr ) {
    if( type(addr) == "table" ) { addr.type = tp; } // need type to convert group names from string
    if( ! ffi.istype(t.sockaddr_nl, addr) ) { addr = t.sockaddr_nl(addr); }
    var ok;
    ok, err = S.bind(sock, addr);
    if( ! ok ) {
      S.close(sock);
      return null, err;
    }
  }
  return sock;
}

function nl.write(sock, dest, ntype, flags, af, ...) {
  var a, err = sock->getsockname(); // to get bound address
  if( ! a ) { return null, err; }

  dest = dest || t.sockaddr_nl(); // kernel destination default

  var tl = rtpref[ntype];
  if( ! tl ) { error("NYI: ", ntype); }
  var tab, lookup = tl[1], tl[2];

  var buf, len = ifla_f(tab, lookup, af, ...);

  var hdr = pt.nlmsghdr(buf);

  hdr[0] = {nlmsg_len = len, nlmsg_type = ntype, nlmsg_flags = flags, nlmsg_seq = sock->seq(), nlmsg_pid = a.pid};

  var ios = t.iovecs({{buf, len}});
  var m = t.msghdr({msg_iov = ios.iov, msg_iovlen = #ios, msg_name = dest, msg_namelen = s.sockaddr_nl});

  return sock->sendmsg(m);
}

// TODO "route" should be passed in as parameter, test with other netlink types
var function nlmsg(ntype, flags, af, ...) {
  ntype = c.RTM[ntype];
  flags = c.NLM_F[flags];
  var sock, err = nl.socket("route", {}); // bind to empty sockaddr_nl, kernel fills address
  if( ! sock ) { return null, err; }

  var k = t.sockaddr_nl(); // kernel destination

  var ok;
  ok, err = nl.write(sock, k, ntype, flags, af, ...);
  if( ! ok ) {
    sock->close();
    return null, err;
  }

  var r;
  r, err = nl.read(sock, k, null, true); // true means until get done message
  if( ! r ) {
    sock->close();
    return null, err;
  }

  ok, err = sock->close();
  if( ! ok ) { return null, err; }

  return r;
}

// TODO do not have all these different arguments for these functions, pass a table for initialization. See also iplink.

function nl.newlink(index, flags, iflags, change, ...) {
  if( change == 0 ) { change = c.IFF.NONE; } // 0 should work, but does not
  flags = c.NLM_F("request", "ack", flags);
  if( type(index) == 'table' ) { index = index.index; }
  var ifv = {ifi_index = index, ifi_flags = c.IFF[iflags], ifi_change = c.IFF[change]};
  return nlmsg("newlink", flags, null, t.ifinfomsg, ifv, ...);
}

function nl.dellink(index, ...) {
  if( type(index) == 'table' ) { index = index.index; }
  var ifv = {ifi_index = index};
  return nlmsg("dellink", "request, ack", null, t.ifinfomsg, ifv, ...);
}

// read interfaces and details.
function nl.getlink(...) {
  return nlmsg("getlink", "request, dump", null, t.rtgenmsg, {rtgen_family = c.AF.PACKET}, ...);
}

// read routes
function nl.getroute(af, tp, tab, prot, scope, ...) {
  var rtm = t.rtmsg({family = af, table = tab, protocol = prot, type = tp, scope = scope});
  var r, err = nlmsg(c.RTM.GETROUTE, "request, dump", af, t.rtmsg, rtm);
  if( ! r ) { return null, err; }
  return setmetatable(r, mt.routes);
}

function nl.routes(af, tp) {
  af = c.AF[af];
  if( ! tp ) { tp = c.RTN.UNICAST; }
  tp = c.RTN[tp];
  var r, err = nl.getroute(af, tp);
  if( ! r ) { return null, err; }
  var ifs;
  ifs, err = nl.getlink();
  if( ! ifs ) { return null, err; }
  var indexmap = {}; // TODO turn into metamethod as used elsewhere
  for( i, v in pairs(ifs) ) {
    v.inet, v.inet6 = {}, {};
    indexmap[v.index] = i;
  }
  for( k, v in ipairs(r) ) {
    if( ifs[indexmap[v.iif]] ) { v.input = ifs[indexmap[v.iif]].name; }
    if( ifs[indexmap[v.oif]] ) { v.output = ifs[indexmap[v.oif]].name; }
    if( tp > 0 && v.rtmsg.rtm_type != tp ) { r[k] = null; } // filter unwanted routes
  }
  r.family = af;
  r.tp = tp;
  return r;
}

var function preftable(tab, prefix) {
  for( k, v in pairs(tab) ) {
    if( k->sub(1, #prefix) != prefix ) {
      tab[prefix .. k] = v;
      tab[k] = null;
    }
  }
  return tab;
}

function nl.newroute(flags, rtm, ...) {
  flags = c.NLM_F("request", "ack", flags);
  rtm = mktype(t.rtmsg, rtm);
  return nlmsg("newroute", flags, rtm.family, t.rtmsg, rtm, ...);
}

function nl.delroute(rtm, ...) {
  rtm = mktype(t.rtmsg, rtm);
  return nlmsg("delroute", "request, ack", rtm.family, t.rtmsg, rtm, ...);
}

// read addresses from interface TODO flag cleanup
function nl.getaddr(af, ...) {
  var family = c.AF[af];
  var ifav = {ifa_family = family};
  return nlmsg("getaddr", "request, root", family, t.ifaddrmsg, ifav, ...);
}

// TODO may need ifa_scope
function nl.newaddr(index, af, prefixlen, flags, ...) {
  if( type(index) == 'table' ) { index = index.index; }
  var family = c.AF[af];
  var ifav = {ifa_family = family, ifa_prefixlen = prefixlen || 0, ifa_flags = c.IFA_F[flags], ifa_index = index}; //__TODO in __new
  return nlmsg("newaddr", "request, ack", family, t.ifaddrmsg, ifav, ...);
}

function nl.deladdr(index, af, prefixlen, ...) {
  if( type(index) == 'table' ) { index = index.index; }
  var family = c.AF[af];
  var ifav = {ifa_family = family, ifa_prefixlen = prefixlen || 0, ifa_flags = 0, ifa_index = index};
  return nlmsg("deladdr", "request, ack", family, t.ifaddrmsg, ifav, ...);
}

function nl.getneigh(index, tab, ...) {
  if( type(index) == 'table' ) { index = index.index; }
  tab.ifindex = index;
  var ndm = t.ndmsg(tab);
  return nlmsg("getneigh", "request, dump", ndm.family, t.ndmsg, ndm, ...);
}

function nl.newneigh(index, tab, ...) {
  if( type(index) == 'table' ) { index = index.index; }
  tab.ifindex = index;
  var ndm = t.ndmsg(tab);
  return nlmsg("newneigh", "request, ack, excl, create", ndm.family, t.ndmsg, ndm, ...);
}

function nl.delneigh(index, tab, ...) {
  if( type(index) == 'table' ) { index = index.index; }
  tab.ifindex = index;
  var ndm = t.ndmsg(tab);
  return nlmsg("delneigh", "request, ack", ndm.family, t.ndmsg, ndm, ...);
}

function nl.interfaces() { // returns with address info too.
  var ifs, err = nl.getlink();
  if( ! ifs ) { return null, err; }
  var addr4, addr6;
  addr4, err = nl.getaddr(c.AF.INET);
  if( ! addr4 ) { return null, err; }
  addr6, err = nl.getaddr(c.AF.INET6);
  if( ! addr6 ) { return null, err; }
  var indexmap = {};
  for( i, v in pairs(ifs) ) {
    v.inet, v.inet6 = {}, {};
    indexmap[v.index] = i;
  }
  for( i = 1, #addr4 ) {
    var v = ifs[indexmap[addr4[i].index]];
    v.inet[#v.inet + 1] = addr4[i];
  }
  for( i = 1, #addr6 ) {
    var v = ifs[indexmap[addr6[i].index]];
    v.inet6[#v.inet6 + 1] = addr6[i];
  }
  return setmetatable(ifs, mt.iflinks);
}

function nl.interface(i) { // could optimize just to retrieve info for one
  var ifs, err = nl.interfaces();
  if( ! ifs ) { return null, err; }
  return ifs[i];
}

var link_process_f;
var link_process = { // TODO very incomplete. generate?
  name = function(args, v) { return {"ifname", v}; },
  link = function(args, v) { return {"link", v}; },
  address = function(args, v) { return {"address", v}; },
  type = function(args, v, tab) {
    if( v == "vlan" ) {
      var id = tab.id;
      if( id ) {
        tab.id = null;
        return {"linkinfo", {"kind", "vlan", "data", {"id", id}}};
     }
    } else if( v == "veth" ) {
      var peer = tab.peer;
      tab.peer = null;
      var peertab = link_process_f(peer);
      return {"linkinfo", {"kind", "veth", "data", {"peer", {t.ifinfomsg, {}, peertab}}}};
    }
    return {"linkinfo", "kind", v};
  },
};

function link_process_f(tab, args) {
  args = args || {};
  for( _, k in ipairs({"link", "name", "type"}) ) {
    var v = tab[k];
    if( v ) {
      if( link_process[k] ) {
        var a = link_process[k](args, v, tab);
        for( i = 1, #a ) { args[#args + 1] = a[i]; }
      } else { error("bad iplink command " .. k);
      }
    }
  }
  return args;
}

// TODO better name. even more general, not just newlink. or make this the exposed newlink interface?
// I think this is generally a nicer interface to expose than the ones above, for all functions
function nl.iplink(tab) {
  var args = {tab.index || 0, tab.modifier || 0, tab.flags || 0, tab.change || 0};
  args = link_process_f(tab, args);
  return nl.newlink(unpack(args));
}

// TODO iplink may not be appropriate always sort out flags
function nl.create_interface(tab) {
  tab.modifier = c.NLM_F.CREATE;
  return nl.iplink(tab);
}

return nl;

}

return {init = init};


// misc utils

// aim is to move a lot of stuff that is not strictly syscalls out of main code to modularise better
// most code here is man(1) or man(3) or misc helpers for common tasks.

// TODO rework so that items can be methods on fd again, for eventfd, timerfd, signalfd and tty

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string =
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) {

var abi, types, c = S.abi, S.types, S.c;
var t, pt, s = types.t, types.pt, types.s;

var h = require ("syscall.helpers");

var ffi = require ("ffi");

var bit = require ("syscall.bit");

var octal = h.octal;

// TODO move to helpers? see notes in syscall.lua about reworking though
var function istype(tp, x) {
  if( ffi.istype(tp, x) ) { return x; }
  return false;
}

var util = {};

var mt = {};

var function if_nametoindex(name, s) {
  var ifr = t.ifreq({name = name});
  var ret, err = S.ioctl(s, "SIOCGIFINDEX", ifr);
  if( ! ret ) { return null, err; }
  return ifr.ivalue;
}

function util.if_nametoindex(name) { // standard function in some libc versions
  var s, err = S.socket(c.AF.LOCAL, c.SOCK.STREAM, 0);
  if( ! s ) { return null, err; }
  var i;
  i, err = if_nametoindex(name, s);
  if( ! i ) { return null, err; }
  var ok;
  ok, err = s->close();
  if( ! ok ) { return null, err; }
  return i;
}

// bridge functions.
var function bridge_ioctl(io, name) {
  var s, err = S.socket(c.AF.LOCAL, c.SOCK.STREAM, 0);
  if( ! s ) { return null, err; }
  var ret, ok;
  ret, err = S.ioctl(s, io, name);
  if( ! ret ) {
    s->close();
    return null, err;
  }
  ok, err = s->close();
  if( ! ok ) { return null, err; }
  return ret;
}

function util.bridge_add(name) { return bridge_ioctl("SIOCBRADDBR", name); }
function util.bridge_del(name) { return bridge_ioctl("SIOCBRDELBR", name); }

var function bridge_if_ioctl(io, name, dev) {
  var err, s, ifr, len, ret, ok;
  s, err = S.socket(c.AF.LOCAL, c.SOCK.STREAM, 0);
  if( ! s ) { return null, err; }
  if( type(dev) == "string" ) {
    dev, err = if_nametoindex(dev, s);
    if( ! dev ) { return null, err; }
  }
  ifr = t.ifreq({name = name, ivalue = dev});
  ret, err = S.ioctl(s, io, ifr);
  if( ! ret ) {
    s->close();
    return null, err;
  }
  ok, err = s->close();
  if( ! ok ) { return null, err; }
  return ret;
}

function util.bridge_add_interface(bridge, dev) { return bridge_if_ioctl(c.SIOC.BRADDIF, bridge, dev); }
function util.bridge_add_interface(bridge, dev) { return bridge_if_ioctl(c.SIOC.BRDELIF, bridge, dev); }

var function brinfo(d) { // can be used as subpart of general interface info
  var bd = "/sys/class/net/" .. d .. "/" .. c.SYSFS_BRIDGE_ATTR;
  if( ! S.stat(bd) ) { return null; }
  var bridge = {};
  for( fn, f in util.ls(bd) ) {
    var s = util.readfile(bd .. "/" .. fn);
    if( s ) {
      s = s->sub(1, #s - 1); // remove newline at end
      if( fn == "group_addr" || fn == "root_id" || fn == "bridge_id" ) { // string values
        bridge[fn] = s;
      } else if( f == "stp_state" ) { // bool
        bridge[fn] = s == 1;
      } else if( fn != "." && fn !=".." ) {
        bridge[fn] = tonumber(s); // not quite correct, most are timevals TODO
      }
    }
  }

  var brif, err = util.dirtable("/sys/class/net/" .. d .. "/" .. c.SYSFS_BRIDGE_PORT_SUBDIR, true);
  if( ! brif ) { return null; }

  var fdb = "/sys/class/net/" .. d .. "/" .. c.SYSFS_BRIDGE_FDB;
  if( ! S.stat(fdb) ) { return null; }
  var sl = 2048;
  var buffer = t.buffer(sl);
  var fd = S.open(fdb, "rdonly");
  if( ! fd ) { return null; }
  var brforward = {};

  do {
    var n = S.read(fd, buffer, sl);
    if( ! n ) { return null; }

    var fdbs = pt.fdb_entry(buffer);

    for( i = 1, bit.rshift(n, 4) ) { // fdb_entry is 16 bytes
      fdb = fdbs[i - 1];
      var mac = t.macaddr();
      ffi.copy(mac, fdb.mac_addr, s.macaddr);

      // TODO ageing_timer_value is not an int, time, float
      brforward[#brforward + 1] = {
        mac_addr = mac, port_no = tonumber(fdb.port_no),
        is_local = fdb.is_local != 0,
        ageing_timer_value = tonumber(fdb.ageing_timer_value)
      };
    }

  } while(!( n == 0) );
  if( ! fd->close() ) { return null; }

  return {bridge = bridge, brif = brif, brforward = brforward};
}

function util.bridge_list() {
  var b = {};
  for( d in util.ls("/sys/class/net") ) {
    if( d != "." && d != ".." ) { b[d] = brinfo(d); }
  }
  return b;
}

// eventfd read and write helpers, as in glibc but Lua friendly. Note returns 0 for EAGAIN, as 0 never returned directly
// returns Lua number - if you need all 64 bits, pass your own value in and use that for the exact result
function util.eventfd_read(fd, value) {
  if( ! value ) { value = t.uint64_1(); }
  var ret, err = S.read(fd, value, 8);
  if( err && err.AGAIN ) {
    value[0] = 0;
    return 0;
  }
  if( ! ret ) { return null, err; }
  return tonumber(value[0]);
}
function util.eventfd_write(fd, value) {
  if( ! value ) { value = 1; }
  if( type(value) == "number" ) { value = t.uint64_1(value); }
  var ret, err = S.write(fd, value, 8);
  if( ! ret ) { return null, err; }
  return true;
}

function util.signalfd_read(fd, ss) {
  ss = istype(t.siginfos, ss) || t.siginfos(ss || 8);
  var ret, err = S.read(fd, ss.sfd, ss.bytes);
  if( ret == 0 || (err && err.AGAIN) ) { return {}; }
  if( ! ret ) { return null, err; }
  ss.count = ret / s.signalfd_siginfo; // may not be full length
  return ss;
}

function util.timerfd_read(fd, buffer) {
  if( ! buffer ) { buffer = t.uint64_1(); }
  var ret, err = S.read(fd, buffer, 8);
  if( ! ret && err.AGAIN ) { return 0; } // will never actually return 0
  if( ! ret ) { return null, err; }
  return tonumber(buffer[0]);
}

var auditarch_le = {
  x86 = "I386",
  x64 = "X86_64",
  arm = "ARM",
  arm64 = "AARCH64",
  mipsel = "MIPSEL",
  ppc64le = "PPC64LE",
};

var auditarch_be = {
  ppc = "PPC",
  arm = "ARMEB",
  arm64 = "AARCH64",
  mips = "MIPS",
};

function util.auditarch() {
  if( abi.le ) { return c.AUDIT_ARCH[auditarch_le[abi.arch]]; } else { return c.AUDIT_ARCH[auditarch_be[abi.arch]]; }
}

// file system capabilities
var seccap = "security.capability";

function util.capget(f) {
  var attr, err;
  if( type(f) == "string" ) { attr, err = S.getxattr(f, seccap); } else { attr, err = f->getxattr(seccap); }
  if( ! attr ) { return null, err; }
  var vfs = pt.vfs_cap_data(attr);
  var magic_etc = h.convle32(vfs.magic_etc);
  var version = bit.band(c.VFS_CAP.REVISION_MASK, magic_etc);
  // TODO if you need support for version 1 filesystem caps add here, fairly simple
  assert(version == c.VFS_CAP.REVISION_2, "FIXME: Currently only support version 2 filesystem capabilities");
  var cap = t.capabilities();
  cap.permitted.cap[0], cap.permitted.cap[1] = h.convle32(vfs.data[0].permitted), h.convle32(vfs.data[1].permitted);
  cap.inheritable.cap[0], cap.inheritable.cap[1] = h.convle32(vfs.data[0].inheritable), h.convle32(vfs.data[1].inheritable);
  if( bit.band(magic_etc, c.VFS_CAP_FLAGS.EFFECTIVE) != 0 ) {
    cap.effective.cap[0] = bit.bor(cap.permitted.cap[0], cap.inheritable.cap[0]);
    cap.effective.cap[1] = bit.bor(cap.permitted.cap[1], cap.inheritable.cap[1]);
  }
  return cap;
}

function util.capset(f, cap, flags) {
  cap = istype(t.capabilities, cap) || t.capabilities(cap);
  var vfsflags = 0;
  // is this the correct way to do this? TODO check
  for( k, _ in pairs(c.CAP) ) { if( cap.effective[k] ) { vfsflags = c.VFS_CAP_FLAGS.EFFECTIVE; } }
  var vfs = t.vfs_cap_data();
  vfs.magic_etc = h.convle32(c.VFS_CAP.REVISION_2 + vfsflags);
  vfs.data[0].permitted, vfs.data[1].permitted = h.convle32(cap.permitted.cap[0]), h.convle32(cap.permitted.cap[1]);
  vfs.data[0].inheritable, vfs.data[1].inheritable = h.convle32(cap.inheritable.cap[0]), h.convle32(cap.inheritable.cap[1]);
  if( type(f) == "string" ) { return S.setxattr(f, seccap, vfs, flags); } else { return f->getxattr(seccap, vfs, flags); }
}

// TODO could add umount method.
mt.mount = {
  __tostring = function(m) { return m.source .. " on " .. m.target .. " type " .. m.type .. " (" .. m.flags .. ")"; },
};

mt.mounts = {
  __tostring = function(ms) {
  var rs = "";
  for( i = 1, #ms ) {
    rs = rs .. tostring(ms[i]) .. '\n';
  }
  return rs;
}
};

// will work on netbsd with Linux compat, but should use getvfsstat()
function util.mounts(file) {
  var mf, err = util.readfile(file || "/proc/mounts");
  if( ! mf ) { return null, err; }
  var mounts = {};
  for( line in mf->gmatch("[^\r\n]+") ) {
    var l = {};
    var parts = {"source", "target", "type", "flags", "freq", "passno"};
    var p = 1;
    for( word in line->gmatch("%S+") ) {
      l[parts[p]] = word;
      ++p    ;
    }
    mounts[#mounts + 1] = setmetatable(l, mt.mount);
  }
  // TODO some of the options you get in /proc/mounts are file system specific and should be moved to l.data
  // idea is you can round-trip this data
  // a lot of the fs specific options are key=value so easier to recognise
  return setmetatable(mounts, mt.mounts);
}

// table based mount, more cross OS compatible
function util.mount(tab) {
  var source = tab.source || "none"; // standard default
  var target = tab.target || tab.dir; // netbsd compatible
  var filesystemtype = tab.type;
  var mountflags = tab.flags;
  var data = tab.data;
  return S.mount(source, target, filesystemtype, mountflags, data);
}

function util.sendcred(fd, pid, uid, gid) {
  if( ! pid ) { pid = S.getpid(); }
  if( ! uid ) { uid = S.getuid(); }
  if( ! gid ) { gid = S.getgid(); }
  var ucred = t.ucred({pid = pid, uid = uid, gid = gid});
  var buf1 = t.buffer(1); // need to send one byte
  var io = t.iovecs({{buf1, 1}});
  var cmsg = t.cmsghdr("socket", "credentials", ucred);
  var msg = t.msghdr({iov = io, control = cmsg});
  return S.sendmsg(fd, msg, 0);
}

return util;

}

return {init = init};


// This is the actual system calls for Linux

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string =
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");

return function(S, hh, c, C, types) {

var ret64, retnum, retfd, retbool, retptr, retiter = hh.ret64, hh.retnum, hh.retfd, hh.retbool, hh.retptr, hh.retiter;

var ffi = require ("ffi");
var errno = ffi.errno;

var bit = require ("syscall.bit");

var t, pt, s = types.t, types.pt, types.s;

var h = require ("syscall.helpers");

var istype, mktype, getfd = h.istype, h.mktype, h.getfd;

if( abi.abi32 ) {
  // override open call with largefile -- TODO move this hack to c.lua instead
  function S.open(pathname, flags, mode) {
    flags = c.O(flags, "LARGEFILE");
    return retfd(C.open(pathname, flags, c.MODE[mode]));
  }
  function S.openat(dirfd, pathname, flags, mode) {
    flags = c.O(flags, "LARGEFILE");
    return retfd(C.openat(c.AT_FDCWD[dirfd], pathname, flags, c.MODE[mode]));
  }
  // creat has no largefile flag so cannot be used
  function S.creat(pathname, mode) { return S.open(pathname, "CREAT,WRONLY,TRUNC", mode); }
}

function S.pause() { return retbool(C.pause()); }

function S.acct(filename) { return retbool(C.acct(filename)); }

function S.getpriority(which, who) {
  var ret, err = C.getpriority(c.PRIO[which], who || 0);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return 20 - ret; // adjust for kernel returned values as this is syscall not libc
}

// we could allocate ptid, ctid, tls if required in flags instead. TODO add signal into flag parsing directly
function S.clone(flags, signal, stack, ptid, tls, ctid) {
  flags = c.CLONE[flags] + c.SIG[signal || 0];
  return retnum(C.clone(flags, stack, ptid, tls, ctid));
}

if( C.unshare ) { // quite new, also not defined in rump yet
  function S.unshare(flags) { return retbool(C.unshare(c.CLONE[flags])); }
}
if( C.setns ) {
  function S.setns(fd, nstype) { return retbool(C.setns(getfd(fd), c.CLONE[nstype])); }
}

function S.reboot(cmd) {
  return retbool(C.reboot(c.LINUX_REBOOT.MAGIC1, c.LINUX_REBOOT.MAGIC2, c.LINUX_REBOOT_CMD[cmd]));
}

// note waitid also provides rusage that Posix does not have, override default
function S.waitid(idtype, id, options, infop, rusage) { // note order of args, as usually dont supply infop, rusage
  if( ! infop ) { infop = t.siginfo(); }
  if( ! rusage && rusage != false ) { rusage = t.rusage(); }
  var ret, err = C.waitid(c.P[idtype], id || 0, infop, c.W[options], rusage);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return infop, null, rusage;
}

function S.exit(status) { C.exit_group(c.EXIT[status || 0]); }

function S.sync_file_range(fd, offset, count, flags) {
  return retbool(C.sync_file_range(getfd(fd), offset, count, c.SYNC_FILE_RANGE[flags]));
}

function S.getcwd(buf, size) {
  size = size || c.PATH_MAX;
  buf = buf || t.buffer(size);
  var ret, err = C.getcwd(buf, size);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ffi.string(buf);
}

function S.statfs(path) {
  var st = t.statfs();
  var ret, err = C.statfs(path, st);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return st;
}

function S.fstatfs(fd) {
  var st = t.statfs();
  var ret, err = C.fstatfs(getfd(fd), st);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return st;
}

function S.mremap(old_address, old_size, new_size, flags, new_address) {
  return retptr(C.mremap(old_address, old_size, new_size, c.MREMAP[flags], new_address));
}
function S.remap_file_pages(addr, size, prot, pgoff, flags) {
  return retbool(C.remap_file_pages(addr, size, c.PROT[prot], pgoff, c.MAP[flags]));
}
function S.fadvise(fd, advice, offset, len) { // note argument order TODO change back?
  return retbool(C.fadvise64(getfd(fd), offset || 0, len || 0, c.POSIX_FADV[advice]));
}
function S.fallocate(fd, mode, offset, len) {
  return retbool(C.fallocate(getfd(fd), c.FALLOC_FL[mode], offset || 0, len));
}
function S.posix_fallocate(fd, offset, len) { return S.fallocate(fd, 0, offset, len); }
function S.readahead(fd, offset, count) { return retbool(C.readahead(getfd(fd), offset, count)); }

// TODO change to type?
function S.uname() {
  var u = t.utsname();
  var ret, err = C.uname(u);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return {sysname = ffi.string(u.sysname), nodename = ffi.string(u.nodename), release = ffi.string(u.release),
          version = ffi.string(u.version), machine = ffi.string(u.machine), domainname = ffi.string(u.domainname)};
}

function S.sethostname(s, len) { return retbool(C.sethostname(s, len || #s)); }
function S.setdomainname(s, len) { return retbool(C.setdomainname(s, len || #s)); }

if( C.time ) {
  function S.time(time) { return retnum(C.time(time)); }
}

function S.sysinfo(info) {
  info = info || t.sysinfo();
  var ret, err = C.sysinfo(info);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return info;
}

function S.signalfd(set, flags, fd) { // note different order of args, as fd usually empty. See also signalfd_read()
  set = mktype(t.sigset, set);
  if( fd ) { fd = getfd(fd); } else { fd = -1; }
  // note includes (hidden) size argument
  return retfd(C.signalfd(fd, set, s.sigset, c.SFD[flags]));
}

// note that syscall does return timeout remaining but libc does not, due to standard prototype TODO use syscall
// note this is the only difference with NetBSD pollts, so could merge them
function S.ppoll(fds, timeout, set) {
  if( timeout ) { timeout = mktype(t.timespec, timeout); }
  if( set ) { set = mktype(t.sigset, set); }
  return retnum(C.ppoll(fds.pfd, #fds, timeout, set));
}
if( ! S.poll ) {
  function S.poll(fd, timeout) {
    if( timeout ) { timeout = mktype(t.timespec, timeout / 1000); }
    return S.ppoll(fd, timeout);
  }
}
function S.mount(source, target, fstype, mountflags, data) {
  return retbool(C.mount(source || "none", target, fstype, c.MS[mountflags], data));
}

function S.umount(target, flags) {
  return retbool(C.umount2(target, c.UMOUNT[flags]));
}

function S.prlimit(pid, resource, new_limit, old_limit) {
  if( new_limit ) { new_limit = mktype(t.rlimit, new_limit); }
  old_limit = old_limit || t.rlimit();
  var ret, err = C.prlimit64(pid || 0, c.RLIMIT[resource], new_limit, old_limit);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return old_limit;
}

function S.epoll_create(flags) {
  return retfd(C.epoll_create1(c.EPOLLCREATE[flags]));
}

function S.epoll_ctl(epfd, op, fd, event) {
  if( type(event) == "string" || type(event) == "number" ) { event = {events = event, fd = getfd(fd)}; }
  event = mktype(t.epoll_event, event);
  return retbool(C.epoll_ctl(getfd(epfd), c.EPOLL_CTL[op], getfd(fd), event));
}

if( C.epoll_wait ) {
  function S.epoll_wait(epfd, events, timeout) {
    var ret, err = C.epoll_wait(getfd(epfd), events.ep, #events, timeout || -1);
    return retiter(ret, err, events.ep);
  }
} else {
  function S.epoll_wait(epfd, events, timeout) {
    var ret, err = C.epoll_pwait(getfd(epfd), events.ep, #events, timeout || -1, null);
    return retiter(ret, err, events.ep);
  }
}

function S.epoll_pwait(epfd, events, timeout, sigmask) {
  if( sigmask ) { sigmask = mktype(t.sigset, sigmask); }
  var ret, err = C.epoll_pwait(getfd(epfd), events.ep, #events, timeout || -1, sigmask);
  return retiter(ret, err, events.ep);
}

function S.splice(fd_in, off_in, fd_out, off_out, len, flags) {
  var offin, offout = off_in, off_out;
  if( off_in && ! ffi.istype(t.off1, off_in) ) {
    offin = t.off1();
    offin[0] = off_in;
  }
  if( off_out && ! ffi.istype(t.off1, off_out) ) {
    offout = t.off1();
    offout[0] = off_out;
  }
  return retnum(C.splice(getfd(fd_in), offin, getfd(fd_out), offout, len, c.SPLICE_F[flags]));
}

function S.vmsplice(fd, iov, flags) {
  iov = mktype(t.iovecs, iov);
  return retnum(C.vmsplice(getfd(fd), iov.iov, #iov, c.SPLICE_F[flags]));
}

function S.tee(fd_in, fd_out, len, flags) {
  return retnum(C.tee(getfd(fd_in), getfd(fd_out), len, c.SPLICE_F[flags]));
}

function S.inotify_init(flags) { return retfd(C.inotify_init1(c.IN_INIT[flags])); }
function S.inotify_add_watch(fd, pathname, mask) { return retnum(C.inotify_add_watch(getfd(fd), pathname, c.IN[mask])); }
function S.inotify_rm_watch(fd, wd) { return retbool(C.inotify_rm_watch(getfd(fd), wd)); }

function S.sendfile(out_fd, in_fd, offset, count) {
  if( type(offset) == "number" ) {
    offset = t.off1(offset);
  }
  return retnum(C.sendfile(getfd(out_fd), getfd(in_fd), offset, count));
}

function S.eventfd(initval, flags) { return retfd(C.eventfd(initval || 0, c.EFD[flags])); }

function S.timerfd_create(clockid, flags) {
  return retfd(C.timerfd_create(c.CLOCK[clockid], c.TFD[flags]));
}

function S.timerfd_settime(fd, flags, it, oldtime) {
  oldtime = oldtime || t.itimerspec();
  var ret, err = C.timerfd_settime(getfd(fd), c.TFD_TIMER[flags || 0], mktype(t.itimerspec, it), oldtime);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return oldtime;
}

function S.timerfd_gettime(fd, curr_value) {
  curr_value = curr_value || t.itimerspec();
  var ret, err = C.timerfd_gettime(getfd(fd), curr_value);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return curr_value;
}

function S.pivot_root(new_root, put_old) { return retbool(C.pivot_root(new_root, put_old)); }

// aio functions
function S.io_setup(nr_events) {
  var ctx = t.aio_context1();
  var ret, err = C.io_setup(nr_events, ctx);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ctx[0];
}

function S.io_destroy(ctx) { return retbool(C.io_destroy(ctx)); }

function S.io_cancel(ctx, iocb, result) {
  result = result || t.io_event();
  var ret, err = C.io_cancel(ctx, iocb, result);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return result;
}

function S.io_getevents(ctx, min, events, timeout) {
  if( timeout ) { timeout = mktype(t.timespec, timeout); }
  var ret, err = C.io_getevents(ctx, min || events.count, events.count, events.ev, timeout);
  return retiter(ret, err, events.ev);
}

// iocb must persist until retrieved (as we get pointer), so cannot be passed as table must take t.iocb_array
function S.io_submit(ctx, iocb) {
  return retnum(C.io_submit(ctx, iocb.ptrs, iocb.nr));
}

// TODO prctl should be in a seperate file like ioctl fnctl (this is a Linux only interface)
// map for valid options for arg2
var prctlmap = {
  [c.PR.CAPBSET_READ] = c.CAP,
  [c.PR.CAPBSET_DROP] = c.CAP,
  [c.PR.SET_ENDIAN] = c.PR_ENDIAN,
  [c.PR.SET_FPEMU] = c.PR_FPEMU,
  [c.PR.SET_FPEXC] = c.PR_FP_EXC,
  [c.PR.SET_PDEATHSIG] = c.SIG,
  //[c.PR.SET_SECUREBITS] = c.SECBIT, -- TODO not defined yet
  [c.PR.SET_TIMING] = c.PR_TIMING,
  [c.PR.SET_TSC] = c.PR_TSC,
  [c.PR.SET_UNALIGN] = c.PR_UNALIGN,
  [c.PR.MCE_KILL] = c.PR_MCE_KILL,
  [c.PR.SET_SECCOMP] = c.SECCOMP_MODE,
  [c.PR.SET_NO_NEW_PRIVS] = h.booltoc,
};

var prctlrint = { // returns an integer directly TODO add metatables to set names
  [c.PR.GET_DUMPABLE] = true,
  [c.PR.GET_KEEPCAPS] = true,
  [c.PR.CAPBSET_READ] = true,
  [c.PR.GET_TIMING] = true,
  [c.PR.GET_SECUREBITS] = true,
  [c.PR.MCE_KILL_GET] = true,
  [c.PR.GET_SECCOMP] = true,
  [c.PR.GET_NO_NEW_PRIVS] = true,
};

var prctlpint = { // returns result in a location pointed to by arg2
  [c.PR.GET_ENDIAN] = true,
  [c.PR.GET_FPEMU] = true,
  [c.PR.GET_FPEXC] = true,
  [c.PR.GET_PDEATHSIG] = true,
  [c.PR.GET_UNALIGN] = true,
};

// this is messy, TODO clean up, its own file see above
function S.prctl(option, arg2, arg3, arg4, arg5) {
  var i, name;
  option = c.PR[option];
  var m = prctlmap[option];
  if( m ) { arg2 = m[arg2]; }
  if( option == c.PR.MCE_KILL && arg2 == c.PR_MCE_KILL.SET ) {
    arg3 = c.PR_MCE_KILL_OPT[arg3];
  } else if( prctlpint[option] ) {
    i = t.int1();
    arg2 = ffi.cast(t.ulong, i);
  } else if( option == c.PR.GET_NAME ) {
    name = t.buffer(16);
    arg2 = ffi.cast(t.ulong, name);
  } else if( option == c.PR.SET_NAME ) {
    if( type(arg2) == "string" ) { arg2 = ffi.cast(t.ulong, arg2); }
  } else if( option == c.PR.SET_SECCOMP ) {
    arg3 = t.intptr(arg3 || 0);
  }
  var ret = C.prctl(option, arg2 || 0, arg3 || 0, arg4 || 0, arg5 || 0);
  if( ret == -1 ) { return null, t.error(); }
  if( prctlrint[option] ) { return ret; }
  if( prctlpint[option] ) { return i[0]; }
  if( option == c.PR.GET_NAME ) {
    if( name[15] != 0 ) { return ffi.string(name, 16); } // actually, 15 bytes seems to be longest, aways 0 terminated
    return ffi.string(name);
  }
  return true;
}

function S.syslog(tp, buf, len) {
  if( ! buf && (tp == 2 || tp == 3 || tp == 4) ) {
    if( ! len ) {
      // this is the glibc name for the syslog syscall
      len = C.klogctl(10, null, 0); // get size so we can allocate buffer
      if( len == -1 ) { return null, t.error(); }
    }
    buf = t.buffer(len);
  }
  var ret, err = C.klogctl(tp, buf || null, len || 0);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( tp == 9 || tp == 10 ) { return tonumber(ret); }
  if( tp == 2 || tp == 3 || tp == 4 ) { return ffi.string(buf, ret); }
  return true;
}

function S.adjtimex(a) {
  a = mktype(t.timex, a);
  var ret, err = C.adjtimex(a);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return t.adjtimex(ret, a);
}

if( C.alarm ) {
  function S.alarm(s) { return C.alarm(s); }
}

function S.setreuid(ruid, euid) { return retbool(C.setreuid(ruid, euid)); }
function S.setregid(rgid, egid) { return retbool(C.setregid(rgid, egid)); }

function S.getresuid(ruid, euid, suid) {
  ruid, euid, suid = ruid || t.uid1(), euid || t.uid1(), suid || t.uid1();
  var ret, err = C.getresuid(ruid, euid, suid);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return true, null, ruid[0], euid[0], suid[0];
}
function S.getresgid(rgid, egid, sgid) {
  rgid, egid, sgid = rgid || t.gid1(), egid || t.gid1(), sgid || t.gid1();
  var ret, err = C.getresgid(rgid, egid, sgid);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return true, null, rgid[0], egid[0], sgid[0];
}
function S.setresuid(ruid, euid, suid) { return retbool(C.setresuid(ruid, euid, suid)); }
function S.setresgid(rgid, egid, sgid) { return retbool(C.setresgid(rgid, egid, sgid)); }

function S.vhangup() { return retbool(C.vhangup()); }

function S.swapon(path, swapflags) { return retbool(C.swapon(path, c.SWAP_FLAG[swapflags])); }
function S.swapoff(path) { return retbool(C.swapoff(path)); }

if( C.getrandom ) {
  function S.getrandom(buf, count, flags) {
    return retnum(C.getrandom(buf, count || #buf || 64, c.GRND[flags]));
  }
}

if( C.memfd_create ) {
  function S.memfd_create(name, flags) { return retfd(C.memfd_create(name, c.MFD[flags])); }
}

// capabilities. Somewhat complex kernel interface due to versioning, Posix requiring malloc in API.
// only support version 3, should be ok for recent kernels, or pass your own hdr, data in
// to detect capability API version, pass in hdr with empty version, version will be set
function S.capget(hdr, data) { // normally just leave as nil for get, can pass pid in
  hdr = istype(t.user_cap_header, hdr) || t.user_cap_header(c.LINUX_CAPABILITY_VERSION[3], hdr || 0);
  if( ! data && hdr.version != 0 ) { data = t.user_cap_data2(); }
  var ret, err = C.capget(hdr, data);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  if( ! data ) { return hdr; }
  return t.capabilities(hdr, data);
}

function S.capset(hdr, data) {
  if( ffi.istype(t.capabilities, hdr) ) { hdr, data = hdr->hdrdata(); }
  return retbool(C.capset(hdr, data));
}

function S.getcpu(cpu, node) {
  cpu = cpu || t.uint1();
  node = node || t.uint1();
  var ret, err = C.getcpu(cpu, node);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return {cpu = cpu[0], node = node[0]};
}

function S.sched_getscheduler(pid) { return retnum(C.sched_getscheduler(pid || 0)); }
function S.sched_setscheduler(pid, policy, param) {
  param = mktype(t.sched_param, param || 0);
  return retbool(C.sched_setscheduler(pid || 0, c.SCHED[policy], param));
}
function S.sched_yield() { return retbool(C.sched_yield()); }

function S.sched_getaffinity(pid, mask, len) { // note len last as rarely used. All parameters optional
  mask = mktype(t.cpu_set, mask);
  var ret, err = C.sched_getaffinity(pid || 0, len || s.cpu_set, mask);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return mask;
}

function S.sched_setaffinity(pid, mask, len) { // note len last as rarely used
  return retbool(C.sched_setaffinity(pid || 0, len || s.cpu_set, mktype(t.cpu_set, mask)));
}

var function get_maxnumnodes() {
   var function readfile (filename) {
      var ret = {};
      var bufsz = 1024;
      var buf = ffi.new("uint8_t[?]", bufsz);
      var fd, errno = S.open(filename, 0);
      if( ! fd ) { error(errno); }
      while( true ) {
         var len = S.read(fd, buf, bufsz);
         table.insert(ret, ffi.string(buf, len));
         if( len != bufsz ) { break; }
      }
      fd->close();
      return table.concat(ret);
   }
   var content = readfile("/proc/self/status");
   for( line in content->gmatch("[^\n]+") ) {
     if( line->match("^Mems_allowed:") ) {
       line = line->gsub("^Mems_allowed:%s+", "");
       // In Mems_allowed each 9 characters (8 digit plus comma) represents
       // a 32-bit mask.  Total number of maxnumnodes is the total sum of
       // the masks multiplied by 32.  Line length is increased by one since
       // there's no comma at the end of line.
       return math.floor(((#line+1)/9)*32);
     }
   }
}

function S.get_mempolicy(mode, mask, addr, flags) {
  mode = mode || t.int1();
  mask = mktype(t.bitmask, mask);
  // Size should be at least equals to maxnumnodes.
  var size = ffi.cast("uint64_t", math.max(tonumber(mask.size), get_maxnumnodes()));
  var ret, err = C.get_mempolicy(mode, mask.mask, size, addr || 0, c.MPOL_FLAG[flags]);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return { mode=mode[0], mask=mask };
}
function S.set_mempolicy(mode, mask) {
  mask = mktype(t.bitmask, mask);
  return retbool(C.set_mempolicy(c.MPOL_MODE[mode], mask.mask, mask.size));
}

function S.migrate_pages(pid, from, to) {
  from = mktype(t.bitmask, from);
  to = mktype(t.bitmask, to);
  assert(from.size == to.size, "incompatible nodemask sizes");
  return retbool(C.migrate_pages(pid || 0, from.size, from.mask, to.mask));
}

function S.sched_get_priority_max(policy) { return retnum(C.sched_get_priority_max(c.SCHED[policy])); }
function S.sched_get_priority_min(policy) { return retnum(C.sched_get_priority_min(c.SCHED[policy])); }

function S.sched_setparam(pid, param) {
  return retbool(C.sched_setparam(pid || 0, mktype(t.sched_param, param || 0)));
}
function S.sched_getparam(pid, param) {
  param = mktype(t.sched_param, param || 0);
  var ret, err = C.sched_getparam(pid || 0, param);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return param.sched_priority; // only one useful parameter
}

function S.sched_rr_get_interval(pid, ts) {
  ts = mktype(t.timespec, ts);
  var ret, err = C.sched_rr_get_interval(pid || 0, ts);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ts;
}

// this is recommended way to size buffers for xattr
var function growattrbuf(f, a, b) {
  var len = 512;
  var buffer = t.buffer(len);
  var ret, err;
  do {
    if( b ) {
      ret, err = f(a, b, buffer, len);
    } else {
      ret, err = f(a, buffer, len);
    }
    ret = tonumber(ret);
    if( ret == -1 && (err || errno()) != c.E.RANGE ) { return null, t.error(err || errno()); }
    if( ret == -1 ) {
      len *=   2;
      buffer = t.buffer(len);
    }
  } while(!( ret >= 0) );

  return ffi.string(buffer, ret);
}

var function lattrbuf(f, a) {
  var s, err = growattrbuf(f, a);
  if( ! s ) { return null, err; }
  var tab = h.split('\0', s);
  tab[#tab] = null; // there is a trailing \0 so one extra
  return tab;
}

// TODO Note these should be in NetBSD too, but no useful filesystem (ex nfs) has xattr support, so never tested
if( C.listxattr ) {
  function S.listxattr(path) { return lattrbuf(C.listxattr, path); }
  function S.llistxattr(path) { return lattrbuf(C.llistxattr, path); }
  function S.flistxattr(fd) { return lattrbuf(C.flistxattr, getfd(fd)); }
}

if( C.setxattr ) {
  function S.setxattr(path, name, value, flags) { return retbool(C.setxattr(path, name, value, #value, c.XATTR[flags])); }
  function S.lsetxattr(path, name, value, flags) { return retbool(C.lsetxattr(path, name, value, #value, c.XATTR[flags])); }
  function S.fsetxattr(fd, name, value, flags) { return retbool(C.fsetxattr(getfd(fd), name, value, #value, c.XATTR[flags])); }
}

if( C.getxattr ) {
  function S.getxattr(path, name) { return growattrbuf(C.getxattr, path, name); }
  function S.lgetxattr(path, name) { return growattrbuf(C.lgetxattr, path, name); }
  function S.fgetxattr(fd, name) { return growattrbuf(C.fgetxattr, getfd(fd), name); }
}

if( C.removexattr ) {
  function S.removexattr(path, name) { return retbool(C.removexattr(path, name)); }
  function S.lremovexattr(path, name) { return retbool(C.lremovexattr(path, name)); }
  function S.fremovexattr(fd, name) { return retbool(C.fremovexattr(getfd(fd), name)); }
}

// helper function to set and return attributes in tables
// TODO this would make more sense as types?
// TODO listxattr should return an iterator not a table?
var function xattr(list, get, set, remove, path, t) {
  var l, err = list(path);
  if( ! l ) { return null, err; }
  if( ! t ) { // no table, so read
    var r = {};
    for( _, name in ipairs(l) ) {
      r[name] = get(path, name); // ignore errors
    }
    return r;
  }
  // write
  for( _, name in ipairs(l) ) {
    if( t[name] ) {
      set(path, name, t[name]); // ignore errors, replace
      t[name] = null;
    } else {
      remove(path, name);
    }
  }
  for( name, value in pairs(t) ) {
    set(path, name, value); // ignore errors, create
  }
  return true;
}

if( S.listxattr && S.getxattr ) {
function S.xattr(path, t) { return xattr(S.listxattr, S.getxattr, S.setxattr, S.removexattr, path, t); }
function S.lxattr(path, t) { return xattr(S.llistxattr, S.lgetxattr, S.lsetxattr, S.lremovexattr, path, t); }
function S.fxattr(fd, t) { return xattr(S.flistxattr, S.fgetxattr, S.fsetxattr, S.fremovexattr, fd, t); }
}

// POSIX message queues. Note there is no mq_close as it is just close in Linux
function S.mq_open(name, flags, mode, attr) {
  var ret, err = C.mq_open(name, c.O[flags], c.MODE[mode], mktype(t.mq_attr, attr));
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return t.mqd(ret);
}

function S.mq_unlink(name) {
  return retbool(C.mq_unlink(name));
}

function S.mq_getsetattr(mqd, new, old) { // provided for completeness, but use getattr, setattr which are methods
  return retbool(C.mq_getsetattr(getfd(mqd), new, old));
}

function S.mq_timedsend(mqd, msg_ptr, msg_len, msg_prio, abs_timeout) {
  if( abs_timeout ) { abs_timeout = mktype(t.timespec, abs_timeout); }
  return retbool(C.mq_timedsend(getfd(mqd), msg_ptr, msg_len || #msg_ptr, msg_prio || 0, abs_timeout));
}

// like read, return string if buffer not provided. Length required. TODO should we return prio?
function S.mq_timedreceive(mqd, msg_ptr, msg_len, msg_prio, abs_timeout) {
  if( abs_timeout ) { abs_timeout = mktype(t.timespec, abs_timeout); }
  if( msg_ptr ) { return retbool(C.mq_timedreceive(getfd(mqd), msg_ptr, msg_len || #msg_ptr, msg_prio, abs_timeout)); }
  msg_ptr = t.buffer(msg_len);
  var ret, err = C.mq_timedreceive(getfd(mqd), msg_ptr, msg_len || #msg_ptr, msg_prio, abs_timeout);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ffi.string(msg_ptr,ret);
}

// pty functions where not in common code TODO move to linux/libc?
function S.grantpt(fd) { return true; } // Linux does not need to do anything here (Musl does not)
function S.unlockpt(fd) { return S.ioctl(fd, "TIOCSPTLCK", 0); }
function S.ptsname(fd) {
  var pts, err = S.ioctl(fd, "TIOCGPTN");
  if( ! pts ) { return null, err; }
  return "/dev/pts/" .. tostring(pts);
}
function S.tcgetattr(fd) { return S.ioctl(fd, "TCGETS"); }
var tcsets = {
  [c.TCSA.NOW]   = "TCSETS",
  [c.TCSA.DRAIN] = "TCSETSW",
  [c.TCSA.FLUSH] = "TCSETSF",
};
function S.tcsetattr(fd, optional_actions, tio) {
  var inc = c.TCSA[optional_actions];
  return S.ioctl(fd, tcsets[inc], tio);
}
function S.tcsendbreak(fd, duration) {
  return S.ioctl(fd, "TCSBRK", pt.void(0)); // Linux ignores duration
}
function S.tcdrain(fd) {
  return S.ioctl(fd, "TCSBRK", pt.void(1)); // note use of literal 1 cast to pointer
}
function S.tcflush(fd, queue_selector) {
  return S.ioctl(fd, "TCFLSH", pt.void(c.TCFLUSH[queue_selector]));
}
function S.tcflow(fd, action) {
  return S.ioctl(fd, "TCXONC", pt.void(c.TCFLOW[action]));
}

// compat code for stuff that is not actually a syscall under Linux

// old rlimit functions in Linux are 32 bit only so now defined using prlimit
function S.getrlimit(resource) {
  return S.prlimit(0, resource);
}

function S.setrlimit(resource, rlim) {
  var ret, err = S.prlimit(0, resource, rlim);
  if( ! ret ) { return null, err; }
  return true;
}

function S.gethostname() {
  var u, err = S.uname();
  if( ! u ) { return null, err; }
  return u.nodename;
}

function S.getdomainname() {
  var u, err = S.uname();
  if( ! u ) { return null, err; }
  return u.domainname;
}

function S.killpg(pgrp, sig) { return S.kill(-pgrp, sig); }

// helper function to read inotify structs as table from inotify fd, TODO could be in util
function S.inotify_read(fd, buffer, len) {
  len = len || 1024;
  buffer = buffer || t.buffer(len);
  var ret, err = S.read(fd, buffer, len);
  if( ! ret ) { return null, err; }
  return t.inotify_events(buffer, ret);
}

// in Linux mkfifo is not a syscall, emulate
function S.mkfifo(path, mode) { return S.mknod(path, bit.bor(c.MODE[mode], c.S_I.FIFO)); }
function S.mkfifoat(fd, path, mode) { return S.mknodat(fd, path, bit.bor(c.MODE[mode], c.S_I.FIFO), 0); }

// in Linux getpagesize is not a syscall for most architectures.
// It is pretty obscure how you get the page size for architectures that have variable page size, I think it is coded into libc
// that matches kernel. Which is not much use for us.
// fortunately Linux (unlike BSD) checks correct offsets on mapping /dev/zero
var pagesize; // store so we do not repeat this

if( ! S.getpagesize ) {
  function S.getpagesize() {
    if( pagesize ) { return pagesize; }
    var sz = 4096;
    var fd, err = S.open("/dev/zero", "rdwr");
    if( ! fd ) { return null, err; }
    while( sz < 4096 * 1024 + 1024 ) {
      var mm;
      mm, err = S.mmap(null, sz, "read", "shared", fd, sz);
      if( mm ) {
        S.munmap(mm, sz);
        pagesize = sz;
        return sz;
      }
      sz *=   2;
    }
  }
}

// in Linux shm_open and shm_unlink are not syscalls
var shm = "/dev/shm";

function S.shm_open(pathname, flags, mode) {
  if( pathname->sub(1, 1) != "/" ) { pathname = "/" .. pathname; }
  pathname = shm .. pathname;
  return S.open(pathname, c.O(flags, "nofollow", "cloexec", "nonblock"), mode);
}

function S.shm_unlink(pathname) {
  if( pathname->sub(1, 1) != "/" ) { pathname = "/" .. pathname; }
  pathname = shm .. pathname;
  return S.unlink(pathname);
}

// TODO setpgrp and similar - see the man page

// in Linux pathconf can just return constants

// TODO these could go into constants, although maybe better to get from here
var PAGE_SIZE = S.getpagesize;
var NAME_MAX = 255;
var PATH_MAX = 4096; // TODO this is in constants, inconsistently
var PIPE_BUF = 4096;
var FILESIZEBITS = 64;
var SYMLINK_MAX = 255;
var _POSIX_LINK_MAX = 8;
var _POSIX_MAX_CANON = 255;
var _POSIX_MAX_INPUT = 255;

var pathconf_values = {
  [c.PC.LINK_MAX] = _POSIX_LINK_MAX,
  [c.PC.MAX_CANON] = _POSIX_MAX_CANON,
  [c.PC.MAX_INPUT] = _POSIX_MAX_INPUT,
  [c.PC.NAME_MAX] = NAME_MAX,
  [c.PC.PATH_MAX] = PATH_MAX,
  [c.PC.PIPE_BUF] = PIPE_BUF,
  [c.PC.CHOWN_RESTRICTED] = 1,
  [c.PC.NO_TRUNC] = 1,
  [c.PC.VDISABLE] = 0,
  [c.PC.SYNC_IO] = 1,
  [c.PC.ASYNC_IO] = -1,
  [c.PC.PRIO_IO] = -1,
  [c.PC.SOCK_MAXBUF] = -1,
  [c.PC.FILESIZEBITS] = FILESIZEBITS,
  [c.PC.REC_INCR_XFER_SIZE] = PAGE_SIZE,
  [c.PC.REC_MAX_XFER_SIZE] = PAGE_SIZE,
  [c.PC.REC_MIN_XFER_SIZE] = PAGE_SIZE,
  [c.PC.REC_XFER_ALIGN] = PAGE_SIZE,
  [c.PC.ALLOC_SIZE_MIN] = PAGE_SIZE,
  [c.PC.SYMLINK_MAX] = SYMLINK_MAX,
  [c.PC["2_SYMLINKS"]] = 1,
};

function S.pathconf(_, name) {
  var pc = pathconf_values[c.PC[name]];
  if( type(pc) == "function" ) { pc = pc(); }
  return pc;
}
S.fpathconf = S.pathconf;

// setegid and set euid are not syscalls
function S.seteuid(euid) { return S.setresuid(-1, euid, -1); }
function S.setegid(egid) { return S.setresgid(-1, egid, -1); }

// in Linux sysctl is not a sycall any more (well it is but legacy)
// note currently all returned as strings, may want to list which should be numbers
function S.sysctl(name, new) {
  name = "/proc/sys/" .. name->gsub("%.", "/");
  var flag = c.O.RDONLY;
  if( new ) { flag = c.O.RDWR; }
  var fd, err = S.open(name, flag);
  if( ! fd ) { return null, err; }
  var len = 1024;
  var old, ok;
  old, err = S.read(fd, null, len);
  if( ! old ) { return null, err; }
  old = old->sub(1, #old - 1); // remove trailing newline
  if( ! new ) { return old; }
  ok, err = S.write(fd, new);
  if( ! ok ) { return null, err; }
  return old;
}

return S;

};


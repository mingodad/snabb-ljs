// NetBSD types

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(types) {

var abi = require ("syscall.abi");

var version = require ("syscall.netbsd.version").version;

var t, pt, s, ctypes = types.t, types.pt, types.s, types.ctypes;

var ffi = require ("ffi");
var bit = require ("syscall.bit");

var i6432, u6432 = bit.i6432, bit.u6432;

var h = require ("syscall.helpers");

var addtype, addtype_var, addtype_fn, addraw2 = h.addtype, h.addtype_var, h.addtype_fn, h.addraw2;
var ptt, reviter, mktype, istype, lenfn, lenmt, getfd, newfn
  = h.ptt, h.reviter, h.mktype, h.istype, h.lenfn, h.lenmt, h.getfd, h.newfn;
var ntohl, ntohs, htons, octal = h.ntohl, h.ntohs, h.htons, h.octal;

var c = require ("syscall.netbsd.constants");

var mt = {}; // metatables

var addtypes = {
  fdset = "fd_set",
  clockid = "clockid_t",
  register = "register_t",
  lwpid = "lwpid_t",
};

var addstructs = {
  ufs_args = "struct ufs_args",
  tmpfs_args = "struct tmpfs_args",
  ptyfs_args = "struct ptyfs_args",
  procfs_args = "struct procfs_args",
  statvfs = "struct statvfs",
  kfilter_mapping = "struct kfilter_mapping",
  in6_ifstat = "struct in6_ifstat",
  icmp6_ifstat = "struct icmp6_ifstat",
  in6_ifreq = "struct in6_ifreq",
  in6_addrlifetime = "struct in6_addrlifetime",
};

if( version == 6 ) {
  addstructs.ptmget = "struct compat_60_ptmget";
} else {
  addstructs.ptmget = "struct ptmget";
}

for( k, v in pairs(addtypes) ) { addtype(types, k, v); }
for( k, v in pairs(addstructs) ) { addtype(types, k, v, lenmt); }

// 64 bit dev_t
var function makedev(major, minor) {
  if( type(major) == "table" ) { major, minor = major[1], major[2]; }
  var dev = t.dev(major || 0);
  if( minor ) {
    var low = bit.bor(bit.band(minor, 0xff), bit.lshift(bit.band(major, 0xfff), 8), bit.lshift(bit.band(minor, bit.bnot(0xff)), 12));
    var high = bit.band(major, bit.bnot(0xfff));
    dev = t.dev(low) + 0x100000000 * t.dev(high);
  }
  return dev;
}

mt.device = {
  index = {
    major = function(dev) {
      var h, l = i6432(dev.dev);
      return bit.bor(bit.band(bit.rshift(l, 8), 0xfff), bit.band(h, bit.bnot(0xfff)));
    },
    minor = function(dev) {
      var h, l = i6432(dev.dev);
      return bit.bor(bit.band(l, 0xff), bit.band(bit.rshift(l, 12), bit.bnot(0xff)));
    },
    device = function(dev) { return tonumber(dev.dev); },
  },
  newindex = {
    device = function(dev, major, minor) { dev.dev = makedev(major, minor); },
  },
  __new = function(tp, major, minor) {
    return ffi.new(tp, makedev(major, minor));
  },
};

addtype(types, "device", "struct {dev_t dev;}", mt.device);

mt.stat = {
  index = {
    dev = function(st) { return t.device(st.st_dev); },
    mode = function(st) { return st.st_mode; },
    ino = function(st) { return tonumber(st.st_ino); },
    nlink = function(st) { return st.st_nlink; },
    uid = function(st) { return st.st_uid; },
    gid = function(st) { return st.st_gid; },
    rdev = function(st) { return t.device(st.st_rdev); },
    atime = function(st) { return st.st_atimespec.time; },
    ctime = function(st) { return st.st_ctimespec.time; },
    mtime = function(st) { return st.st_mtimespec.time; },
    birthtime = function(st) { return st.st_birthtimespec.time; },
    size = function(st) { return tonumber(st.st_size); },
    blocks = function(st) { return tonumber(st.st_blocks); },
    blksize = function(st) { return tonumber(st.st_blksize); },
    flags = function(st) { return st.st_flags; },
    gen = function(st) { return st.st_gen; },

    type = function(st) { return bit.band(st.st_mode, c.S_I.FMT); },
    todt = function(st) { return bit.rshift(st.type, 12); },
    isreg = function(st) { return st.type == c.S_I.FREG; }, // TODO allow upper case too?
    isdir = function(st) { return st.type == c.S_I.FDIR; },
    ischr = function(st) { return st.type == c.S_I.FCHR; },
    isblk = function(st) { return st.type == c.S_I.FBLK; },
    isfifo = function(st) { return st.type == c.S_I.FIFO; },
    islnk = function(st) { return st.type == c.S_I.FLNK; },
    issock = function(st) { return st.type == c.S_I.FSOCK; },
    iswht = function(st) { return st.type == c.S_I.FWHT; },
  },
};

// add some friendlier names to stat, also for luafilesystem compatibility
mt.stat.index.access = mt.stat.index.atime;
mt.stat.index.modification = mt.stat.index.mtime;
mt.stat.index.change = mt.stat.index.ctime;

var namemap = {
  file             = mt.stat.index.isreg,
  directory        = mt.stat.index.isdir,
  link             = mt.stat.index.islnk,
  socket           = mt.stat.index.issock,
  ["char device"]  = mt.stat.index.ischr,
  ["block device"] = mt.stat.index.isblk,
  ["named pipe"]   = mt.stat.index.isfifo,
};

mt.stat.index.typename = function(st) {
  for( k, v in pairs(namemap) ) { if( v(st) ) { return k; } }
  return "other";
};

addtype(types, "stat", "struct stat", mt.stat);

var signames = {};
var duplicates = {IOT = true};
for( k, v in pairs(c.SIG) ) {
  if( ! duplicates[k] ) { signames[v] = k; }
}

// TODO see note in Linux, we should be consistently using the correct union
mt.siginfo = {
  index = {
    signo   = function(s) { return s._info._signo; },
    code    = function(s) { return s._info._code; },
    errno   = function(s) { return s._info._errno; },
    value   = function(s) { return s._info._reason._rt._value; },
    pid     = function(s) { return s._info._reason._child._pid; },
    uid     = function(s) { return s._info._reason._child._uid; },
    status  = function(s) { return s._info._reason._child._status; },
    utime   = function(s) { return s._info._reason._child._utime; },
    stime   = function(s) { return s._info._reason._child._stime; },
    addr    = function(s) { return s._info._reason._fault._addr; },
    band    = function(s) { return s._info._reason._poll._band; },
    fd      = function(s) { return s._info._reason._poll._fd; },
    signame = function(s) { return signames[s.signo]; },
  },
  newindex = {
    signo   = function(s, v) { s._info._signo = v; },
    code    = function(s, v) { s._info._code = v; },
    errno   = function(s, v) { s._info._errno = v; },
    value   = function(s, v) { s._info._reason._rt._value = v; },
    pid     = function(s, v) { s._info._reason._child._pid = v; },
    uid     = function(s, v) { s._info._reason._child._uid = v; },
    status  = function(s, v) { s._info._reason._child._status = v; },
    utime   = function(s, v) { s._info._reason._child._utime = v; },
    stime   = function(s, v) { s._info._reason._child._stime = v; },
    addr    = function(s, v) { s._info._reason._fault._addr = v; },
    band    = function(s, v) { s._info._reason._poll._band = v; },
    fd      = function(s, v) { s._info._reason._poll._fd = v; },
  },
};

addtype(types, "siginfo", "siginfo_t", mt.siginfo);

// sigaction, standard POSIX behaviour with union of handler and sigaction
addtype_fn(types, "sa_sigaction", "void (*)(int, siginfo_t *, void *)");

mt.sigaction = {
  index = {
    handler = function(sa) { return sa._sa_u._sa_handler; },
    sigaction = function(sa) { return sa._sa_u._sa_sigaction; },
    mask = function(sa) { return sa.sa_mask; },
    flags = function(sa) { return tonumber(sa.sa_flags); },
  },
  newindex = {
    handler = function(sa, v) {
      if( type(v) == "string" ) { v = pt.void(c.SIGACT[v]); }
      if( type(v) == "number" ) { v = pt.void(v); }
      sa._sa_u._sa_handler = v;
    },
    sigaction = function(sa, v) {
      if( type(v) == "string" ) { v = pt.void(c.SIGACT[v]); }
      if( type(v) == "number" ) { v = pt.void(v); }
      sa._sa_u._sa_sigaction = v;
    },
    mask = function(sa, v) {
      if( ! ffi.istype(t.sigset, v) ) { v = t.sigset(v); }
      sa.sa_mask = v;
    },
    flags = function(sa, v) { sa.sa_flags = c.SA[v]; },
  },
  __new = function(tp, tab) {
    var sa = ffi.new(tp);
    if( tab ) { for( k, v in pairs(tab) ) { sa[k] = v; } }
    if( tab && tab.sigaction ) { sa.sa_flags = bit.bor(sa.flags, c.SA.SIGINFO); } // this flag must be set if sigaction set
    return sa;
  },
};

addtype(types, "sigaction", "struct sigaction", mt.sigaction);

// TODO some fields still missing
mt.sigevent = {
  index = {
    notify = function(this) { return this.sigev_notify; },
    signo = function(this) { return this.sigev_signo; },
    value = function(this) { return this.sigev_value; },
  },
  newindex = {
    notify = function(this, v) { this.sigev_notify = c.SIGEV[v]; },
    signo = function(this, v) { this.sigev_signo = c.SIG[v]; },
    value = function(this, v) { this.sigev_value = t.sigval(v); }, // auto assigns based on type
  },
  __new = newfn,
};

addtype(types, "sigevent", "struct sigevent", mt.sigevent);

mt.dirent = {
  index = {
    fileno = function(this) { return tonumber(this.d_fileno); },
    reclen = function(this) { return this.d_reclen; },
    namlen = function(this) { return this.d_namlen; },
    type = function(this) { return this.d_type; },
    name = function(this) { return ffi.string(this.d_name, this.d_namlen); },
    toif = function(this) { return bit.lshift(this.d_type, 12); }, // convert to stat types
  },
  __len = function(this) { return this.d_reclen; },
};

mt.dirent.index.ino = mt.dirent.index.fileno; // alternate name

// TODO previously this allowed lower case values, but this static version does not
// could add mt.dirent.index[tolower(k)] = mt.dirent.index[k] but need to do consistently elsewhere
for( k, v in pairs(c.DT) ) {
  mt.dirent.index[k] = function(this) { return this.type == v; };
}

addtype(types, "dirent", "struct dirent", mt.dirent);

mt.ifreq = {
  index = {
    name = function(ifr) { return ffi.string(ifr.ifr_name); },
    addr = function(ifr) { return ifr.ifr_ifru.ifru_addr; },
    dstaddr = function(ifr) { return ifr.ifr_ifru.ifru_dstaddr; },
    broadaddr = function(ifr) { return ifr.ifr_ifru.ifru_broadaddr; },
    space = function(ifr) { return ifr.ifr_ifru.ifru_space; },
    flags = function(ifr) { return ifr.ifr_ifru.ifru_flags; },
    metric = function(ifr) { return ifr.ifr_ifru.ifru_metric; },
    mtu = function(ifr) { return ifr.ifr_ifru.ifru_mtu; },
    dlt = function(ifr) { return ifr.ifr_ifru.ifru_dlt; },
    value = function(ifr) { return ifr.ifr_ifru.ifru_value; },
    // TODO rest of fields (buf, buflen)
  },
  newindex = {
    name = function(ifr, v) {
      assert(#v < c.IFNAMSIZ, "name too long");
      ifr.ifr_name = v;
    },
    flags = function(ifr, v) {
      ifr.ifr_ifru.ifru_flags = c.IFF[v];
    },
    // TODO rest of fields
  },
  __new = newfn,
};

addtype(types, "ifreq", "struct ifreq", mt.ifreq);

// ifaliasreq takes sockaddr, but often want to supply in_addr as port irrelevant
// TODO want to return a sockaddr so can asign vs ffi.copy below, or fix sockaddr to be more like sockaddr_storage
var function tosockaddr(v) {
  if( ffi.istype(t.in_addr, v) ) { return t.sockaddr_in(0, v); }
  if( ffi.istype(t.in6_addr, v) ) { return t.sockaddr_in6(0, v); }
  return mktype(t.sockaddr, v);
}

mt.ifaliasreq = {
  index = {
    name = function(ifra) { return ffi.string(ifra.ifra_name); },
    addr = function(ifra) { return ifra.ifra_addr; },
    dstaddr = function(ifra) { return ifra.ifra_dstaddr; },
    mask = function(ifra) { return ifra.ifra_mask; },
  },
  newindex = {
    name = function(ifra, v) {
      assert(#v < c.IFNAMSIZ, "name too long");
      ifra.ifra_name = v;
    },
    addr = function(ifra, v) {
      var addr = tosockaddr(v);
      ffi.copy(ifra.ifra_addr, addr, #addr);
    },
    dstaddr = function(ifra, v) {
      var addr = tosockaddr(v);
      ffi.copy(ifra.ifra_dstaddr, addr, #addr);
    },
    mask = function(ifra, v) {
      var addr = tosockaddr(v);
      ffi.copy(ifra.ifra_mask, addr, #addr);
    },
  },
  __new = newfn,
};

mt.ifaliasreq.index.broadaddr = mt.ifaliasreq.index.dstaddr;
mt.ifaliasreq.newindex.broadaddr = mt.ifaliasreq.newindex.dstaddr;

addtype(types, "ifaliasreq", "struct ifaliasreq", mt.ifaliasreq);

mt.in6_aliasreq = {
  index = {
    name = function(ifra) { return ffi.string(ifra.ifra_name); },
    addr = function(ifra) { return ifra.ifra_addr; },
    dstaddr = function(ifra) { return ifra.ifra_dstaddr; },
    prefixmask = function(ifra) { return ifra.ifra_prefixmask; },
    lifetime = function(ifra) { return ifra.ifra_lifetime; },
  },
  newindex = {
    name = function(ifra, v) {
      assert(#v < c.IFNAMSIZ, "name too long");
      ifra.ifra_name = v;
    },
    addr = function(ifra, v) {
      var addr = tosockaddr(v);
      ffi.copy(ifra.ifra_addr, addr, #addr);
    },
    dstaddr = function(ifra, v) {
      var addr = tosockaddr(v);
      ffi.copy(ifra.ifra_dstaddr, addr, #addr);
    },
    prefixmask = function(ifra, v) {
      var addr = tosockaddr(v);
      ffi.copy(ifra.ifra_prefixmask, addr, #addr);
    },
    lifetime = function(ifra, v) { ifra.ifra_lifetime = mktype(t.in6_addrlifetime, v); },
  },
  __new = newfn,
};

addtype(types, "in6_aliasreq", "struct in6_aliasreq", mt.in6_aliasreq);

mt.in6_addrlifetime = {
  index = {
    expire = function(this) { return this.ia6t_expire; },
    preferred = function(this) { return this.ia6t_preferred; },
    vltime = function(this) { return this.ia6t_vltime; },
    pltime = function(this) { return this.ia6t_pltime; },
  },
  newindex = {
    expire = function(this, v) { this.ia6t_expire = mktype(t.time, v); },
    preferred = function(this, v) { this.ia6t_preferred = mktype(t.time, v); },
    vltime = function(this, v) { this.ia6t_vltime = c.ND6[v]; },
    pltime = function(this, v) { this.ia6t_pltime = c.ND6[v]; },
  },
  __new = newfn,
};

var ktr_type = {};
for( k, v in pairs(c.KTR) ) { ktr_type[v] = k; }

var ktr_val_tp = {
  SYSCALL = "ktr_syscall",
  SYSRET = "ktr_sysret",
  NAMEI = "string",
  // TODO GENIO
  // TODO PSIG
  CSW = "ktr_csw",
  EMUL = "string",
  // TODO USER
  EXEC_ARG = "string",
  EXEC_ENV = "string",
  // TODO SAUPCALL
  MIB = "string",
  // TODO EXEC_FD
};

mt.ktr_header = {
  index = {
    len = function(ktr) { return ktr.ktr_len; },
    version = function(ktr) { return ktr.ktr_version; },
    type = function(ktr) { return ktr.ktr_type; },
    typename = function(ktr) { return ktr_type[ktr.ktr_type]; },
    pid = function(ktr) { return ktr.ktr_pid; },
    comm = function(ktr) { return ffi.string(ktr.ktr_comm); },
    lid = function(ktr) { return ktr._v._v2._lid; },
    olid = function(ktr) { return ktr._v._v1._lid; },
    time = function(ktr) { return ktr._v._v2._ts; },
    otv = function(ktr) { return ktr._v._v0._tv; },
    ots = function(ktr) { return ktr._v._v1._ts; },
    unused = function(ktr) { return ktr._v._v0._buf; },
    valptr = function(ktr) { return pt.char(ktr) + s.ktr_header; }, // assumes ktr is a pointer
    values = function(ktr) {
      if( ! ktr.typename ) { return "bad ktrace type"; }
      var tpnam = ktr_val_tp[ktr.typename];
      if( ! tpnam ) { return "unimplemented ktrace type"; }
      if( tpnam == "string" ) { return ffi.string(ktr.valptr, ktr.len); }
      return pt[tpnam](ktr.valptr);
    },
  },
  __len = function(ktr) { return s.ktr_header + ktr.len; },
  __tostring = function(ktr) {
    return ktr.pid .. " " .. ktr.comm .. " " .. (ktr.typename || "??") .. " " .. tostring(ktr.values);
  },
};

addtype(types, "ktr_header", "struct ktr_header", mt.ktr_header);

var sysname = {};
for( k, v in pairs(c.SYS) ) { sysname[v] = k; }

var ioctlname;

// TODO this is a temporary hack, needs better code
var special = {
  ioctl = function(fd, request, val) {
    if( ! ioctlname ) {
      ioctlname = {};
      var IOCTL = require ("syscall.netbsd.constants").IOCTL; // see #94 as well, we cannot load early as ioctl depends on types
      for( k, v in pairs(IOCTL) ) {
        if( type(v) == "table" ) { v = v.number; }
        v = tonumber(v);
        if( v ) { ioctlname[v] = k; }
      }
    }
    fd = tonumber(t.int(fd));
    request = tonumber(t.int(request));
    val = tonumber(val);
    var ionm = ioctlname[request] || tostring(request);
    return tostring(fd) .. ", " .. ionm .. ", " .. tostring(val);
  },
};

mt.ktr_syscall = {
  index = {
    code = function(ktr) { return ktr.ktr_code; },
    name = function(ktr) { return sysname[ktr.code] || tostring(ktr.code); },
    argsize = function(ktr) { return ktr.ktr_argsize; },
    nreg = function(ktr) { return ktr.argsize / s.register; },
    registers = function(ktr) { return pt.register(pt.char(ktr) + s.ktr_syscall); } // assumes ktr is a pointer
  },
  __len = function(ktr) { return s.ktr_syscall + ktr.argsize; },
  __tostring = function(ktr) {
    var rtab = {};
    for( i = 0, ktr.nreg - 1 ) { rtab[i + 1] = tostring(ktr.registers[i]); }
    if( special[ktr.name] ) {
      for( i = 0, ktr.nreg - 1 ) { rtab[i + 1] = ktr.registers[i]; }
      return ktr.name .. " (" .. special[ktr.name](unpack(rtab)) .. ")";
    }
    for( i = 0, ktr.nreg - 1 ) { rtab[i + 1] = tostring(ktr.registers[i]); }
    return ktr.name .. " (" .. table.concat(rtab, ",") .. ")";
  },
};

addtype(types, "ktr_syscall", "struct ktr_syscall", mt.ktr_syscall);

mt.ktr_sysret = {
  index = {
    code = function(ktr) { return ktr.ktr_code; },
    name = function(ktr) { return sysname[ktr.code] || tostring(ktr.code); },
    error = function(ktr) { if( ktr.ktr_error != 0 ) { return t.error(ktr.ktr_error); } },
    retval = function(ktr) { return ktr.ktr_retval; },
    retval1 = function(ktr) { return ktr.ktr_retval_1; },
  },
  __tostring = function(ktr) {
    if( ktr.error ) {
      return ktr.name .. " " .. (ktr.error.sym || ktr.error.errno) .. " " .. (tostring(ktr.error) || "");
    } else {
      return ktr.name .. " " .. tostring(ktr.retval) .. " " .. tostring(ktr.retval1) .. " ";
    }
  }
};

addtype(types, "ktr_sysret", "struct ktr_sysret", mt.ktr_sysret);

mt.ktr_csw = {
  __tostring = function(ktr) {
    return "context switch"; // TODO
  },
};

addtype(types, "ktr_csw", "struct ktr_csw", mt.ktr_csw);

// slightly miscellaneous types, eg need to use Lua metatables

// TODO see Linux notes
mt.wait = {
  __index = function(w, k) {
    var _WSTATUS = bit.band(w.status, octal("0177"));
    var _WSTOPPED = octal("0177");
    var WTERMSIG = _WSTATUS;
    var EXITSTATUS = bit.band(bit.rshift(w.status, 8), 0xff);
    var WIFEXITED = (_WSTATUS == 0);
    var tab = {
      WIFEXITED = WIFEXITED,
      WIFSTOPPED = bit.band(w.status, 0xff) == _WSTOPPED,
      WIFSIGNALED = _WSTATUS != _WSTOPPED && _WSTATUS != 0
    };
    if( tab.WIFEXITED ) { tab.EXITSTATUS = EXITSTATUS; }
    if( tab.WIFSTOPPED ) { tab.WSTOPSIG = EXITSTATUS; }
    if( tab.WIFSIGNALED ) { tab.WTERMSIG = WTERMSIG; }
    if( tab[k] ) { return tab[k]; }
    var uc = 'W' .. k->upper();
    if( tab[uc] ) { return tab[uc]; }
  }
};

function t.waitstatus(status) {
  return setmetatable({status = status}, mt.wait);
}

mt.ifdrv = {
  index = {
    name = function(this) { return ffi.string(this.ifd_name); },
  },
  newindex = {
    name = function(this, v) {
      assert(#v < c.IFNAMSIZ, "name too long");
      this.ifd_name = v;
    },
    cmd = function(this, v) { this.ifd_cmd = v; }, // TODO which namespace(s)?
    data = function(this, v) {
      this.ifd_data = v;
      this.ifd_len = #v;
    },
    len = function(this, v) { this.ifd_len = v; },
  },
  __new = newfn,
};

addtype(types, "ifdrv", "struct ifdrv", mt.ifdrv);

mt.ifbreq = {
  index = {
    ifsname = function(this) { return ffi.string(this.ifbr_ifsname); },
  },
  newindex = {
    ifsname = function(this, v) {
      assert(#v < c.IFNAMSIZ, "name too long");
      this.ifbr_ifsname = v;
    },
  },
  __new = newfn,
};

addtype(types, "ifbreq", "struct ifbreq", mt.ifbreq);

mt.flock = {
  index = {
    type = function(this) { return this.l_type; },
    whence = function(this) { return this.l_whence; },
    start = function(this) { return this.l_start; },
    len = function(this) { return this.l_len; },
    pid = function(this) { return this.l_pid; },
  },
  newindex = {
    type = function(this, v) { this.l_type = c.FCNTL_LOCK[v]; },
    whence = function(this, v) { this.l_whence = c.SEEK[v]; },
    start = function(this, v) { this.l_start = v; },
    len = function(this, v) { this.l_len = v; },
    pid = function(this, v) { this.l_pid = v; },
  },
  __new = newfn,
};

addtype(types, "flock", "struct flock", mt.flock);

mt.clockinfo = {
  print = {"tick", "tickadj", "hz", "profhz", "stathz"},
  __new = newfn,
};

addtype(types, "clockinfo", "struct clockinfo", mt.clockinfo);

mt.loadavg = {
  index = {
    loadavg = function(this) { return {tonumber(this.ldavg[0]) / tonumber(this.fscale),
                                     tonumber(this.ldavg[1]) / tonumber(this.fscale),
                                     tonumber(this.ldavg[2]) / tonumber(this.fscale)};
    },
  },
  __tostring = function(this) {
    var loadavg = this.loadavg;
    return string.format("{ %.2f, %.2f, %.2f }", loadavg[1], loadavg[2], loadavg[3]);
  },
};

addtype(types, "loadavg", "struct loadavg", mt.loadavg);

mt.vmtotal = {
  index = {
    rq = function(this) { return this.t_rq; },
    dw = function(this) { return this.t_dw; },
    pw = function(this) { return this.t_pw; },
    sl = function(this) { return this.t_sl; },
    vm = function(this) { return this.t_vm; },
    avm = function(this) { return this.t_avm; },
    rm = function(this) { return this.t_rm; },
    arm = function(this) { return this.t_arm; },
    vmshr= function(this) { return this.t_vmshr; },
    avmshr= function(this) { return this.t_avmshr; },
    rmshr = function(this) { return this.t_rmshr; },
    armshr = function(this) { return this.t_armshr; },
    free = function(this) { return this.t_free; },
  },
  print = {"rq", "dw", "pw", "sl", "vm", "avm", "rm", "arm", "vmshr", "avmshr", "rmshr", "armshr", "free"},
};

addtype(types, "vmtotal", "struct vmtotal", mt.vmtotal);

mt.mmsghdr = {
  index = {
    hdr = function(this) { return this.msg_hdr; },
    len = function(this) { return this.msg_len; },
  },
  newindex = {
    hdr = function(this, v) { this.hdr = v; },
  },
  __new = newfn,
};

addtype(types, "mmsghdr", "struct mmsghdr", mt.mmsghdr);

mt.mmsghdrs = {
  __len = function(p) { return p.count; },
  __new = function(tp, ps) {
    if( type(ps) == 'number' ) { return ffi.new(tp, ps, ps); }
    var count = #ps;
    var mms = ffi.new(tp, count, count);
    for( n = 1, count ) {
      mms.msg[n - 1].msg_hdr = mktype(t.msghdr, ps[n]);
    }
    return mms;
  },
  __ipairs = function(p) { return reviter, p.msg, p.count; } // TODO want forward iterator really...
};

addtype_var(types, "mmsghdrs", "struct {int count; struct mmsghdr msg[?];}", mt.mmsghdrs);

return types;

}

return {init = init};


// detect netbsd version

var abi = require ("syscall.abi");

var ffi = require ("ffi");

require ("syscall.ffitypes");

var version, major, minor;

var function inlibc_fn(k) { return ffi.C[k]; }

// NetBSD ABI version
// TODO if running rump on NetBSD the version detection is a bit flaky if the host and rump differ
// normally this is ok if you init netbsd first and have compat installed for rump, or do not use both...
ffi.cdef([=[
int sysctl(const int *, unsigned int, void *, size_t *, const void *, size_t);
int __sysctl(const int *, unsigned int, void *, size_t *, const void *, size_t);
int rump_getversion(void);
]=]);
var sc = ffi.new("int[2]", 1, 3); // kern.osrev
var osrevision = ffi.new("int[1]");
var lenp = ffi.new("unsigned long[1]", ffi.sizeof("int"));
var ok, res;
if( abi.host == "netbsd" ) {
  ok, res = pcall(ffi.C.sysctl, sc, 2, osrevision, lenp, null, 0);
  osrevision = osrevision[0];
}
if( ! ok || res == -1 ) { if( pcall(inlibc_fn, "rump_getversion") ) { ok, osrevision = pcall(ffi.C.rump_getversion); } }
if( ! ok ) { 
  version = 7;
} else {
  major = math.floor(osrevision / 100000000);
  minor = math.floor(osrevision / 1000000) - major * 100;
  version = major;
  if( minor == 99 ) { ++version    ; }
}
return {version = version, major = major, minor = minor};


// NetBSD utility functions

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) {

var abi, types, c = S.abi, S.types, S.c;
var t, pt, s = types.t, types.pt, types.s;

var h = require ("syscall.helpers");
var divmod = h.divmod;

var ffi = require ("ffi");

var bit = require ("syscall.bit");

var octal = h.octal;

// TODO move to helpers? see notes in syscall.lua about reworking though
var function istype(tp, x) {
  if( ffi.istype(tp, x) ) { return x; }
  return false;
}

var util = {};

var mt = {};

// initial implementation of network ioctls, no real attempt to make it compatible with Linux...
// initially just implement the ones from rump netconfig, make interface later

// it is a bit messy creating new socket every time, better make a sequence of commands

var function sockioctl(domain, tp, io, data) {
  var sock, err = S.socket(domain, tp);
  if( ! sock ) { return null, err; }
  io, err = sock->ioctl(io, data);
  sock->close();
  if( ! io ) { return null, err; }
  return io;
}

function util.ifcreate(name) { return sockioctl("inet", "dgram", "SIOCIFCREATE", t.ifreq({name = name})); }
function util.ifdestroy(name) { return sockioctl("inet", "dgram", "SIOCIFDESTROY", t.ifreq({name = name})); }
function util.ifgetflags(name) {
  var io, err = sockioctl("inet", "dgram", "SIOCGIFFLAGS", t.ifreq({name = name}));
  if( ! io ) { return null, err; }
  return io.flags;
}
function util.ifsetflags(name, flags) {
  return sockioctl("inet", "dgram", "SIOCSIFFLAGS", {name = name, flags = c.IFF[flags]});
}
function util.ifup(name) {
  var flags, err = util.ifgetflags(name);
  if( ! flags ) { return null, err; }
  return util.ifsetflags(name, c.IFF(flags, "up"));
}
function util.ifdown(name) {
  var flags, err = util.ifgetflags(name);
  if( ! flags ) { return null, err; }
  return util.ifsetflags(name, c.IFF(flags, "~up"));
}

function util.ifsetlinkstr(name, str) { // used to pass (optional) string to rump virtif (eg name of underlying tap device)
  return sockioctl("inet", "dgram", "SIOCSLINKSTR", {name = name, cmd = 0, data = str});
}

// TODO merge into one ifaddr function
function util.ifaddr_inet4(name, addr, mask) {
// TODO this function needs mask as an inaddr, so need to fix this if passed as / format or number
  addr, mask = util.inet_name(addr, mask);

  var bn = addr->get_mask_bcast(mask);
  var broadcast, netmask = bn.broadcast, bn.netmask;

  var ia = t.ifaliasreq({name = name, addr = addr, mask = netmask, broadaddr = broadcast});

  return sockioctl("inet", "dgram", "SIOCAIFADDR", ia);
}
function util.ifaddr_inet6(name, addr, mask) {
  addr, mask = util.inet_name(addr, mask);
  assert(ffi.istype(t.in6_addr, addr), "not an ipv6 address"); // TODO remove once merged

  var prefixmask = t.in6_addr();
  var bb, b = divmod(mask, 8);
  for( i = 0, bb - 1 ) { prefixmask.s6_addr[i] = 0xff; }
  if( bb < 16 ) { prefixmask.s6_addr[bb] = bit.lshift(0xff, 8 - b); } // TODO needs test!

  var ia = t.in6_aliasreq({name = name, addr = addr, prefixmask = prefixmask,
                            lifetime = {pltime = "infinite_lifetime", vltime = "infinite_lifetime"}});

  return sockioctl("inet6", "dgram", "SIOCAIFADDR_IN6", ia);
}

// table based mount, more cross OS compatible
function util.mount(tab) {
  var filesystemtype = tab.type;
  var dir = tab.target || tab.dir;
  var flags = tab.flags;
  var data = tab.data;
  var datalen = tab.datalen;
  if( tab.fspec ) { data = tab.fspec; }
  return S.mount(filesystemtype, dir, flags, data, datalen);
}

var function kdumpfn(len) {
  return function(buf, pos) {
    if( pos + s.ktr_header >= len ) { return null; }
    var ktr = pt.ktr_header(buf + pos);
    if( pos + s.ktr_header + ktr.len >= len ) { return null; }
    return pos + #ktr, ktr;
  };
}

function util.kdump(buf, len) {
  return kdumpfn(len), buf, 0;
}

var function do_bridge_setcmd(name, op, arg) {
  return sockioctl("inet", "dgram", "SIOCSDRVSPEC", {name = name, cms = op, data = arg});
}
var function do_bridge_getcmd(name, op, arg) { // TODO should allocate correct arg type here based on arg
  var data, err = sockioctl("inet", "dgram", "SIOCGDRVSPEC", {name = name, cms = op, data = arg});
  if( ! data ) { return null, err; }
  return arg;
}

return util;

}

return {init = init};


// BSD specific syscalls

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var abi = require ("syscall.abi");

return function(S, hh, c, C, types) {

var ffi = require ("ffi");

var errno = ffi.errno;

var t, pt, s = types.t, types.pt, types.s;

var ret64, retnum, retfd, retbool, retptr, retiter = hh.ret64, hh.retnum, hh.retfd, hh.retbool, hh.retptr, hh.retiter;

var h = require ("syscall.helpers");
var istype, mktype, getfd = h.istype, h.mktype, h.getfd;
var octal = h.octal;

function S.paccept(sockfd, addr, addrlen, set, flags) {
  if( set ) { set = mktype(t.sigset, set); }
  var saddr = pt.sockaddr(addr);
  return retfd(C.paccept(getfd(sockfd), saddr, addrlen, set, c.SOCK[flags]));
}

var mntstruct = {
  ffs = t.ufs_args,
  //nfs = t.nfs_args,
  //mfs = t.mfs_args,
  tmpfs = t.tmpfs_args,
  sysvbfs = t.ufs_args,
  ptyfs = t.ptyfs_args,
  procfs = t.procfs_args,
};

function S.mount(fstype, dir, flags, data, datalen) {
  var str;
  if( type(data) == "string" ) { // common case, for ufs etc
    str = data;
    data = {fspec = pt.char(str)};
  }
  if( data ) {
    var tp = mntstruct[fstype];
    if( tp ) { data = mktype(tp, data); }
  } else {
    datalen = 0;
  }
  var ret = C.mount(fstype, dir, c.MNT[flags], data, datalen || #data);
  return retbool(ret);
}

function S.reboot(how, bootstr) {
  return retbool(C.reboot(c.RB[how], bootstr));
}

function S.fsync_range(fd, how, start, length) { return retbool(C.fsync_range(getfd(fd), c.FSYNC[how], start, length)); }

function S.getvfsstat(flags, buf, size) { // note order of args as usually leave buf empty
  flags = c.VFSMNT[flags || "WAIT"]; // default not zero
  if( ! buf ) {
    var n, err = C.getvfsstat(null, 0, flags);
    if( ! n ) { return null, t.error(err || errno()); }
    //buf = t.statvfss(n) -- TODO define
    size = s.statvfs * n;
  }
  size = size || #buf;
  var n, err = C.getvfsstat(buf, size, flags);
  if( ! n ) { return null, err; }
  return buf; // TODO need type with number
}

// TODO when we define this for osx can go in common code (curently defined in libc.lua)
function S.getcwd(buf, size) {
  size = size || c.PATH_MAX;
  buf = buf || t.buffer(size);
  var ret, err = C.getcwd(buf, size);
  if( ret == -1 ) { return null, t.error(err || errno()); }
  return ffi.string(buf);
}

function S.kqueue1(flags) { return retfd(C.kqueue1(c.O[flags])); }

// TODO this is the same as ppoll other than if timeout is modified, which Linux syscall but not libc does; could merge
function S.pollts(fds, timeout, set) {
  if( timeout ) { timeout = mktype(t.timespec, timeout); }
  if( set ) { set = mktype(t.sigset, set); }
  return retnum(C.pollts(fds.pfd, #fds, timeout, set));
}

function S.ktrace(tracefile, ops, trpoints, pid) {
  return retbool(C.ktrace(tracefile, c.KTROP[ops], c.KTRFAC(trpoints, "V2"), pid));
}
function S.fktrace(fd, ops, trpoints, pid) {
  return retbool(C.fktrace(getfd(fd), c.KTROP[ops], c.KTRFAC(trpoints, "V2"), pid));
}
function S.utrace(label, addr, len) {
  return retbool(C.utrace(label, addr, len)); // TODO allow string to be passed as addr?
}

// pty functions
function S.grantpt(fd) { return S.ioctl(fd, "TIOCGRANTPT"); }
function S.unlockpt(fd) { return 0; }
function S.ptsname(fd) {
  var pm, err = S.ioctl(fd, "TIOCPTSNAME");
  if( ! pm ) { return null, err; }
  return ffi.string(pm.sn);
}

// TODO we need to fix sigaction in NetBSD, syscall seems to have changed to sigaction_tramp
function S.pause() { return S.select({}); } // select on nothing forever

// ksem functions. Not very well documented! You shoudl probably use pthreads in most cases
function S.ksem_init(value, semid) {
  semid = semid || t.intptr1();
  var ok, err = C._ksem_init(value, semid);
  if( ! ok ) { return null, t.error(err || errno()); }
  return semid[0];
}

function S.ksem_destroy(semid) {
  return retbool(C._ksem_destroy(semid));
}

return S;

};


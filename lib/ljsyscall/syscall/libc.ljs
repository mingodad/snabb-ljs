// things that are libc only, not syscalls
// this file will not be included if not running with libc eg for rump

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

var function init(S) {

var c = S.c;
var types = S.types;
var t, s, pt = types.t, types.s, types.pt;

var ffi = require ("ffi");

var h = require ("syscall.helpers");

var zeropointer = pt.void(0);

var function retbool(ret) {
  if( ret == -1 ) { return null, t.error(); }
  return true;
}

// if getcwd not defined, fall back to libc implementation (currently osx, freebsd)
// freebsd implementation fairly complex
if( ! S.getcwd ) {
ffi.cdef ([=[
char *getcwd(char *buf, size_t size);
]=]);
  function S.getcwd(buf, size) {
    size = size || c.PATH_MAX;
    buf = buf || t.buffer(size);
    var ret = ffi.C.getcwd(buf, size);
    if( ret == zeropointer ) { return null, t.error(); }
    return ffi.string(buf);
  }
}

// in NetBSD, OSX exit defined in libc, no _exit syscall available
if( ! S.exit ) {
  function S.exit(status) { return retbool(ffi.C.exit(c.EXIT[status || 0])); }
}

if( ! S._exit ) {
  S._exit = S.exit; // provide syscall exit if possible
}

ffi.cdef ([=[
int __cxa_atexit(void (*func) (void *), void * arg, void * dso_handle);
]=]);

var function inlibc(k) { return ffi.C[k]; }

if( pcall(inlibc, "exit") && pcall(inlibc, "__cxa_atexit") ) {
  function S.exit(status) { return retbool(ffi.C.exit(c.EXIT[status || 0])); } // use libc exit instead
  function S.atexit(f) { return retbool(ffi.C.__cxa_atexit(f, null, null)); }
}

/* -- need more types defined
int uname(struct utsname *buf);
time_t time(time_t *t);
*/

/*
int gethostname(char *name, size_t namelen);
int sethostname(const char *name, size_t len);
int getdomainname(char *name, size_t namelen);
int setdomainname(const char *name, size_t len);
--*/

// environment
ffi.cdef ([=[
// environment
extern char **environ;

int setenv(const char *name, const char *value, int overwrite);
int unsetenv(const char *name);
int clearenv(void);
char *getenv(const char *name);
]=]);

function S.environ() { // return whole environment as table
  var environ = ffi.C.environ;
  if( ! environ ) { return null; }
  var r = {};
  var i = 0;
  while( environ[i] != zeropointer ) {
    var e = ffi.string(environ[i]);
    var eq = e->find('=');
    if( eq ) {
      r[e->sub(1, eq - 1)] = e->sub(eq + 1);
    }
    ++i    ;
  }
  return r;
}

function S.getenv(name) {
  return S.environ()[name];
}
function S.unsetenv(name) { return retbool(ffi.C.unsetenv(name)); }
function S.setenv(name, value, overwrite) {
  overwrite = h.booltoc(overwrite); // allows nil as false/0
  return retbool(ffi.C.setenv(name, value, overwrite));
}
function S.clearenv() { return retbool(ffi.C.clearenv()); }

S.errno = ffi.errno;

return S;

}

return {init = init};


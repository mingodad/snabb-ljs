// this is intended to be compatible with luafilesystem https://github.com/keplerproject/luafilesystem

// currently does not implement locks

var require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string = 
require, error, assert, tonumber, tostring,
setmetatable, pairs, ipairs, unpack, rawget, rawset,
pcall, type, table, string;

// TODO allow use eg with rump kernel, needs an initialisation option
// maybe return a table with a metatable that allows init or uses default if no init?
var S = require ("syscall");

// TODO not implemented
// lfs.lock_dir
// lfs.lock
// unlock

var function lfswrap(f) {
  return function(...) {
    var ret, err = f(...);
    if( ! ret ) { return null, tostring(err); }
    return ret;
  };
}

var lfs = {};

lfs._VERSION = "ljsyscall lfs 1";

var attributes = {
  dev = "dev",
  ino = "ino",
  mode = "typename", // not sure why lfs insists on calling this mode
  nlink = "nlink",
  uid = "uid",
  gid = "gid",
  rdev = "rdev",
  access = "access",
  modification = "modification",
  change = "change",
  size = "size",
  blocks = "blocks",
  blksize = "blksize",
};

var function attr(st, aname) {
  if( aname ) {
    aname = attributes[aname];
    return st[aname];
  }
  var ret = {};
  for( k, v in pairs(attributes) ) { ret[k] = st[v]; }
  return ret;
}

function lfs.attributes(filepath, aname) {
  var st, err = S.stat(filepath);
  if( ! st ) { return null, tostring(err); }
  return attr(st, aname);
}
function lfs.symlinkattributes(filepath, aname) {
  var st, err = S.lstat(filepath);
  if( ! st ) { return null, tostring(err); }
  return attr(st, aname);
}

lfs.chdir = lfswrap(S.chdir);
lfs.currentdir = lfswrap(S.getcwd);
lfs.rmdir = lfswrap(S.rmdir);
lfs.touch = lfswrap(S.utime);

function lfs.mkdir(path) {
  var ret, err = S.mkdir(path, "0777");
  if( ! ret ) { return null, tostring(err); }
  return ret;
}

var function dir_close(dir) {
  dir.fd->close();
  dir.fd = null;
}

var function dir_next(dir) {
  if( ! dir.fd ) { error ("dir ended"); }
  var d;
  do {
    if( ! dir.di ) {
      var err;
      dir.di, err = dir.fd->getdents(dir.buf, dir.size);
      if( ! dir.di ) {
        dir_close(dir);
        error(tostring(err)); // not sure how we are suppose to handle errors
      }
      dir.first = true;
    }
    d = dir.di();
    if( ! d ) {
      dir.di = null;
      if( dir.first ) {
        dir_close(dir);
        return null;
      }
    }
    dir.first = false;
  } while(!( d) );
  return d.name;
}

function lfs.dir(path) {
  var size = 4096;
  var buf = S.t.buffer(size);
  var fd, err = S.open(path, "directory, rdonly");
  if( err ) { return null, tostring(err); }
  return dir_next, {size = size, buf = buf, fd = fd, next = dir_next, close = dir_close};
}

var flink, fsymlink = lfswrap(S.link), lfswrap(S.symlink);

function lfs.link(old, new, symlink) {
  if( symlink ) {
    return fsymlink(old, new);
  } else {
    return flink(old, new);
  }
}

function lfs.setmode(file, mode) { return true, "binary"; }

return lfs;


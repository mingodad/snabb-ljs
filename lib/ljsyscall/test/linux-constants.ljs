// test against clean set of kernel headers, standard set so cross platform.

/*
luajit test/linux-constants.lua x64 > ./obj/c.c && cc -U__i386__ -DBITS_PER_LONG=64 -I./include/linux-kernel-headers/x86_64/include -o ./obj/c ./obj/c.c && ./obj/c
luajit test/linux-constants.lua x86 > ./obj/c.c && cc -D__i386__ -DBITS_PER_LONG=32 -I./include/linux-kernel-headers/i386/include -o ./obj/c ./obj/c.c && ./obj/c
luajit test/linux-constants.lua arm > ./obj/c.c && cc -D__ARM_EABI__ -DBITS_PER_LONG=32 -I./include/linux-kernel-headers/arm/include -o ./obj/c ./obj/c.c && ./obj/c
luajit test/linux-constants.lua ppc > ./obj/c.c && cc -I./include/linux-kernel-headers/powerpc/include -o ./obj/c ./obj/c.c && ./obj/c
luajit test/linux-constants.lua mips > ./obj/c.c && cc -D__MIPSEL__ -D_MIPS_SIM=_MIPS_SIM_ABI32 -DCONFIG_32BIT -DBITS_PER_LONG=32 -D__LITTLE_ENDIAN_BITFIELD -D__LITTLE_ENDIAN -DCONFIG_CPU_LITTLE_ENDIAN -I./include/linux-kernel-headers/mips/include  -o ./obj/c ./obj/c.c && ./obj/c

*/

// TODO 32 bit warnings about signed ranges

var abi = require ("syscall.abi");

if( arg[1] ) { // fake arch
  abi.arch = arg[1];
  if( abi.arch == "x64" ) { abi.abi32, abi.abi64 = false, true; } else { abi.abi32, abi.abi64 = true, false; }
  if( abi.arch == "mips" ) { abi.mipsabi = "o32"; }
}

var function fixup_constants(abi, c) {
  // we only use one set
  if( abi.abi64 ) {
    c.F.GETLK64   = null;
    c.F.SETLK64   = null;
    c.F.SETLKW64  = null;
  } else {
    c.F.GETLK     = null;
    c.F.SETLK     = null;
    c.F.SETLKW    = null;
  }

  // internal use
  c.syscall = null;
  c.errornames = null;
  c.OMQATTR = null;
  c.EALIAS = null;

  // misleading, Musl has higher than Linux
  c.HOST_NAME_MAX = null;

  // fake constants
  c.MS.RO = null;
  c.MS.RW = null;
  c.MS.SECLABEL = null;
  c.IFF.ALL = null;
  c.IFF.NONE = null;
  c.W.ALL = null;
  c.MAP.ANON = null; // MAP.ANONYMOUS only

  // oddities to fix
  c.IFLA_VF_INFO.INFO = null;
  c.IFLA_VF_PORT.PORT = null;

  // umount is odd
  c.MNT = {};
  c.MNT.FORCE = c.UMOUNT.FORCE;
  c.MNT.DETACH = c.UMOUNT.DETACH;
  c.MNT.EXPIRE = c.UMOUNT.EXPIRE;
  c.UMOUNT.FORCE = null;
  c.UMOUNT.DETACH = null;
  c.UMOUNT.EXPIRE = null;

  if( abi.abi64 ) { c.O.LARGEFILE = null; }

  // renamed constants
  c.OPIPE = null;

  // we renamed these for namespacing reasons TODO can just set in nm table
  for( k, v in pairs(c.IFREQ) ) { c.IFF[k] = v; }
  c.IFREQ = null;

  c.__WNOTHREAD = c.W.NOTHREAD;
  c.__WALL = c.W.ALL;
  c.__WCLONE = c.W.CLONE;
  c.W.NOTHREAD, c.W.ALL, c.W.CLONE = null, null, null;

  // not part of kernel ABI I think - TODO check and maybe remove from ljsyscall
  c.SOMAXCONN = null;
  c.E.NOTSUP = null;
  c.SIG.CLD = null;

  // extra friendly names
  c.WAIT.ANY = null;
  c.WAIT.MYPGRP = null;

  // surely part of ABI? not defined in kernel ones we have though
  c.AF = null;
  c.MSG = null;
  c.SOCK = null;
  c.SOL = null;
  c.SHUT = null;
  c.OK = null;
  c.DT = null;

  // part of man(3) API so we can use any value we like?? - TODO move to common code? is this true in all OSs
  c.LOCKF = null;
  c.STD = null;
  c.SCM = null;
  c.TCSA = null;
  c.TCFLUSH = null;
  c.TCFLOW = null;
  c.EXIT = null;

  // not defined?
  c.UTIME = null;
  c.REG = null;
  c.PC = null; // neither _PC or _POSIX_ defined for capabilities

  // pointer type
  c.SIGACT = null;

  // epoll uses POLL values internally? 
  c.EPOLL.MSG = null;
  c.EPOLL.WRBAND = null;
  c.EPOLL.RDHUP = null;
  c.EPOLL.WRNORM = null;
  c.EPOLL.RDNORM = null;
  c.EPOLL.HUP = null;
  c.EPOLL.ERR = null;
  c.EPOLL.RDBAND = null;
  c.EPOLL.IN = null;
  c.EPOLL.OUT = null;
  c.EPOLL.PRI = null;

  // recent additions
  c.TCP.THIN_DUPACK = null;
  c.TCP.FASTOPEN = null;
  c.TCP.REPAIR_OPTIONS = null;
  c.TCP.THIN_LINEAR_TIMEOUTS = null;
  c.TCP.REPAIR = null;
  c.TCP.QUEUE_SEQ = null;
  c.TCP.TIMESTAMP = null;
  c.TCP.USER_TIMEOUT = null;
  c.TCP.REPAIR_QUEUE = null;

  // only in very recent headers, not in ones we are testing against, but include seccomp - will upgrade headers or fix soon
  c.IPPROTO.TP = null;
  c.IPPROTO.MTP = null;
  c.IPPROTO.ENCAP = null;
  c.SO.PEEK_OFF = null;
  c.SO.GET_FILTER = null;
  c.SO.NOFCS = null;
  c.IFF.DETACH_QUEUE = null;
  c.IFF.ATTACH_QUEUE = null;
  c.IFF.MULTI_QUEUE = null;
  c.PR.SET_NO_NEW_PRIVS = null;
  c.PR.GET_NO_NEW_PRIVS = null;
  c.PR.GET_TID_ADDRESS = null;
  c.TUN.TAP_MQ = null;
  c.IP.UNICAST_IF = null;
  c.NTF.SELF = null;
  c.NTF.MASTER = null;
  c.SECCOMP_MODE = null;
  c.SECCOMP_RET = null;
  c.MFD = null;

  // these are not even in linux git head headers or names wrong
  c.O.ASYNC = null;
  c.O.FSYNC = null;
  c.O.RSYNC = null;
  c.SPLICE_F = null; // not in any exported header, there should be a linux/splice.h for userspace
  c.MNT.FORCE = null;
  c.MNT.EXPIRE = null;
  c.MNT.DETACH = null;
  c.EPOLLCREATE.NONBLOCK = null;
  c.PR_MCE_KILL_OPT = null;
  c.SWAP_FLAG = null;
  c.ETHERTYPE = null;
  c.TFD = null;
  c.UMOUNT.NOFOLLOW = null;
  c.EFD = null;
  c.SCHED.OTHER = null;
  c.AT.EACCESS = null;
  c.SI.ASYNCNL = null;
  c.RLIMIT.OFILE = null;
  c.TFD_TIMER.ABSTIME = null;
  c.TFD_TIMER.CANCEL_ON_SET = null;
  c.AT.EMPTY_PATH = null;

  // renamed it seems, TODO sort out
  c.SYS.newfstatat, c.SYS.fstatat = c.SYS.fstatat, null;

  // also renamed/issues on arm TODO sort out
  if( abi.arch == "arm" ) {
    c.SYS.fadvise64_64 = null;
    c.SYS.sync_file_range = null;
  }

  if( abi.arch == "mips" ) {
     c.SYS._newselect, c.SYS.select = c.SYS.select, null; // now called _newselect
  }

  // new syscalls not in headers yet
  c.SYS.kcmp = null;
  c.SYS.finit_module = null;
  c.SYS.sched_setattr = null;
  c.SYS.sched_getattr = null;
  c.SYS.renameat2 = null;
  c.SYS.seccomp = null;
  c.SYS.getrandom = null;
  c.SYS.memfd_create = null;
  c.SYS.kexec_file_load = null;

  // new constants
  c.GRND = null;

  return c;
}

var nm = {
  E = "E",
  SIG = "SIG",
  EPOLL = "EPOLL",
  STD = "STD",
  MODE = "S_I",
  MSYNC = "MS_",
  W = "W",
  POLL = "POLL",
  S_I = "S_I",
  LFLAG = "",
  IFLAG = "",
  OFLAG = "",
  CFLAG = "",
  CC = "",
  IOCTL = "",
  B = "B",
  SYS = "__NR_",
  FCNTL_LOCK = "F_",
  PC = "_PC_",
  AT_FDCWD = "AT_",
  SIGACT = "SIG_",
  SIGPM = "SIG_",
  SIGILL = "ILL_",
  SIGFPR = "FPE_",
  SIGSEGV = "SEGV_",
  SIGBUS = "BUS_",
  SIGTRAP = "TRAP_",
  SIGCLD = "CLD_",
  SIGPOLL = "POLL_",
  SIGFPE = "FPE_",
  IN_INIT = "IN_",
  LINUX_CAPABILITY_VERSION = "_LINUX_CAPABILITY_VERSION_",
  LINUX_CAPABILITY_U32S = "_LINUX_CAPABILITY_U32S_",
  EPOLLCREATE = "EPOLL_",
  RLIM = "RLIM64_",
};

// not defined by kernel
print ([=[
#include <stdint.h>
#include <stdio.h>

typedef unsigned short int sa_family_t;

struct sockaddr {
  sa_family_t sa_family;
  char sa_data[14];
};
]=]);

print ([=[
#include <linux/types.h>
#include <linux/stddef.h>
#include <linux/unistd.h>
#include <linux/net.h>
#include <linux/socket.h>
#include <linux/poll.h>
#include <linux/eventpoll.h>
#include <linux/signal.h>
#include <linux/ip.h>
#include <linux/in.h>
#include <linux/in6.h>
#include <linux/capability.h>
#include <linux/reboot.h>
#include <linux/falloc.h>
#include <linux/mman.h>
#include <linux/veth.h>
#include <linux/sockios.h>
#include <linux/sched.h>
#include <linux/posix_types.h>
#include <linux/if.h>
#include <linux/if_bridge.h>
#include <linux/if_tun.h>
#include <linux/if_arp.h>
#include <linux/if_link.h>
#include <linux/netlink.h>
#include <linux/rtnetlink.h>
#include <linux/ioctl.h>
#include <linux/input.h>
#include <linux/uinput.h>
#include <linux/audit.h>
#include <linux/filter.h>
#include <linux/netfilter.h>
#include <linux/netfilter/x_tables.h>
#include <linux/netfilter_ipv4/ip_tables.h>
#include <linux/vhost.h>
#include <linux/neighbour.h>
#include <linux/prctl.h>
#include <linux/fcntl.h>
#include <linux/timex.h>
#include <linux/aio_abi.h>
#include <linux/fs.h>
#include <linux/wait.h>
#include <linux/resource.h>
#include <linux/termios.h>
#include <linux/xattr.h>
#include <linux/stat.h>
#include <linux/fadvise.h>
#include <linux/inotify.h>
#include <linux/route.h>
#include <linux/ipv6_route.h>
#include <linux/neighbour.h>
#include <linux/errno.h>
#include <linux/signalfd.h>
#include <linux/virtio_pci.h>
#include <linux/pci.h>
#include <linux/tcp.h>
#include <linux/vfio.h>
#include <linux/seccomp.h>

/* defined in attr/xattr.h */
#define ENOATTR ENODATA

int ret;

void sassert(int a, int b, char *n) {
  if (a != b) {
    printf("error with %s: %d (0x%x) != %d (0x%x)\n", n, a, a, b, b);
    ret = 1;
  }
}

void sassert_u64(uint64_t a, uint64_t b, char *n) {
  if (a != b) {
    printf("error with %s: %llu (0x%llx) != %llu (0x%llx)\n", n, (unsigned long long)a, (unsigned long long)a, (unsigned long long)b, (unsigned long long)b);
    ret = 1;
  }
}

int main(int argc, char **argv) {
]=]);

var ffi = require ("ffi");

var c = require ("syscall.linux.constants");

var nr = require("syscall.linux.nr");

c.SYS = nr.SYS; // add syscalls

c = fixup_constants(abi, c);

for( k, v in pairs(c) ) {
  if( type(v) == "number" ) {
    print("sassert(" .. k .. ", " .. v .. ', "' .. k .. '");');
  } else if( type(v) == "table" ) {
    for( k2, v2 in pairs(v) ) {
      var name = nm[k] || k .. "_";
      if( type(v2) != "function" ) {
        if( type(v2) == "cdata" && ffi.sizeof(v2) == 8 ) { // TODO avoid use of ffi if possible
         print("sassert_u64(" .. name .. k2 .. ", " .. tostring(v2)  .. ', "' .. name .. k2 .. '");');
        } else {
         print("sassert(" .. name .. k2 .. ", " .. tostring(v2)  .. ', "' .. name .. k2 .. '");');
        }
      }
    }
  }
}

print ([=[
return ret;
}
]=]);


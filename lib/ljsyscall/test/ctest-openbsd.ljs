// generate C test file to check ABI

package.path = "./?.ljs;";

//var abi = require ("syscall.abi");

var S = require ("syscall");

var abi = S.abi; //DADBUG redefinition
var types = S.types;
var t, ctypes, s = types.t, types.ctypes, types.s;
var c = S.c;
 
var ffi = require ("ffi");

var reflect = require ("include.ffi-reflect.reflect");

// internal only
c.errornames = null;

// fixups
c.STD = null;
c.EXIT = null;

// TODO this should be in system headers surely? (F_ULOCK, F_LOCK etc)

for( k, v in pairs(c.IOCTL) ) { if( type(v) == "table" ) { c.IOCTL[k] = v.number; } }

c.AF.DECnet = c.AF.DECNET;
c.AF.DECNET = null;

c.R_OK = c.OK.R;
c.W_OK = c.OK.W;
c.F_OK = c.OK.F;
c.X_OK = c.OK.X;
c.OK = null;

c.SIGACT = null; // TODO cast correctly instead, giving warning
c.CHFLAGS.NODUMP = null; // alias
c.CHFLAGS.IMMUTABLE = null; // alias
c.CHFLAGS.APPEND = null; // alias
c.CHFLAGS.OPAQUE = null; // alias

c.W.WCLONE  = null; // underscore in name, changed
c.W.WALL    = null; // underscore in name, changed
c.W.STOPPED = null; // underscore in name, changed

// these are Linux names TODO are there actually BSD names?
ctypes["struct ethhdr"] = null;
ctypes["struct iphdr"] = null;
ctypes["struct udphdr"] = null;

// not all syscalls always defined, some conditional, some very new

print ([=[
/* this code is generated by ctest-openbsd.lua */

#define _BSD_SOURCE

#include <stddef.h>
#include <stdio.h>

#include <sys/sched.h>
#include <sys/termios.h>
#include <sys/unistd.h>
#include <sys/dirent.h>
#include <sys/time.h>
#include <sys/poll.h>
#include <sys/signal.h>
#include <sys/fcntl.h>
#include <sys/errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/utsname.h>
#include <sys/resource.h>
#include <sys/un.h>
#include <sys/mman.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <sys/uio.h>
#include <sys/wait.h>
#include <sys/ioctl.h>
#include <sys/reboot.h>
#include <sys/syscall.h>
#include <sys/sysctl.h>
#include <sys/statvfs.h>
#include <sys/event.h>
#include <net/if.h>
#include <net/route.h>
#include <net/bpf.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netinet6/in6_var.h>
#include <netinet6/nd6.h>
#include <unistd.h>

int ret = 0;

void sassert(int a, int b, char *n) {
  if (a != b) {
    printf("error with %s: %d (0x%x) != %d (0x%x)\n", n, a, a, b, b);
    ret = 1;
  }
}

void sassert_u64(unsigned long long a, unsigned long long b, char *n) {
  if (a != b) {
    printf("error with %s: %llu (0x%llx) != %llu (0x%llx)\n", n, (unsigned long long)a, (unsigned long long)a, (unsigned long long)b, (unsigned long long)b);
    ret = 1;
  }
}

int main(int argc, char **argv) {
]=]);

var ignore_offsets = {
  sig = "true", // sigset_t renamed TODO rename back
};

// iterate over S.ctypes
for( k, v in pairs(ctypes) ) {
  print("sassert(sizeof(" .. k .. "), " .. ffi.sizeof(v) .. ', "' .. k .. '");');
  // check offset of struct fields
  var refct = reflect.typeof(v);
  if( refct.what == "struct" ) {
    for( r in refct->members() ) {
      var name = r.name;
      // bit hacky - TODO fix these issues
      if( ignore_offsets[name] ) { name = null; }
      if( name ) {
        print("sassert(offsetof(" .. k .. "," .. name .. "), " .. ffi.offsetof(v, name) .. ', " offset of ' .. name .. ' in ' .. k .. '");');
      }
    }
  }
}

// test all the constants

// renamed ones
var nm = {
  E = "E",
  SIG = "SIG",
  STD = "STD",
  MODE = "S_I",
  MSYNC = "MS_",
  W = "W",
  POLL = "POLL",
  S_I = "S_I",
  LFLAG = "",
  IFLAG = "",
  OFLAG = "",
  CFLAG = "",
  CC = "",
  IOCTL = "",
  B = "B",
  AT_FDCWD = "AT_",
  FCNTL_LOCK = "F_",
  LOCKF = "F_",
  SIGACT = "SIG_",
  UMOUNT = "MNT_",
  SIGPM = "SIG_",
  OPIPE = "O_",
  MSYNC = "MS_",
  CHFLAGS = "",
  PC = "_PC_",
  FSYNC = "",
  TCSA = "TCSA",
  TCFLUSH = "TC",
  TCFLOW = "TC",
  VFSMNT = "MNT_",
  BRDG = "BRDG",
};

for( k, v in pairs(c) ) {
  if( type(v) == "number" ) {
    print("sassert(" .. k .. ", " .. v .. ', "' .. k .. '");');
  } else if( type(v) == "table" ) {
    for( k2, v2 in pairs(v) ) {
      var name = nm[k] || k .. "_";
      if( type(v2) != "function" ) {
        if( type(v2) == "cdata" && ffi.sizeof(v2) == 8 ) {
         print("sassert_u64(" .. name .. k2 .. ", " .. tostring(v2)  .. ', "' .. name .. k2 .. '");');
        } else {
         print("sassert(" .. name .. k2 .. ", " .. tostring(tonumber(v2))  .. ', "' .. name .. k2 .. '");');
        }
      }
    }
  }
}

print ([=[
return ret;
}
]=]);


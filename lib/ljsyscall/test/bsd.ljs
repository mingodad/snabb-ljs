// General BSD tests

var function init(S) {

var helpers = require ("syscall.helpers");
var types = S.types;
var c = S.c;
var abi = S.abi;

var bit = require ("syscall.bit");
var ffi = require ("ffi");

var t, pt, s = types.t, types.pt, types.s;

var assert = helpers.assert;

var function fork_assert(cond, err, ...) { // if we have forked we need to fail in main thread not fork
  if( ! cond ) {
    print(tostring(err));
    print(debug.traceback());
    S.exit("failure");
  }
  if( cond == true ) { return ...; }
  return cond, ...;
}

var function assert_equal(...) {
  collectgarbage("collect"); // force gc, to test for bugs
  return assert_equals(...);
}

var teststring = "this is a test string";
var size = 512;
var buf = t.buffer(size);
var tmpfile = "XXXXYYYYZZZ4521" .. S.getpid();
var tmpfile2 = "./666666DDDDDFFFF" .. S.getpid();
var tmpfile3 = "MMMMMTTTTGGG" .. S.getpid();
var longfile = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" .. S.getpid();
var efile = "./tmpexXXYYY" .. S.getpid() .. ".sh";
var largeval = math.pow(2, 33); // larger than 2^32 for testing
var mqname = "ljsyscallXXYYZZ" .. S.getpid();

var clean = function() {
  S.rmdir(tmpfile);
  S.unlink(tmpfile);
  S.unlink(tmpfile2);
  S.unlink(tmpfile3);
  S.unlink(longfile);
  S.unlink(efile);
};

var test = {};

test.bsd_misc = {
  test_sysctl_all = function() {
    var all, err = S.sysctl();
    assert(all && type(all) == "table", "expect a table from all sysctls got " .. type(all));
  },
};

test.bsd_ids = {
  test_issetugid = function() {
    if( ! S.issetugid ) { error ("skipped"); }
    var res = assert(S.issetugid());
    assert(res == 0 || res == 1); // some tests call setuid so might be tainted
  },
};

test.filesystem_bsd = {
  test_revoke = function() {
    var fd = assert(S.posix_openpt("rdwr, noctty"));
    assert(fd->grantpt());
    assert(fd->unlockpt());
    var pts_name = assert(fd->ptsname());
    var pts = assert(S.open(pts_name, "rdwr, noctty"));
    assert(S.revoke(pts_name));
    var n, err = pts->read();
    if( n ) { // correct behaviour according to man page
      assert_equal(#n, 0); // read returns EOF after revoke
    } else { // FreeBSD is NXIO Filed http://www.freebsd.org/cgi/query-pr.cgi?pr=188952
         // OSX is EIO
      assert(! n && (err.IO || err.NXIO));
    }
    n, err = pts->write("test"); // write fails after revoke
    assert(! n && (err.IO || err.NXIO), "access should be revoked");
    assert(pts->close()); // close succeeds after revoke
    assert(fd->close());
  },
  test_chflags = function() {
    var fd = assert(S.creat(tmpfile, "RWXU"));
    assert(fd->write("append"));
    assert(S.chflags(tmpfile, "uf_append"));
    assert(fd->write("append"));
    assert(fd->seek(0, "set"));
    var n, err = fd->write("not append");
    if( ! (S.__rump || abi.xen) ) { assert(err && err.PERM, "non append write should fail"); } // TODO I think this is due to tmpfs mount??
    assert(S.chflags(tmpfile)); // clear flags
    assert(S.unlink(tmpfile));
    assert(fd->close());
  },
  test_lchflags = function() {
    if( ! S.lchflags ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "RWXU"));
    assert(fd->write("append"));
    assert(S.lchflags(tmpfile, "uf_append"));
    assert(fd->write("append"));
    assert(fd->seek(0, "set"));
    var n, err = fd->write("not append");
    if( ! (S.__rump || abi.xen) ) { assert(err && err.PERM, "non append write should fail"); } // TODO I think this is due to tmpfs mount??
    assert(S.lchflags(tmpfile)); // clear flags
    assert(S.unlink(tmpfile));
    assert(fd->close());
  },
  test_fchflags = function() {
    var fd = assert(S.creat(tmpfile, "RWXU"));
    assert(fd->write("append"));
    assert(fd->chflags("uf_append"));
    assert(fd->write("append"));
    assert(fd->seek(0, "set"));
    var n, err = fd->write("not append");
    if( ! (S.__rump || abi.xen) ) { assert(err && err.PERM, "non append write should fail"); } // TODO I think this is due to tmpfs mount??
    assert(fd->chflags()); // clear flags
    assert(S.unlink(tmpfile));
    assert(fd->close());
  },
  test_chflagsat = function() {
    if( ! S.chflagsat ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "RWXU"));
    assert(fd->write("append"));
    assert(S.chflagsat("fdcwd", tmpfile, "uf_append", "symlink_nofollow"));
    assert(fd->write("append"));
    assert(fd->seek(0, "set"));
    var n, err = fd->write("not append");
    assert(err && err.PERM, "non append write should fail");
    assert(S.chflagsat("fdcwd", tmpfile)); // clear flags
    assert(S.unlink(tmpfile));
    assert(fd->close());
  },
  test_lchmod = function() {
    if( ! S.lchmod ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "RWXU"));
    assert(S.lchmod(tmpfile, "RUSR, WUSR"));
    assert(S.access(tmpfile, "rw"));
    assert(S.unlink(tmpfile));
    assert(fd->close());
  },
  test_utimensat = function() {
    // BSD utimensat as same specification as Linux, but some functionality missing, so test simpler
    if( ! S.utimensat ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "RWXU"));
    var dfd = assert(S.open("."));
    assert(S.utimensat(null, tmpfile));
    var st1 = fd->stat();
    assert(S.utimensat("fdcwd", tmpfile, {"omit", "omit"}));
    var st2 = fd->stat();
    assert(st1.mtime == st2.mtime, "mtime unchanged"); // cannot test atime as stat touches it
    assert(S.unlink(tmpfile));
    assert(fd->close());
    assert(dfd->close());
  },
};

test.kqueue = {
  test_kqueue_vnode = function() {
    var kfd = assert(S.kqueue());
    var fd = assert(S.creat(tmpfile, "rwxu"));
    var kevs = t.kevents({{fd = fd, filter = "vnode",
      flags = "add, enable, clear", fflags = "delete, write, extend, attrib, link, rename, revoke"}});
    assert(kfd->kevent(kevs, null));
    var _, _, n = assert(kfd->kevent(null, kevs, 0));
    assert_equal(n, 0); // no events yet
    assert(S.unlink(tmpfile));
    var count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 1)) ) {
      assert(v.DELETE, "expect delete event");
      ++count    ;
    }
    assert_equal(count, 1);
    assert(fd->write("something"));
    count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 1)) ) {
      assert(v.WRITE, "expect write event");
      assert(v.EXTEND, "expect extend event");
    ++count    ;
    }
    assert_equal(count, 1);
    assert(fd->close());
    assert(kfd->close());
  },
  test_kqueue_read = function() {
    var kfd = assert(S.kqueue());
    var p1, p2 = assert(S.pipe());
    var kevs = t.kevents({{fd = p1, filter = "read", flags = "add"}});
    assert(kfd->kevent(kevs, null));
    var a, b, n = assert(kfd->kevent(null, kevs, 0));
    assert_equal(n, 0); // no events yet
    var str = "test";
    p2->write(str);
    var count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 0)) ) {
      assert_equal(v.size, #str); // size will be amount available to read
      ++count    ;
    }
    assert_equal(count, 1); // 1 event readable now
    var r, err = p1->read();
    var _;
    _, _, n = assert(kfd->kevent(null, kevs, 0));
    assert_equal(n, 0); // no events any more
    assert(p2->close());
    count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 0)) ) {
      assert(v.EOF, "expect EOF event");
      ++count    ;
    }
    assert_equal(count, 1);
    assert(p1->close());
    assert(kfd->close());
  },
  test_kqueue_write = function() {
    var kfd = assert(S.kqueue());
    var p1, p2 = assert(S.pipe());
    var kevs = t.kevents({{fd = p2, filter = "write", flags = "add"}});
    assert(kfd->kevent(kevs, null));
    var count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 0)) ) {
      assert(v.size > 0); // size will be amount free in buffer
      ++count    ;
    }
    assert_equal(count, 1); // one event
    assert(p1->close()); // close read end
    count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 0)) ) {
      assert(v.EOF, "expect EOF event");
      ++count    ;
    }
    assert_equal(count, 1);
    assert(p2->close());
    assert(kfd->close());
  },
  test_kqueue_timer = function() {
    var kfd = assert(S.kqueue());
    var kevs = t.kevents({{ident = 0, filter = "timer", flags = "add, oneshot", data = 10}});
    assert(kfd->kevent(kevs, null));
    var count = 0;
    for( k, v in assert(kfd->kevent(null, kevs)) ) {
      assert_equal(v.size, 1); // count of expiries is 1 as oneshot
      ++count    ;
    }
    assert_equal(count, 1); // will have expired by now
    assert(kfd->close());
  },
};

test.bsd_extattr = {
  teardown = clean,
  test_extattr_empty_fd = function() {
    if( ! S.extattr_get_fd ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "rwxu"));
    assert(S.unlink(tmpfile));
    var n, err = fd->extattr_get("user", "myattr", false); // false does raw call with no buffer to return length
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(! n && err.NOATTR);
    assert(fd->close());
  },
  test_extattr_getsetdel_fd = function() {
    if( ! S.extattr_get_fd ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "rwxu"));
    assert(S.unlink(tmpfile));
    var n, err = fd->extattr_get("user", "myattr", false); // false does raw call with no buffer to return length
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(! n && err.NOATTR);
    n, err = fd->extattr_set("user", "myattr", "myvalue");
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support setting extattr
    assert(n, err);
    assert_equal(n, #"myvalue");
    var str = assert(fd->extattr_get("user", "myattr"));
    assert_equal(str, "myvalue");
    var ok = assert(fd->extattr_delete("user", "myattr"));
    str, err = fd->extattr_get("user", "myattr");
    assert(! str && err.NOATTR);
    assert(fd->close());
  },
  test_extattr_getsetdel_file = function() {
    if( ! S.extattr_get_fd ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "rwxu"));
    assert(fd->close());
    var n, err = S.extattr_get_file(tmpfile, "user", "myattr", false); // false does raw call with no buffer to return length
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(! n && err.NOATTR);
    n, err = S.extattr_set_file(tmpfile, "user", "myattr", "myvalue");
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support setting extattr
    assert(n, err);
    assert_equal(n, #"myvalue");
    var str = assert(S.extattr_get_file(tmpfile, "user", "myattr"));
    assert_equal(str, "myvalue");
    var ok = assert(S.extattr_delete_file(tmpfile, "user", "myattr"));
    str, err = S.extattr_get_file(tmpfile, "user", "myattr");
    assert(! str && err.NOATTR);
    assert(S.unlink(tmpfile));
  },
  test_extattr_getsetdel_link = function() {
    if( ! S.extattr_get_fd ) { error ("skipped"); }
    assert(S.symlink(tmpfile2, tmpfile));
    var n, err = S.extattr_get_link(tmpfile, "user", "myattr", false); // false does raw call with no buffer to return length
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(! n && err.NOATTR);
    n, err = S.extattr_set_link(tmpfile, "user", "myattr", "myvalue");
    if( ! n && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support setting extattr
    assert(n, err);
    assert_equal(n, #"myvalue");
    var str = assert(S.extattr_get_link(tmpfile, "user", "myattr"));
    assert_equal(str, "myvalue");
    var ok = assert(S.extattr_delete_link(tmpfile, "user", "myattr"));
    str, err = S.extattr_get_link(tmpfile, "user", "myattr");
    assert(! str && err.NOATTR);
    assert(S.unlink(tmpfile));
  },
  test_extattr_list_fd = function() {
    if( ! S.extattr_list_fd ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "rwxu"));
    assert(S.unlink(tmpfile));
    var attrs, err = fd->extattr_list("user");
    if( ! attrs && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(attrs, err);
    assert_equal(#attrs, 0);
    assert(fd->extattr_set("user", "myattr", "myvalue"));
    attrs = assert(fd->extattr_list("user"));
    assert_equal(#attrs, 1);
    assert_equal(attrs[1], "myattr");
    assert(fd->extattr_set("user", "newattr", "newvalue"));
    attrs = assert(fd->extattr_list("user"));
    assert_equal(#attrs, 2);
    assert((attrs[1] == "myattr" && attrs[2] == "newattr") || (attrs[2] == "myattr" && attrs[1] == "newattr"));
    assert(fd->close());
  },
  test_extattr_list_file = function() {
    if( ! S.extattr_list_file ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "rwxu"));
    var attrs, err = S.extattr_list_file(tmpfile, "user");
    if( ! attrs && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(attrs, err);
    assert_equal(#attrs, 0);
    assert(S.extattr_set_file(tmpfile, "user", "myattr", "myvalue"));
    attrs = assert(S.extattr_list_file(tmpfile, "user"));
    assert_equal(#attrs, 1);
    assert_equal(attrs[1], "myattr");
    assert(S.extattr_set_file(tmpfile, "user", "newattr", "newvalue"));
    attrs = assert(S.extattr_list_file(tmpfile, "user"));
    assert_equal(#attrs, 2);
    assert((attrs[1] == "myattr" && attrs[2] == "newattr") || (attrs[2] == "myattr" && attrs[1] == "newattr"));
    assert(S.unlink(tmpfile));
  },
  test_extattr_list_link = function() {
    if( ! S.extattr_list_file ) { error ("skipped"); }
    assert(S.symlink(tmpfile2, tmpfile));
    var attrs, err = S.extattr_list_link(tmpfile, "user");
    if( ! attrs && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(attrs, err);
    assert_equal(#attrs, 0);
    assert(S.extattr_set_link(tmpfile, "user", "myattr", "myvalue"));
    attrs = assert(S.extattr_list_link(tmpfile, "user"));
    assert_equal(#attrs, 1);
    assert_equal(attrs[1], "myattr");
    assert(S.extattr_set_link(tmpfile, "user", "newattr", "newvalue"));
    attrs = assert(S.extattr_list_link(tmpfile, "user"));
    assert_equal(#attrs, 2);
    assert((attrs[1] == "myattr" && attrs[2] == "newattr") || (attrs[2] == "myattr" && attrs[1] == "newattr"));
    assert(S.unlink(tmpfile));
  },
  test_extattr_list_long = function() {
    if( ! S.extattr_list_fd ) { error ("skipped"); }
    var fd = assert(S.creat(tmpfile, "rwxu"));
    assert(S.unlink(tmpfile));
    var attrs, err = fd->extattr_list("user");
    if( ! attrs && err.OPNOTSUPP ) { error ("skipped"); } // fs does not support extattr
    assert(attrs, err);
    assert_equal(#attrs, 0);
    var count = 100;
    for( i = 1, count ) {
      assert(fd->extattr_set("user", "myattr" .. i, "myvalue"));
    }
    attrs = assert(fd->extattr_list("user"));
    assert_equal(#attrs, count);
    assert(fd->close());
  },
};

// skip as no processes in rump
if( ! S.__rump ) {
  test.kqueue.test_kqueue_proc = function() {
    var pid = assert(S.fork());
    if( pid == 0 ) { // child
      S.pause();
      S.exit();
    } else { // parent
      var kfd = assert(S.kqueue());
      var kevs = t.kevents({{ident = pid, filter = "proc", flags = "add", fflags = "exit, fork, exec"}});
      assert(kfd->kevent(kevs, null));
      assert(S.kill(pid, "term"));
      var count = 0;
      for( k, v in assert(kfd->kevent(null, kevs, 1)) ) {
        assert(v.EXIT);
        ++count    ;
      }
      assert_equal(count, 1);
      assert(kfd->close());
      assert(S.waitpid(pid));
    }
  };
  test.kqueue.test_kqueue_signal = function() {
    assert(S.signal("alrm", "ign"));
    var kfd = assert(S.kqueue());
    var kevs = t.kevents({{signal = "alrm", filter = "signal", flags = "add"}});
    assert(kfd->kevent(kevs, null));
    assert(S.kill(0, "alrm"));
    assert(S.kill(0, "alrm"));
    var count = 0;
    for( k, v in assert(kfd->kevent(null, kevs, 1)) ) {
      assert_equal(v.data, 2); // event happened twice
      ++count    ;
    }
    assert_equal(count, 1);
    assert(S.signal("alrm", "dfl"));
  };
}

return test;

}

return {init = init};


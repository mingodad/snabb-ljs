// OSX specific tests

var function init(S) {

var helpers = require ("syscall.helpers");
var types = S.types;
var c = S.c;
var abi = S.abi;

var bit = require ("syscall.bit");
var ffi = require ("ffi");

var t, pt, s = types.t, types.pt, types.s;

var assert = helpers.assert;

var function fork_assert(cond, err, ...) { // if we have forked we need to fail in main thread not fork
  if( ! cond ) {
    print(tostring(err));
    print(debug.traceback());
    S.exit("failure");
  }
  if( cond == true ) { return ...; }
  return cond, ...;
}

var function assert_equal(...) {
  collectgarbage("collect"); // force gc, to test for bugs
  return assert_equals(...);
}

var teststring = "this is a test string";
var size = 512;
var buf = t.buffer(size);
var tmpfile = "XXXXYYYYZZZ4521" .. S.getpid();
var tmpfile2 = "./666666DDDDDFFFF" .. S.getpid();
var tmpfile3 = "MMMMMTTTTGGG" .. S.getpid();
var longfile = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" .. S.getpid();
var efile = "./tmpexXXYYY" .. S.getpid() .. ".sh";
var largeval = math.pow(2, 33); // larger than 2^32 for testing
var mqname = "ljsyscallXXYYZZ" .. S.getpid();

var clean = function() {
  S.rmdir(tmpfile);
  S.unlink(tmpfile);
  S.unlink(tmpfile2);
  S.unlink(tmpfile3);
  S.unlink(longfile);
  S.unlink(efile);
};

var test = {};

test.time = {
  // example of how to emulate clock_gettime() https://gist.github.com/jbenet/1087739
  test_clock_get_time = function() {
    var clock = assert(S.host_get_clock_service(S.mach_host_self(), "CALENDAR"));
    var mts = assert(S.clock_get_time(clock));
    assert(S.mach_port_deallocate(null, clock)); // TODO this should be gc
  }
};

return test;

}

return {init = init};




// BSD specific tests

var function init(S) {

var helpers = require ("syscall.helpers");
var types = S.types;
var c = S.c;
var abi = S.abi;

var bit = require ("syscall.bit");
var ffi = require ("ffi");

var t, pt, s = types.t, types.pt, types.s;

var assert = helpers.assert;

var function fork_assert(cond, err, ...) { // if we have forked we need to fail in main thread not fork
  if( ! cond ) {
    print(tostring(err));
    print(debug.traceback());
    S.exit("failure");
  }
  if( cond == true ) { return ...; }
  return cond, ...;
}

var function assert_equal(...) {
  collectgarbage("collect"); // force gc, to test for bugs
  return assert_equals(...);
}

var teststring = "this is a test string";
var size = 512;
var buf = t.buffer(size);
var tmpfile = "XXXXYYYYZZZ4521" .. S.getpid();
var tmpfile2 = "./666666DDDDDFFFF" .. S.getpid();
var tmpfile3 = "MMMMMTTTTGGG" .. S.getpid();
var longfile = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" .. S.getpid();
var efile = "./tmpexXXYYY" .. S.getpid() .. ".sh";
var largeval = math.pow(2, 33); // larger than 2^32 for testing
var mqname = "ljsyscallXXYYZZ" .. S.getpid();

var clean = function() {
  S.rmdir(tmpfile);
  S.unlink(tmpfile);
  S.unlink(tmpfile2);
  S.unlink(tmpfile3);
  S.unlink(longfile);
  S.unlink(efile);
};

var test = {};

test.freebsd_unix_at = {
  teardown = clean,
  test_bindat = function() {
    if( ! S.bindat ) { error ("skipped"); }
    var s = assert(S.socket("unix", "stream"));
    var sa = t.sockaddr_un(tmpfile);
    assert(s->bindat("fdcwd", sa));
    assert(s->close());
    assert(S.unlink(tmpfile));
  },
  test_connectat = function() {
    if( ! S.connectat ) { error ("skipped"); }
    var s1 = assert(S.socket("unix", "stream"));
    var sa = t.sockaddr_un(tmpfile);
    assert(s1->bindat("fdcwd", sa));
    assert(s1->listen());
    var s2 = assert(S.socket("unix", "stream"));
    assert(s2->connectat("fdcwd", sa));
    assert(s1->close());
    assert(S.unlink(tmpfile));
  },
};

test.freebsd_shm = {
  test_shm_anon = function() {
    var fd = assert(S.shm_open(c.SHM.ANON, "rdwr, creat"));
    assert(fd->truncate(4096));
    assert(fd->close());
  },
};

test.freebsd_procdesc = {
  test_procdesc = function() {
    if( ! S.pdfork ) { error ("skipped"); }
    var pid, err, pfd = S.pdfork();
    if( ! pid && err.NOSYS ) { error ("skipped"); } // seems to fail on freebsd9
    assert(pid, err);
    if( pid == 0 ) { // child
      S.pause();
      S.exit();
    } else { // parent
      assert_equal(assert(pfd->pdgetpid()), pid);
      assert(pfd->pdkill("term"));
      var pev = t.pollfds({{fd = pfd, events = "hup"}}); // HUP is process termination
      var p = assert(S.poll(pev, -1));
      assert_equal(p, 1);
      pfd->close();
    }
  },
};

// this is available as a patch for Linux, so these tests could be ported
test.capsicum = {
  test_cap_sandboxed_not = function() {
    if( ! S.cap_sandboxed ) { error ("skipped"); }
    assert(! S.cap_sandboxed());
  },
  test_cap_enter = function() {
    if( ! S.cap_sandboxed ) { error ("skipped"); }
    assert(! S.cap_sandboxed());
    var pid = assert(S.fork());
    if( pid == 0 ) { // child
      fork_assert(S.cap_enter());
      fork_assert(S.cap_sandboxed());
      var ok, err = S.open("/dev/null", "rdwr"); // all filesystem access should be disallowed
      fork_assert(! ok && err.CAPMODE);
      S.exit(23);
    } else { // parent
      var rpid, status = assert(S.waitpid(pid));
      assert(status.WIFEXITED, "process should have exited normally");
      assert(status.EXITSTATUS == 23, "exit should be 23");
    }
    assert(! S.cap_sandboxed());
  },
};

return test;

}

return {init = init};


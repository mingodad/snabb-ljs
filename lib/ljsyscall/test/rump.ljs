// rump specific tests
// in particular testing the threading, as that is rather different; you can map them to host threads how you like

var function init(S) {

var helpers = require ("syscall.helpers");
var types = S.types;
var c = S.c;
var abi = S.abi;
var util = S.util;

var bit = require ("syscall.bit");
var ffi = require ("ffi");

var t, pt, s = types.t, types.pt, types.s;

var function assert(cond, err, ...) {
  collectgarbage("collect"); // force gc, to test for bugs
  if( cond == null ) { error(tostring(err)); } // annoyingly, assert does not call tostring!
  if( type(cond) == "function" ) { return cond, err, ...; }
  if( cond == true ) { return ...; }
  return cond, ...;
}

var function assert_equal(...) {
  collectgarbage("collect"); // force gc, to test for bugs
  return assert_equals(...);
}

var test = {};

test.rump_threads = {
  test_create_thread = function() {
    var origlwp = assert(S.rump.curlwp()); // we do not run tests in implicit context, so should not fail
    assert(S.rump.newlwp(S.getpid()));
    var lwp1 = assert(S.rump.curlwp(), "should get a pointer back");
    S.rump.releaselwp();
    S.rump.switchlwp(origlwp);
  },
  test_switch_threads = function() {
    var origlwp = assert(S.rump.curlwp()); // we do not run tests in implicit context, so should not fail
    var pid = S.getpid();
    assert(S.rump.newlwp(pid));
    var lwp1 = assert(S.rump.curlwp(), "should get a pointer back");
    assert(S.rump.newlwp(pid));
    var lwp2 = assert(S.rump.curlwp(), "should get a pointer back");
    S.rump.switchlwp(lwp1);
    S.rump.switchlwp(lwp2);
    S.rump.switchlwp(lwp1);
    S.rump.releaselwp();
    lwp1 = null;
    S.rump.switchlwp(lwp2);
    S.rump.releaselwp();
    lwp2 = null;
    S.rump.switchlwp(origlwp);
  },
  test_rfork = function() {
    var pid1 = S.getpid();
    var origlwp = assert(S.rump.curlwp()); // we do not run tests in implicit context, so should not fail
    var fd = assert(S.open("/dev/zero", "rdonly"));
    assert(fd->read()); // readable
    assert(S.rump.rfork("CFDG")); // no shared fds
    var pid2 = S.getpid();
    assert(pid1 != pid2, "should have new pid");
    var n, err = fd->read(); // should not be able to read this fd
    assert(! n && err, "should not be able to access an fd");
    S.rump.releaselwp(); // exit this process
    S.rump.switchlwp(origlwp);
    assert_equal(pid1, S.getpid());
    assert(fd->read()); // should be able to read /dev/zero now
  },
};

return test;

}

return {init = init};


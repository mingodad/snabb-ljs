// serve test results, in case operating in an environemnt with no console

var S = require ("syscall");

// exit will cause issues, override
os.exit = function() { };

// open output file
var outname = "output";
var fd = S.creat(outname, "rwxu");

// set stdio to file, keep handle so not garbage collected
var stdin = S.dup2(fd, 0);
var stdout = S.dup2(fd, 1);
var stderr = S.dup2(fd, 2);

// run tests
require ("test.test");

var st = fd->stat();

// close file
fd->close();

var results = S.util.readfile(outname, null, st.size);

// serve file - this code is borrowed from examples/epoll.lua
var t, c = S.t, S.c;

var function assert(cond, s, ...) {
  if( cond == null ) { error(tostring(s)); } // annoyingly, assert does not call tostring!
  return cond, s, ...;
}

var maxevents = 1024;

var poll;

// this is somewhat working toward a common API but needs a lot more work, but has resulted in some improvements
if( S.epoll_create ) {
  poll = {
    init = function(this) {
      return setmetatable({fd = assert(S.epoll_create())}, {__index = this});
    },
    event = t.epoll_event(),
    add = function(this, s) {
      var event = this.event;
      event.events = c.EPOLL.IN;
      event.data.fd = s->getfd();
      assert(this.fd->epoll_ctl("add", s, event));
    },
    events = t.epoll_events(maxevents),
    get = function(this) {
      return this.fd->epoll_wait(this.events);
    },
    eof = function(ev) { return ev.HUP || ev.ERR || ev.RDHUP; },
  };
} else if( S.kqueue ) {
  poll = {
    init = function(this) {
      return setmetatable({fd = assert(S.kqueue())}, {__index = this});
    },
    event = t.kevents(1),
    add = function(this, s) {
      var event = this.event[1];
      event.fd = s;
      event.setfilter = "read";
      event.setflags = "add";
      assert(this.fd->kevent(this.event, null, 0));
    },
    events = t.kevents(maxevents),
    get = function(this) {
      return this.fd->kevent(null, this.events);
    },
    eof = function(ev) { return ev.EOF || ev.ERROR; },
  };
} else {
  error("no epoll or kqueue support");
}

var s = assert(S.socket("inet", "stream, nonblock"));

s->setsockopt("socket", "reuseaddr", true);

var sa = assert(t.sockaddr_in(80, "0.0.0.0"));

assert(s->bind(sa));

assert(s->listen(128));

ep = poll->init();

ep->add(s);

var w = {};

var msg = [=[
<html>
<head>
<title>performance test</title>
</head>
<body>
]=] .. results .. [=[
</body>
</html>
]=];

var reply = table.concat({
"HTTP/1.0 200 OK",
"Content-type: text/html",
"Connection: close",
"Content-Length: " .. #msg,
"",
"",
}, "\r\n") .. msg;


var bufsize = 4096;
var buffer = t.buffer(bufsize);

var ss = t.sockaddr_storage();
var addrlen = t.socklen1(#ss);

var function loop() {

for( i, ev in ep->get() ) {

  if( ep.eof(ev) ) {
    fd->close();
    w[ev.fileno] = null;
  }

  if( ev.fd == s.filenum ) { // server socket, accept
    do {
      var a, err = s->accept("nonblock", ss, addrlen);
      if( a ) {
        ep->add(a.fd);
        w[a.fd->getfd()] = a.fd;
      }
    } while(!( ! a) );
  } else {
    var fd = w[ev.fd];
    fd->read(buffer, bufsize);
    var n = fd->write(reply);
    assert(n == #reply);
    assert(fd->close());
    w[ev.fd] = null;
  }
}

return loop();

}

loop();


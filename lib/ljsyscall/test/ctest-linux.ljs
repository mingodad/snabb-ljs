// generate C test file to check type sizes etc
// Linux specific as there are a lot of workarounds
// luajit ctest.lua > ctest.c && cc -std=c99 ctest.c -o ctest && ./ctest

// TODO we are replacing this with new tests against clean kernel headers, test/linux-constants.lua is first part
// however testing against both still useful, could be errors in clean set - headers are a mess.

var S = require ("syscall");

var abi = S.abi;
var types = S.types;
var t, ctypes, s = types.t, types.ctypes, types.s;
var c = S.c;

var nr = require("syscall.linux.nr");

c.SYS = nr.SYS; // add syscalls

var ffi = require ("ffi");

var reflect = require ("include.ffi-reflect.reflect");

// TODO fix these, various naming issues
ctypes["struct linux_dirent64"] = null;
ctypes["struct fdb_entry"] = null;
ctypes["sighandler_t"] = null;
ctypes["struct rlimit64"] = null;
ctypes["struct mq_attr"] = null;
ctypes["int errno"] = null;
ctypes["struct user_cap_header"] = null;
ctypes["struct user_cap_data"] = null;
ctypes["struct sched_param"] = null; // libc truncates unused parts
ctypes["struct cpu_set_t"] = null; // not actually a struct
ctypes["dev_t"] = null; // use kernel value not glibc
ctypes["struct seccomp_data"] = null; // not in ppc setup, remove for now
ctypes["sigset_t"] = null; // use kernel value not glibc
ctypes["ucontext_t"] = null; // as we use kernel sigset_t, ucontext differs too
ctypes["struct {dev_t dev;}"] = null; // not a real type
ctypes["struct mmsghdr"] = null; // not on Travis

if( abi.abi32 ) {
  ctypes["struct stat64"], ctypes["struct stat"] = ctypes["struct stat"], null;
}

// we do not use the ino_t and blkcnt_t types, they are really 64 bit
if( abi.abi32 ) {
  ctypes.ino_t = null;
  ctypes.blkcnt_t = null;
}

// internal only
ctypes["struct capabilities"] = null;
ctypes["struct cap"] = null;

// TODO seems to be an issue with sockaddr_storage (alignment difference?) on Musl, needs fixing
ctypes["struct sockaddr_storage"] = null;
// TODO seems to be a size issue on Musl, have asked list
ctypes["struct sysinfo"] = null;

// size issue on Musl, incomplete type on glibc
ctypes["struct siginfo"] = null;

// both glibc and Musl mess around with kernel sizes, larger so ok.
ctypes["struct termios"] = null;

// not defined by glibc
ctypes["struct k_sigaction"] = null;

if( abi.arch == "arm" ) { ctypes["struct statfs64"] = null; } // padding difference, not that important

for( k, v in pairs(c.IOCTL) ) { if( type(v) == "table" ) { c.IOCTL[k] = v.number; } }

// internal use
c.syscall = null;
c.OMQATTR = null;
c.errornames = null;

// fake constants
c.MS.RO = null;
c.MS.RW = null;
c.MS.SECLABEL = null;
c.IFF.ALL = null;
c.IFF.NONE = null;
c.W.ALL = null;

// umount is odd
c.MNT = {};
c.MNT.FORCE = c.UMOUNT.FORCE;
c.MNT.DETACH = c.UMOUNT.DETACH;
c.MNT.EXPIRE = c.UMOUNT.EXPIRE;
c.UMOUNT.FORCE = null;
c.UMOUNT.DETACH = null;
c.UMOUNT.EXPIRE = null;

// renamed constants
c.O.NONBLOCK = c.OPIPE.NONBLOCK;
c.O.CLOEXEC = c.OPIPE.CLOEXEC;
c.OPIPE = null;

// we renamed these for namespacing reasons
for( k, v in pairs(c.IFREQ) ) { c.IFF[k] = v; }
c.IFREQ = null;

// TODO find the headers/flags for these if exist, or remove
c.SA.RESTORER = null;
c.AF.DECNET = null;
c.SIG.HOLD = null;
c.NOTHREAD = null;
c.RTF.PREFIX_RT = null;
c.RTF.EXPIRES = null;
c.RTF.ROUTEINFO = null;
c.RTF.ANYCAST = null;
c.W.CLONE = null;
c.W.NOTHREAD = null;
c.SCHED.OTHER = null; // NORMAL in kernel

// only in Linux headers that conflict
c.IP.NODEFRAG = null;
c.IP.UNICAST_IF = null;

// not on travis CI box
c.ETH_P["802_EX1"] = null;

// not included in user headers
c.RUSAGE.BOTH = null;

// fix these, renamed tables, signals etc
c.SIGTRAP = null;
c.SIGPM = null;
c.SIGILL = null;
c.SIGPOLL = null;
c.SIGCLD = null;
c.SIGFPE = null;
c.SIGSEGV = null;
c.SIGBUS = null;
c.SIGACT = null;

c.SECCOMP_MODE = null;
c.LOCKF = null;
c.SIOC = null;
c.TIOC = null;
c.IFLA_VF_INFO = null;
c.IFLA_VF_PORT = null;
c.TCFLOW = null;
c.TCSA = null;
c.TCFLUSH = null;
c.SECCOMP_RET = null;
c.IN_INIT = null;
c.PR_MCE_KILL_OPT = null;
c.OK = null;
c.EPOLLCREATE = null;
c.STD = null;
c.PORT_PROFILE_RESPONSE = null;
c.AT_FDCWD = null;
c.SYS.fstatat = null;
c.TFD_TIMER = null;
c.MFD = null;

// this lot are not in uClibc at present
c.ADJ.OFFSET_SS_READ = null;
c.ADJ.NANO = null;
c.ADJ.MICRO = null;
c.ADJ.TAI = null;
c.F.GETPIPE_SZ = null;
c.F.GETOWN_EX = null;
c.F.SETOWN_EX = null;
c.F.SETPIPE_SZ = null;
c.AF.RDS = null;
c.MS.MOVE = null;
c.MS.PRIVATE = null;
c.MS.ACTIVE = null;
c.MS.POSIXACL = null;
c.MS.RELATIME = null;
c.MS.NOUSER = null;
c.MS.SLAVE = null;
c.MS.I_VERSION = null;
c.MS.KERNMOUNT = null;
c.MS.SHARED = null;
c.MS.STRICTATIME = null;
c.MS.UNBINDABLE = null;
c.MS.DIRSYNC = null;
c.MS.SILENT = null;
c.MS.REC = null;
c.RLIMIT.RTTIME = null;
c.UMOUNT.NOFOLLOW = null;
c.STA.MODE = null;
c.STA.CLK = null;
c.STA.NANO = null;
c.CLOCK.MONOTONIC_COARSE = null;
c.CLOCK.REALTIME_COARSE = null;
c.CLOCK.MONOTONIC_RAW = null;
c.SOCK.DCCP = null;

// missing on my ARM box
c.CAP = null;
c.AF.NFC = null;
c.PR.SET_PTRACER = null;
c.MAP["32BIT"] = null;
c.SYS.sync_file_range = null;
c.AT.EMPTY_PATH = null;

// now missing on mips, not sure why
c.IFF.MACVLAN_PORT = null;
c.IFF.TX_SKB_SHARING = null;
c.IFF.XMIT_DST_RELEASE = null;
c.IFF.DISABLE_NETPOLL = null;
c.IFF.UNICAST_FLT = null;
c.IFF.OVS_DATAPATH = null;
c.IFF.SLAVE_NEEDARP = null;
c.IFF.ISATAP = null;
c.IFF.MASTER_ARPMON = null;
c.IFF.WAN_HDLC = null;
c.IFF.DONT_BRIDGE = null;
c.IFF.BRIDGE_PORT = null;

// missing on Travis
c.TCP.THIN_DUPACK = null;
c.TCP.FASTOPEN = null;
c.TCP.REPAIR_OPTIONS = null;
c.TCP.THIN_LINEAR_TIMEOUTS = null;
c.TCP.REPAIR = null;
c.TCP.QUEUE_SEQ = null;
c.TCP.TIMESTAMP = null;
c.TCP.USER_TIMEOUT = null;
c.TCP.REPAIR_QUEUE = null;

// these are not in Musl at present TODO send patches to get them in
c.IPPROTO.UDPLITE = null;
c.IPPROTO.DCCP = null;
c.IPPROTO.SCTP = null;
c.CIBAUD = null;
c.F.GETLEASE = null;
c.F.SETLK64 = null;
c.F.NOTIFY = null;
c.F.SETLEASE = null;
c.F.GETLK64 = null;
c.F.SETLKW64 = null;
c.AF.LLC = null;
c.AF.TIPC = null;
c.AF.CAN = null;
c.MSG.TRYHARD = null;
c.MSG.SYN = null;
c.PR_TASK_PERF_EVENTS = null;
c.PR.MCE_KILL = null;
c.PR.MCE_KILL_GET = null;
c.PR.TASK_PERF_EVENTS_ENABLE = null;
c.PR.TASK_PERF_EVENTS_DISABLE = null;
c.PR_ENDIAN.LITTLE = null;
c.PR_ENDIAN.BIG = null;
c.PR_ENDIAN.PPC_LITTLE = null;
c.SIG.IOT = null;
c.SIG.CLD = null;
c.__MAX_BAUD = null;
c.O.FSYNC = null;
c.RLIMIT.OFILE = null;
c.SO.SNDBUFFORCE = null;
c.SO.RCVBUFFORCE = null;
c.POLL.REMOVE = null;
c.POLL.RDHUP = null;
c.PR_MCE_KILL.SET = null;
c.PR_MCE_KILL.CLEAR = null;
c.EXTA = null;
c.EXTB = null;
c.XCASE = null;
c.IUTF8 = null;
c.CMSPAR = null;
c.IN.EXCL_UNLINK = null;
c.MNT.EXPIRE = null;
c.MNT.DETACH = null;
c.SYS.fadvise64_64 = null;

// travis missing tun tap stuff etc
c.IFF.MULTI_QUEUE = null;
c.IFF.ATTACH_QUEUE = null;
c.IFF.DETACH_QUEUE = null;
c.IOCTL.TUNSETQUEUE = null;
c.TUN.TAP_MQ = null;
c.SO.PEEK_OFF = null;
c.SO.GET_FILTER = null;
c.SO.NOFCS = null;
c.SO.WIFI_STATUS = null;

// Musl changes some of the syscall constants in its 32/64 bit handling
c.SYS.getdents = null;

// Musl ors O.ACCMODE with O_SEARCH TODO why?
c.O.ACCMODE = null;

if( abi.abi64 ) { c.O.LARGEFILE = null; }

// not included on ppc?
c.IOCTL.TCSETS2 = null;
c.IOCTL.TCGETS2 = null;
c.IOCTL.TCSETX = null;
c.IOCTL.TCSETXW = null;
c.IOCTL.TCSETSW2 = null;
c.IOCTL.TCSETXF = null;
c.IOCTL.TCGETX = null;
c.IOCTL.TCSETSF2 = null;

// not on Travis CI
c.PR.GET_TID_ADDRESS = null;
c.NDTPA.QUEUE_LENBYTES = null;
c.NTF.SELF = null;
c.NTF.MASTER = null;
// no vfio on Travis CI
c.IOCTL.VFIO_GET_API_VERSION = null;
c.IOCTL.VFIO_CHECK_EXTENSION = null;

// missing on my ppc box/older kernels
c.PR.GET_NO_NEW_PRIVS = null;
c.PR.SET_NO_NEW_PRIVS = null;
c.IP.MULTICAST_ALL = null;
c.EM.TI_C6000 = null;

// ppc glibc has wrong value, fixed in new constant test
c.CBAUDEX = null;

// missing on my mips box
c.AUDIT_ARCH.H8300 = null;

// defined only in linux/termios.h which we cannot include on mips
c.TIOCM.OUT1 = null;
c.TIOCM.OUT2 = null;
c.TIOCM.LOOP = null;

// glibc lies about what structure is used on ppc for termios TODO check all these ioctls
if( abi.arch == "ppc" ) {
  ctypes["struct termios"] = null;
  c.IOCTL.TCSETS = null;
  c.IOCTL.TCGETS = null;
  c.IOCTL.TCSETSF = null;
  c.IOCTL.TCSETSW = null;
}

// new syscalls not in headers yet
c.SYS.kcmp = null;
c.SYS.finit_module = null;
c.SYS.sched_setattr = null;
c.SYS.sched_getattr = null;
c.SYS.renameat2 = null;
c.SYS.seccomp = null;
c.SYS.getrandom = null;
c.SYS.memfd_create = null;
c.SYS.kexec_file_load = null;

// constants for new syscalls
c.GRND = null;

if( abi.arch == "mips" ) {
  c.RLIM.INFINITY = null; // incorrect in all but very recent glibc
}

c.IPV6.FLOWINFO = null;

// renames
c.LINUX_CAPABILITY_VERSION = c._LINUX_CAPABILITY_VERSION;
c.LINUX_CAPABILITY_U32S = c._LINUX_CAPABILITY_U32S;

// include kitchen sink, garbage can etc
print ([=[
/* this code is generated by ctest-linux.lua */

#define _GNU_SOURCE
#define __USE_GNU
#define _FILE_OFFSET_BITS 64
#define _LARGE_FILES 1
#define __USE_FILE_OFFSET64

#include <stddef.h>
#include <stdint.h>

/* there is inconsistent usage of __LITTLE_ENDIAN so if endian.h included before this it fails! */
#include <linux/aio_abi.h>

#include <stdio.h>
#include <limits.h>
#include <errno.h>
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/udp.h>
#include <arpa/inet.h>
#include <sys/epoll.h>
#include <sys/utsname.h>
#include <time.h>
#include <sys/resource.h>
#include <sys/sysinfo.h>
#include <sys/time.h>
#include <sys/un.h>
#include <netinet/ip.h>
#include <poll.h>
#include <sys/signalfd.h>
#include <sys/vfs.h>
#include <sys/timex.h>
#include <sys/mman.h>
#include <sched.h>
#include <sys/xattr.h>
#include <termios.h>
#include <unistd.h>
#include <sys/prctl.h>
#include <sys/mount.h>
#include <sys/uio.h>
#include <net/route.h>
#include <sys/inotify.h>
#include <sys/wait.h>
#include <dirent.h>
#include <sys/eventfd.h>
#include <sys/syscall.h>
#include <sys/ioctl.h>
#include <elf.h>
#include <net/ethernet.h>
#include <sys/swap.h>
#include <netinet/tcp.h>
#include <sys/timerfd.h>

#include <linux/capability.h>
#include <linux/reboot.h>
#include <linux/falloc.h>
#include <linux/mman.h>
#include <linux/veth.h>
#include <linux/sockios.h>
#include <linux/if_arp.h>
#include <linux/sched.h>
#include <linux/posix_types.h>
#include <linux/if.h>
#include <linux/if_bridge.h>
#include <linux/rtnetlink.h>
#include <linux/ioctl.h>
#include <linux/input.h>
#include <linux/uinput.h>
#include <linux/audit.h>
#include <linux/filter.h>
/*#include <linux/seccomp.h>*/
#include <linux/netfilter.h>
#include <linux/netfilter/x_tables.h>
#include <linux/netfilter_ipv4/ip_tables.h>
#include <linux/if_tun.h>
#include <linux/vhost.h>
#include <linux/neighbour.h>
#include <linux/pci.h>
//#include <linux/vfio.h>
#include <linux/virtio_pci.h>

/* not always defined */
#define ENOATTR ENODATA

int ret = 0;

/* not defined anywhere useful */
struct termios2 {
        tcflag_t c_iflag;
        tcflag_t c_oflag;
        tcflag_t c_cflag;
        tcflag_t c_lflag;
        cc_t c_line;
        cc_t c_cc[19];  /* note not using NCCS as redefined! */
        speed_t c_ispeed;
        speed_t c_ospeed;
};

void sassert(int a, int b, char *n) {
  if (a != b) {
    printf("error with %s: %d (0x%x) != %d (0x%x)\n", n, a, a, b, b);
    ret = 1;
  }
}

void sassert_u64(uint64_t a, uint64_t b, char *n) {
  if (a != b) {
    printf("error with %s: %llu (0x%llx) != %llu (0x%llx)\n", n, (unsigned long long)a, (unsigned long long)a, (unsigned long long)b, (unsigned long long)b);
    ret = 1;
  }
}

int main(int argc, char **argv) {
]=]);

// TODO fix
var ignore_offsets = {
  st_atime_nsec = true, // stat
  st_ctime_nsec = true, // stat
  st_mtime_nsec = true, // stat
  val = true, // sigset_t, I think renamed
  ihl = true, // bitfield
  version = true, // bitfield
};

// iterate over S.ctypes
for( k, v in pairs(ctypes) ) {
  // check size
  print("sassert(sizeof(" .. k .. "), " .. ffi.sizeof(v) .. ', "' .. k .. '");');
  // check offset of struct fields
  var refct = reflect.typeof(v);
  if( refct.what == "struct" ) {
    for( r in refct->members() ) {
      var name = r.name;
      // bit hacky - TODO fix these issues
      if( ! name || ignore_offsets[name] || name->sub(1,2) == "__" ) { name = null; }
      if( name ) {
        print("sassert(offsetof(" .. k .. "," .. name .. "), " .. ffi.offsetof(v, name) .. ', " offset of ' .. name .. ' in ' .. k .. '");');
      }
    }
  }
}

// test all the constants

// renamed ones
var nm = {
  E = "E",
  SIG = "SIG",
  EPOLL = "EPOLL",
  STD = "STD",
  MODE = "S_I",
  MSYNC = "MS_",
  W = "W",
  POLL = "POLL",
  S_I = "S_I",
  LFLAG = "",
  IFLAG = "",
  OFLAG = "",
  CFLAG = "",
  CC = "",
  IOCTL = "",
  B = "B",
  SYS = "__NR_",
  FCNTL_LOCK = "F_",
  PC = "_PC_",
};

for( k, v in pairs(c) ) {
  if( type(v) == "number" ) {
    print("sassert(" .. k .. ", " .. v .. ', "' .. k .. '");');
  } else if( type(v) == "table" ) {
    for( k2, v2 in pairs(v) ) {
      var name = nm[k] || k .. "_";
      if( type(v2) != "function" ) {
        if( type(v2) == "cdata" && ffi.sizeof(v2) == 8 ) {
         print("sassert_u64(" .. name .. k2 .. ", " .. tostring(v2)  .. ', "' .. name .. k2 .. '");');
        } else {
         print("sassert(" .. name .. k2 .. ", " .. tostring(v2)  .. ', "' .. name .. k2 .. '");');
        }
      }
    }
  }
}

// TODO test error codes

print ([=[
return ret;
}
]=]);


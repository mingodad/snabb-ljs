// Work in progress - not complete or tested yet

// script to run init.ljs in a container for testing

// creates a container and runs init in it, innit.

// pushes an interface into the container, but only with local routing, not bridged or mac-vlan'd for now

// run as root

var oldassert = assert;
var function assert(c, s) {
  return oldassert(c, tostring(s));
}

var S = require ("syscall");
var nl = require ("syscall.nl");
var util = require ("syscall.util");

var root = arg[1] || "root";

var init = util.mapfile("init.ljs");
var luajit = util.mapfile("luajit/luajit");
var libc = util.mapfile("luajit/libc.so");
var libgcc = util.mapfile("luajit/libgcc_s.so");

if( S.stat(root) ) {
  assert(util.rm(root));
}
assert(S.mkdir(root, "rwxu"));

assert(S.mkdir(root .. "/dev", "rwxu"));
assert(S.mkdir(root .. "/dev/pts", "rwxu"));
assert(S.mkdir(root .. "/sbin", "rwxu"));
assert(S.mkdir(root .. "/proc", "rwxu"));
assert(S.mkdir(root .. "/bin", "rwxu"));
assert(S.mkdir(root .. "/root", "rwxu"));
assert(S.mkdir(root .. "/tmp", "rwxu"));
assert(S.mkdir(root .. "/etc", "rwxu"));
assert(S.mkdir(root .. "/sys", "rwxu"));
assert(S.mkdir(root .. "/lib", "rwxu"));
assert(S.mkdir(root .. "/lib/syscall", "rwxu"));
assert(S.mkdir(root .. "/lib/syscall/x64", "rwxu"));

// should just read rockspec!
assert(util.cp("init.ljs", root .. "/sbin/init", "rwxu"));
assert(util.cp("luajit/luajit", root .. "/bin/luajit", "rwxu"));
assert(util.cp("luajit/libc.so", root .. "/lib/libc.so", "rwxu"));
assert(util.cp("luajit/libgcc_s.so", root .. "/lib/libgcc_s.so", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall.ljs", root .. "/lib/syscall.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/headers.ljs", root .. "/lib/syscall/headers.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/types.ljs", root .. "/lib/syscall/types.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/constants.ljs", root .. "/lib/syscall/constants.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/helpers.ljs", root .. "/lib/syscall/helpers.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/ioctl.ljs", root .. "/lib/syscall/ioctl.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/nl.ljs", root .. "/lib/syscall/nl.ljs", "rwxu"));
assert(util.cp("/usr/local/share/lua/5.1/syscall/x64/constants.ljs", root .. "/lib/syscall/x64/constants.ljs", "rwxu"));

assert(S.symlink("/lib/libc.so", root .. "/lib/ld-musl-x86_64.so.1"));

assert(S.chdir(root));

// should use random names. Also should gc the veth to cleanup. For now just delete it on entry as this is a demo.
nl.dellink(0, "ifname", "veth0");
assert(nl.create_interface({name = "veth0", type = "veth", peer = {name = "veth1"}}));
var i = nl.interfaces();
assert(i.veth0->up());
assert(i.veth0->address("10.3.0.1/24"));

var p = assert(S.clone("newnet,newipc,newns,newpid,newuts"));

if( p !=0 ) { // parent
  var xi = nl.interfaces();
  assert(xi.veth1->move_ns(p));

  assert(S.waitpid(-1, "clone"));
} else { // child

  // wait for interface to appear
  var sock = assert(nl.socket("route", {groups = "link"}));
  var xi = nl.interfaces();
  if( ! xi.veth1 ) {
    var m = assert(nl.read(sock));
    assert(m.veth1);
  }
  sock->close();
  xi->refresh();
  // rename it to eth0
  xi.veth1->rename("eth0");

  // set up file system
  // use chroot for now, change to pivot_root later
  assert(S.chroot("."));

/*
-- something like this for pivot_root
      fork_assert(S.mount(tmpfile3, tmpfile3, "none", "bind")) -- to make sure on different mount point
      fork_assert(S.mount(tmpfile3, tmpfile3, nil, "private"))
      fork_assert(S.chdir(tmpfile3))
      fork_assert(S.mkdir("old"))
      fork_assert(S.pivot_root(".", "old"))
      fork_assert(S.chdir("/"))
*/

  var chardevices = {
    "null" = {1, 3},
    zero = {1, 5},
    random = {1, 8},
    urandom = {1, 9},
  };

  for( k, v in pairs(chardevices) ) { 
    assert(S.mknod("/dev/" .. k, "fchr,rusr,wusr", S.t.device(v[1], v[2])));
  }

  // call init
  assert(S.execve("/sbin/init", {"init"}, {}));
  S.exit("failure");
}

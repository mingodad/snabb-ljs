// example of event ioctls

var S = require ("syscall");

var EV = S.c.EV;
var MSC = S.c.MSC;
var KEY = S.c.KEY;

var kl = {};
for( k, v in pairs(KEY) ) { kl[v] = k; }

var oldassert = assert;
var function assert(cond, s) {
  collectgarbage("collect"); // force gc, to test for bugs
  return oldassert(cond, tostring(s)); // annoyingly, assert does not call tostring!
}

var function ev(dev) {
  if( ! dev ) { dev = "/dev/input/event0"; }
  var fd = assert(S.open(dev, "rdonly"));

  var version = assert(S.ioctl(fd, "EVIOCGVERSION"));

  print(string.format("evdev driver version: %d.%d.%d",
    bit.rshift(version, 16), 
    bit.band(bit.rshift(version, 8), 0xff),
    bit.band(version, 0xff)));

  var ev = S.t.input_event();
  while( true ) {
    assert(fd->read(ev));

    if( ev.type == EV.MSC ) {
      if( ev.code == MSC.SCAN ) {
        print("MSC_SCAN: ", string.format("0x%x", ev.value));
      } else {
        print("MSC: ", ev.code, ev.value);
      }
    } else if( ev.type == EV.KEY ) {
      if( ev.value == 1 ) { print("down", kl[ev.code], ev.code);
      } else if( ev.value == 0 ) { print("up", kl[ev.code], ev.code);
      } else if( ev.value == 2 ) { print("repeat", kl[ev.code], ev.code);
      }
    } else {
      //print("EVENT TYPE: ", ev.type, "CODE:", ev.code, "VALUE: ", string.format("0x%x", ev.value));
    }
  }
}



ev(arg[1]);


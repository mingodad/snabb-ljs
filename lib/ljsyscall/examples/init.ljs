#!/bin/ljsjit

// basic init process
// note we do not catch all errors as we cannot do much about them

// note that stdin, stderr should be attached to /dev/console

package.path = "/lib/?.ljs;?";

var S = require ("syscall");
var nl = require ("syscall.nl");

var function fatal(s) {
  print(s);
  os.exit();
}

function try(f, ...) {
  var ok, err = f(...); // could use pcall
  if( ok ) { return ok; }
  print("init: error at line " .. debug.getinfo(2, "l").currentline .. ": " .. tostring(err));
}

if( ! S ) { fatal("cannot find syscall library"); }

// mounts

try(S.mount, "sysfs", "/sys", "sysfs", "rw,nosuid,nodev,noexec,relatime");
try(S.mount, "proc", "/proc", "proc", "rw,nosuid,nodev,noexec,relatime");
try(S.mount, "devpts", "/dev/pts", "devpts", "rw,nosuid,noexec,relatime");

// interfaces

var i = nl.interfaces();
var lo, eth0 = i.lo, i.eth0;

lo->up();

eth0->up();

eth0->address("10.3.0.2/24");

// hostname

S.sethostname("ljs");

// print something
i = nl.interfaces();
print(i);

// run processes


// reap zombies

while( true ) {
  var w, err = S.waitpid(-1, "all");
  if( ! w && err.ECHILD ) { break; } // no more children
}

// childless

print("last child exited");

S.pause(); // for testing, normally exit



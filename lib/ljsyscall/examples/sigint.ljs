// example of a complex signal handler, in this case produce a Lua backtrace on sigpipe

var S = require ("syscall");
var t = S.t;
var c = S.c;
var ffi = require ("ffi");
 
var ip;
if( ffi.arch == "x86" ) { ip = c.REG.EIP;
} else if( ffi.arch == "x64" ) { ip = c.REG.RIP;
} else { error ("unsupported architecture"); }

var backtrace = function() { error("sigpipe"); };
 
var f = t.sa_sigaction(function(s, info, ucontext) {
  ucontext.uc_mcontext.gregs[ip] = ffi.cast("intptr_t", ffi.cast("void (*)(void)", backtrace)); // set instruction pointer to g
});
assert(S.sigaction("pipe", {sigaction = f}));
 
// example code to get interesting stack trace
function bb(x) {
  assert(S.kill(S.getpid(), "pipe"));
  return x + 1;
}
 
function aa(x) {
  var c = 2 * bb(x + 1);
  print("not here");
  return c;
}
 
aa(2);


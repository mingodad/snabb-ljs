#!/usr/bin/env ljsjit
// -*- lua -*-
package.path = package.path .. ';../src/?.ljs';

var pf = require('pf');
var ffi = require('ffi');
var savefile = require('pf.savefile');

ffi.cdef([=[
struct DIR *opendir(const char *name);
typedef unsigned long ino_t;
struct dirent {
    ino_t          d_ino;       /* inode number */
    off_t          d_off;       /* not an offset; see NOTES */
    unsigned short d_reclen;    /* length of this record */
    unsigned char  d_type;      /* type of file; not supported
                                   by all filesystem types */
    char           d_name[256]; /* filename */
};
struct dirent *readdir(struct DIR *dirp);
]=]);

function scandir(dirname) {
   if( type(dirname) != 'string' ) { error("dirname not a string:", dirname); }
   var dir = ffi.C.opendir(dirname);
   if( dir == null ) { error("directory not found: "..dirname); }
   var entries = {};
   var dirent = ffi.C.readdir(dir);
   while( dirent != null ) {
      table.insert(entries, ffi.string(dirent.d_name));
      dirent = ffi.C.readdir(dir);
   }
   return entries;
}

function read_expectations(file) {
   var tests = {};
   for( line in io.lines(file) ) {
      var description, count, filter =
         line->match("^%s*([^:]+)%s*:%s*(%d+)%s*:%s*(.*)%s*$");
      assert(filter, "failed to parse line "..line);
      var test = {
         description=description,
         count=assert(tonumber(count)),
         filter=filter,
      };
      table.insert(tests, test);
   }
   return tests;
}

function run_tests(pcap, tests) {
   var function write(...) {
      for( _,str in ipairs({...}) ) { io.write(str); }
      io.flush();
   }
   write('Running tests on ', pcap, ':\n');
   var packets = savefile.load_packets(pcap);
   for( _,test in ipairs(tests) ) {
      var preds = { lua = pf.compile_filter(test.filter),
                      asm = pf.compile_filter(test.filter, { native = true }) };
      for( name, pred in pairs(preds) ) {
         write(name, ':');
         write('  ', test.description, ': ');
         var count = 0;
         for( _, packet in ipairs(packets) ) {
            if( pred(packet.packet, packet.len) ) {
               ++count    ;
            }
         }
         write(count, ' matches: ');
         if( count == test.count ) {
            write('PASS\n');
         } else {
            write('FAIL: expected ', test.count, ' matches.\n');
            os.exit(1);
         }
      }
   }
   write('All pass.\n\n');
}

function main(dir) {
   var entries = scandir(dir);
   for( _,x in ipairs(entries) ) {
      var file = dir..'/'..x;
      if( file->match("%.pcap%.test") ) {
         var pcap = file->match('^(.*%.pcap)%.test$');
         run_tests(pcap, read_expectations(file));
      }
   }
}

main(...);

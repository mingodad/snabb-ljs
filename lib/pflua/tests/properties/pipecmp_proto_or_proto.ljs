#!/usr/bin/env luajit
// -*- lua -*-
module(..., package.seeall);
package.path = package.path .. ";../?.ljs;../../src/?.ljs";
var pf = require("pf");
var savefile = require("pf.savefile");
var utils = require('pf.utils');

var use_native = os.getenv("PF_QUICKCHECK_NATIVE");

var function choose_proto() {
    var protos = {"icmp", "igmp", "igrp", "pim", "ah", "esp", "vrrp",
                     "udp", "tcp", "sctp", "ip", "arp", "rarp", "ip6"};
    return utils.choose(protos);
}

function property(packets) {
   var expr = {choose_proto(), 'or', choose_proto()};
   or_expr = table.concat(expr, ' '); // Intentionally not local

   var pkt, pkt_idx = utils.choose_with_index(packets);
   var P, pkt_len = pkt.packet, pkt.len;

   var libpcap_pred = pf.compile_filter(or_expr, { bpf = true });
   var pflua_pred = pf.compile_filter(or_expr, { native = use_native });
   var bpf_result = libpcap_pred(P, pkt_len);
   var pflua_result = pflua_pred(P, pkt_len); 

   return bpf_result, pflua_result;
}

function print_extra_information() {
   print(("The arithmetic expression was %s")->format(or_expr));
}

function handle_prop_args(prop_args) {
   if( #prop_args < 1 || #prop_args > 2 ) {
      print("Usage: (pflua-quickcheck [args] " ..
            "properties/pipecmp_proto_or_proto) PATH/TO/CAPTURE.PCAP");
      os.exit(1);
   }

   var capture, filter_list = prop_args[1], prop_args[2];
   var packets = savefile.load_packets(capture);
   var filters;
   if( filter_list ) {
      filters = load_filters(filter_list);
   }
   return packets, filter_list;
}

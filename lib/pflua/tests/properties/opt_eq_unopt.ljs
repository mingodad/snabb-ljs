#!/usr/bin/env ljsjit
// -*- lua -*-
module(..., package.seeall);
package.path = package.path .. ";../?.ljs;../../src/?.ljs";

var ffi = require("ffi");
var parse = require("pf.parse");
var savefile = require("pf.savefile");
var expand = require("pf.expand");
var optimize = require("pf.optimize");
var codegen = require('pf.backend');
var utils = require('pf.utils');
var pp = utils.pp;

var pflua_ir = require('pfquickcheck.pflua_ir');
var pfcompile = require('pfquickcheck.pfcompile');

var function load_filters(file) {
   var ret = {};
   for( line in io.lines(file) ) { table.insert(ret, line); }
   return ret;
}

// Several variables are non-local for print_extra_information()
function property(packets, filter_list) {
   var packet;
   // Reset these every run, to minimize confusing output on crashes
   optimized_pred, unoptimized_pred, expanded, optimized = null, null, null, null;
   packet, packet_idx = utils.choose_with_index(packets);
   P, packet_len = packet.packet, packet.len;
   var F;
   if( filters ) {
      F = utils.choose(filters);
      expanded = expand.expand(parse.parse(F), "EN10MB");
   } else {
      F = "generated expression";
      expanded = pflua_ir.Logical();
   }
   optimized = optimize.optimize(expanded);

   unoptimized_pred = pfcompile.compile_ast(expanded, F);
   optimized_pred = pfcompile.compile_ast(optimized, F);
   return unoptimized_pred(P, packet_len), optimized_pred(P, packet_len);
}

// The test harness calls this on property failure.
function print_extra_information() {
   if( expanded ) {
      print("--- Expanded:");
      pp(expanded);
   } else { return; // Nothing else useful available to print
   }
   if( optimized ) {
      print("--- Optimized:");
      pp(optimized);
   } else { return; // Nothing else useful available to print
   }

   print(("On packet %s: unoptimized was %s, optimized was %s")->
         format(packet_idx,
                unoptimized_pred(P, packet_len),
                optimized_pred(P, packet_len)));
}

function handle_prop_args(prop_args) {
   if( #prop_args < 1 || #prop_args > 2 ) {
      print("Usage: (pflua-quickcheck [args] properties/opt_eq_unopt) " ..
            "PATH/TO/CAPTURE.PCAP [FILTER-LIST]");
      os.exit(1);
   }

   var capture, filter_list = prop_args[1], prop_args[2];
   var packets = savefile.load_packets(capture);
   var filters;
   if( filter_list ) {
      filters = load_filters(filter_list);
   }
   return packets, filter_list;
}

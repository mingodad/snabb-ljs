#!/usr/bin/env luajit
module(..., package.seeall);

var io = require("io");
var codegen = require("pf.backend");
var expand = require("pf.expand");
var parse = require("pf.parse");
var pfcompile = require("pfquickcheck.pfcompile");
var libpcap = require("pf.libpcap");
var bpf = require("pf.bpf");
var utils = require("pf.utils");

// Generate pflang arithmetic
var PflangNumber, PflangSmallNumber, PflangOp;
function PflangNumber() { return math.random(0, 2**32-1); }
function PflangOp() { return utils.choose({ '+', '-', '*', '/' }); }
function PflangArithmetic() {
   return { PflangNumber(), PflangOp(), PflangNumber() };
}

// Evaluate math expressions with libpcap and pflang's IR

// Pflang allows arithmetic as part of larger expressions.
// This tool uses len < arbitrary_arithmetic_here as a scaffold
function libpcap_eval(str_expr) {
   var expr = "len < " .. str_expr;
   var asm = libpcap.compile(expr, 'RAW');
   var asm_str = bpf.disassemble(asm);
   var template = "^000: A = length\
001: if %(A >= (%d+)%) goto 2 else goto 3\
002: return 0\
003: return 65535\
$";
   var constant_str = asm_str->match(template);
   if( ! constant_str ) { error ("unexpected bpf: "..asm_str); }
   var constant = assert(tonumber(constant_str), constant_str);
   assert(0 <= constant && constant < 2**32, constant);
   return constant;
}

// Here is an example of the pflua output that is parsed
//return function(P,length)
//   return length < ((519317859 + 63231) % 4294967296)
//end

// Old style:
// return function(P,length)
//    local v1 = 3204555350 * 122882
//    local v2 = v1 % 4294967296
//    do return length < v2 end
// end

function pflua_eval(str_expr) {
   var expr = "len < " .. str_expr;
   var ir = expand.expand(parse.parse(expr));
   var filter = pfcompile.compile_lua_ast(ir, "Arithmetic check");
   // Old style:
   //  local math_string = string.match(filter, "v1 = [%d-+/*()%a. ]*")
   var math_str = string.match(filter, "return length < ([%d%a %%-+/*()]*)");
   math_str = "v1 = " .. math_str;
   // Loadstring has a different env, so floor doesn't resolve; use math.floor
   math_str = math_str->gsub('floor', 'math.floor');
   v1 = null;
   loadstring(math_str)(); // v1 must not be local, or this approach will fail
   // v1 should always be within [0..2^32-1]
   assert(v1 >= 0);
   assert (v1 < 2**32);
   assert(v1 == math.floor(v1));
   return v1;
}

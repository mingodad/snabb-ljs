#!/usr/bin/env luajit
// -*- lua -*-
// This module generates (a subset of) pflua's IR,
// for property-based tests of pflua internals.

module(..., package.seeall);
var choose = require("pf.utils").choose;

var True, False, Fail, ComparisonOp, BinaryOp, Number, Len;
var Binary, Arithmetic, Comparison, Conditional;
// Logical intentionally is not local; it is used elsewhere

function True() { return { 'true' }; }
function False() { return { 'false' }; }
function Fail() { return { 'fail' }; }
function ComparisonOp() { return choose({ '<', '>' }); }
function BinaryOp() { return choose({ '+', '-', '/' }); }
// Boundary numbers are often particularly interesting; test them often
function Number() {
   if( math.random() < 0.2
      ) { return math.random(0, 2**32 - 1);
   } else {
      return choose({ 0, 1, 2**31-1, 2**31, 2**32-1 });
   }
}
function Len() { return 'len'; }
function Binary(db) {
   var op, lhs, rhs = BinaryOp(), Arithmetic(db), Arithmetic(db);
   if( op == '/' ) { table.insert(db, { '!=', rhs, 0 }); }
   return { 'uint32', { op, lhs, rhs } };
}
function PacketAccess(db) {
   var pkt_access_size = choose({1, 2, 4});
   var position = Arithmetic(db);
   table.insert(db, {'>=', 'len', {'+', position, pkt_access_size}});
   var access = { '[]', position, pkt_access_size };
   if( pkt_access_size == 1 ) { return access; }
   if( pkt_access_size == 2 ) { return { 'ntohs', access }; }
   if( pkt_access_size == 4 ) { return { 'uint32', { 'ntohs', access } }; }
   error('unreachable');
}
function Arithmetic(db) {
   return choose({ Binary, Number, Len, PacketAccess })(db);
}
function Comparison() {
   var asserts = {};
   var expr = { ComparisonOp(), Arithmetic(asserts), Arithmetic(asserts) };
   for( i=#asserts,1,-1 ) {
      expr = { 'if', asserts[i], expr, { 'fail' } };
   }
   return expr;
}
function Conditional() { return { 'if', Logical(), Logical(), Logical() }; }
function Logical() {
   return choose({ Conditional, Comparison, True, False, Fail })();
}

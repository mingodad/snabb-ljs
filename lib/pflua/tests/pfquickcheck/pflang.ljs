#!/usr/bin/env ljsjit
// -*- lua -*-
// This module generates (a subset of) pflang, libpcap's filter language

// Convention: initial uppercase letter => generates pflang expression
// initial lowercase letter => aux helper

// Mutability discipline:
// Any function may mutate results it calls into being.
// No function may mutate its arguments; it must copy,
// mutate the copy, and return instead.

module(..., package.seeall);
var choose = require("pf.utils").choose;
var utils = require("pf.utils");

var verbose = os.getenv("PF_VERBOSE_PFLANG");

var function Empty() { return { "" }; }

var function uint8() { return math.random(0, 2**8-1); }

var function uint16() { return math.random(0, 2**16-1); }

var function tohex(n) { return string.format("%x", n); }

var function hexByte() { return tohex(math.random(0, 0xff)); }

var function hexWord() { return tohex(math.random(0, 0xffff)); }

// Boundary numbers are often particularly interesting; test them often
var function uint32() {
   if( math.random() < 0.2
      ) { return math.random(0, 2**32 - 1);
   } else {
      return choose({ 0, 1, 2**31-1, 2**31, 2**32-1 });
   }
}

// Given something like { 'host', '127.0.0.1' }, make it sometimes
// start with src or dst. This should only be called on expressions
// which can start with src or dst!
var function optionally_add_src_or_dst(expr) {
   var r = math.random();
   var e = utils.dup(expr);
   if( r < 1/3 ) { table.insert(e, 1, "src");
   } else if( r < 2/3 ) { table.insert(e, 1, "dst");
   } // else: leave it unchanged
   return e;
}

var function andSymbol() {
   var r = math.random();
   if( r < 1/2 ) { return "&&"; } else { return "and"; }
}

var function orSymbol() {
   var r = math.random();
   if( r < 1/2 ) { return "||"; } else { return "or"; }
}

var function notSymbol() {
   var r = math.random();
   if( r < 1/2 ) { return "!"; } else { return "not"; }
}

var function optionally_not(expr) {
   var r = math.random();
   var e = utils.dup(expr);
   if( r < 1/2 ) {
      table.insert(e, 1, notSymbol()); }
   return e;
}

var function IPProtocol() {
   return choose({"icmp", "igmp", "igrp", "pim", "ah", "esp", "vrrp",
                   "udp", "tcp", "sctp", "icmp6", "ip", "arp", "rarp", "ip6"});
}

var function ProtocolName() {
   return { IPProtocol() };
}

// TODO: add names?
var function portNumber() {
   return math.random(1, 2**16 - 1);
}

var function Port() {
   return { "port", portNumber() };
}

var function PortRange() {
   var port1, port2 = portNumber(), portNumber();
   return { "portrange", port1 .. '-' .. port2 };
}

var function ProtocolWithPort() {
   protocol = choose({ "tcp", "udp" });
   return { protocol, "port", portNumber() };
}

// TODO: generate other styles of ipv4 address
var function ipv4Addr() {
   return table.concat({ uint8(), uint8(), uint8(), uint8() }, '.');
}

var function ipv4Netmask() { return math.random(0, 32); }

// This function is overly conservative with zeroing octets.
// TODO: zero more precisely?
var function ipv4Netspec() {
   var r = math.random();
   var o1, o2, o3, o4 = uint8(), uint8(), uint8(), uint8();

   // a bare number like '12' is interpreted as 12.0.0.0/8
   if( r < 0.05 ) { return tostring(o1);
   } else if( r < 0.10 ) { return table.concat({o1, o2}, '.');
   } else if( r < 0.15 ) { return table.concat({o1, o2, o3}, '.');
   } else { // return a normal ipv4 netmask
      var mask = ipv4Netmask();
      if( mask < 32 ) { o4 = 0; }
      if( mask < 24 ) { o3 = 0; }
      if( mask < 16 ) { o2 = 0; }
      if( mask < 8 ) { o1 = 0; }
      var addr = table.concat({ o1, o2, o3, o4 }, '.');
      return addr .. '/' .. mask;
   }
}

var function abbreviate_ipv6(addrt) {
   addrt = utils.dup(addrt);
   var startgap = math.random(2, 7);
   var gapbytes = math.random(1, 8 - startgap);
   while( gapbytes > 0 ) {
      table.remove(addrt, startgap);
      --gapbytes    ;
   }
   table.insert(addrt, startgap, '');
   return addrt;
}

var function ipv6Chunks() {
   var o1, o2, o3, o4 = hexWord(), hexWord(), hexWord(), hexWord();
   var o5, o6, o7, o8 = hexWord(), hexWord(), hexWord(), hexWord();
   return {o1, o2, o3, o4, o5, o6, o7, o8};
}

// Sometimes, use abbreviated :: form addresses.
var function ipv6Addr() {
   var r = math.random();
   var addrt = ipv6Chunks();
   if( r > 0.9 ) { addrt = abbreviate_ipv6(addrt); }
   return table.concat(addrt, ':');
}

var function ipv6Netspec() {
   var r = math.random();
   var maskbytes = math.random(1, 8);
   var maskbits = maskbytes * 16;
   var addrt = ipv6Chunks();
   while( maskbytes <= 8 ) {
      addrt[maskbytes] = 0;
      ++maskbytes    ;
   }
   if( r > 0.9 ) { addrt = abbreviate_ipv6(addrt); }
   return table.concat(addrt, ':') .. '/' .. maskbits;
}

var function ipAddr() {
   var r = math.random();
   if( r < 0.5 ) { return ipv6Addr();
   } else { return ipv4Addr();
   }
}

// A bare IP address is a valid netmask too, in this context.
var function ipv4Net() {
   var r = math.random();
   if( r < 0.9 ) { return ipv4Netspec();
   } else { return ipv4Addr();
   }
}

var function ipv6Net() {
   var r = math.random();
   if( r < 0.9 ) { return ipv6Netspec();
   } else { return ipv6Addr();
   }
}

var function ipNet() {
   var r = math.random();
   if( r < 0.5 ) { return ipv4Net();
   } else { return ipv6Net();
   }
}

// TODO: generate ipv6 addresses
var function Host() {
   return optionally_add_src_or_dst({ 'host', ipAddr() });
}

var function Net() {
   return optionally_add_src_or_dst({ 'net', ipNet() });
}

// ^ intentionally omitted; 'len < 1 ^ 1' is not valid pflang
// in older versions of libpcap
var function binaryMathOp() {
   return choose({ '+', '-', '/', '*', '|', '&' });
}

var function shiftOp() { return choose({ '<<', '>>' }); }

var function comparisonOp() {
   return choose({ '<', '>', '<=', ">=", '=', '!=', '==' });
}

// Generate simple math expressions.
// Don't recurse, to limit complexity; more complex math tests are elsewhere.
var function binMath(numberGen) {
   // create numbers with the given function, or uint32 by default
   if( ! numberGen ) { numberGen = uint32; }
   var r, n1, n2, b = math.random();
   if( r < 0.2 ) {
      n1, n2, b = numberGen(), math.random(0, 31), shiftOp();
   } else {
      n1, n2, b = numberGen(), numberGen(), binaryMathOp();
      // Don't divide by 0; that's tested elsewhere
      if( b == '/' ) { while( n2 == 0 ) { n2 = numberGen(); } }
   }
   return n1, n2, b;
}

// Filters like 1+1=2 are legitimate pflang, as long as the result is right
var function Math() {
   var n1, n2, b = binMath();
   var result;
   if( b == '*' ) {
      result = n1 * 1LL * n2; // force non-floating point
      result = tonumber(result % 2**32); // Yes, this is necessary
   } else if( b == '/' ) { result = math.floor(n1 / n2);
   } else if( b == '-' ) { result = n1 - n2;
   } else if( b == '+' ) { result = n1 + n2;
   } else if( b == '|' ) { result = bit.bor(n1, n2);
   } else if( b == '&' ) { result = bit.band(n1, n2);
   } else if( b == '>>' ) { result = bit.rshift(n1, n2);
   } else if( b == '<<' ) { result = bit.lshift(n1, n2);
   } else { error("Unhandled math operator " .. b); }
   result = result % 2**32; // doing this twice for * is fine
   return { n1, b, n2, '=', result };
}

// Generate uint16s instead of uint32s to avoid triggering
// libpcap bug 434.
var function LenWithMath() {
   var r = math.random();
   var comparison = comparisonOp();
   if( r < 0.1 ) {
      return { 'len', comparison, uint16() };
   } else {
      var n1, n2, b = binMath(uint16);
      return { 'len', comparison, n1, b, n2 };
   }
}

// TODO: use uint32 and ipv6 jumbo packets at some point?
var function packetAccessLocation() {
   var r1, r2 = math.random(), math.random();
   var base;
   // Usually generate small accesses - more likely to be in range
   if( r1 < 0.9 ) {
      base = uint8();
   } else {
      base = uint16();
   }
   if( r2 < 0.5 ) {
      return tostring(base);
   } else {
      // tcpdump only allows the following 3 numbers of bytes
      var bytes = choose({1,2,4});
      return base .. ':' .. bytes;
   }
}

var function PacketAccess() {
   var proto = ProtocolName()[1];
   // Avoid packet access on protocols where libpcap doesn't allow it
   // libpcap does not allow 'ah' and 'esp' packet access; not a pflua bug.
   // libpcap does not allow icmp6[x]:
   // "IPv6 upper-layer protocol is not supported by proto[x]"
   var skip_protos = utils.set('ah', 'esp', 'icmp6');
   while( skip_protos[proto] ) {
      proto = ProtocolName()[1];
   }
   var access = packetAccessLocation();
   // Hack around libpcap bug 430
   // libpcap's match status depends on optimization levels if the access
   // is out of bounds.
   // Use len + 54 as a conservative bounds check; it gives room for
   // an ethernet header and an ipv6 fixed-length header. It's not ideal.
   var header_guard = 54; // ethernet + ipv6; most others are smaller
   var access_loc = access->match("^%d+");
   var guard = table.concat({'len >= ', access_loc, '+', header_guard}, ' ');
   var comparison = table.concat({comparisonOp(), uint8()}, ' ');
   var pkt_access = table.concat({proto, '[', access, '] '});
   return {'(', guard, 'and', pkt_access, comparisonOp(), uint8(), ')'};
}

var function etherAddr() {
   var e1, e2, e3 = hexByte(), hexByte(), hexByte();
   var e4, e5, e6 = hexByte(), hexByte(), hexByte();
   return table.concat({e1, e2, e3, e4, e5, e6}, ':');
}

var function Ether() {
   var qual = choose({'host', 'src', 'dst'});
   var addr = etherAddr();
   return {'ether', qual, addr};
}

var function PflangClause() {
   return choose({ProtocolName, Port, PortRange, ProtocolWithPort,
                  Host, Net, Math, LenWithMath, PacketAccess, Ether})();
}

// Add logical operators (or/not)
function PflangLogical() {
   var function PflangLogicalRec(depth, expr) {
      var r = math.random();
      if( depth <= 0 ) { return expr; }

      if( r < 0.9 ) {
         var pclause2 = PflangClause();
         var logicOp = orSymbol();
         if( r < 0.45 ) { logicOp = andSymbol(); }

         table.insert(expr, logicOp);
         for( _,v in ipairs(pclause2) ) { table.insert(expr, v); }
         return PflangLogicalRec(depth - 1, optionally_not(expr));
      } else {
         return PflangLogicalRec(depth - 1, optionally_not(expr));
      }
   }

   return PflangLogicalRec(math.random(1, 5), PflangClause());
}

function Pflang() {
   var r = math.random();
   if( r < 0.001 ) { return Empty(); }
   var expr = choose({ PflangClause, PflangLogical })();
   if( verbose ) { print(table.concat(expr, ' ')); }
   return expr;
}

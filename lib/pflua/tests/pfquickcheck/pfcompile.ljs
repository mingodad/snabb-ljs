#!/usr/bin/env ljsjit
module(..., package.seeall);

var backend = require("pf.backend");
var codegen = require("pf.codegen");

var use_native = os.getenv("PF_QUICKCHECK_NATIVE");

var function ast_to_ssa(ast) {
   var convert_anf = require('pf.anf').convert_anf;
   var convert_ssa = require('pf.ssa').convert_ssa;
   return convert_ssa(convert_anf(ast));
}

// Compile_lua_ast and compile_ast are a stable API for tests
// The idea is to have various compile_* helpers that take a particular
// stage of IR and compile accordingly, even as pflua internals change.
function compile_lua_ast(ast) {
   // Note: there isn't really a good result to return here for the
   //       native version since the asm doesn't really map to arithmetic
   //       expressions (see pflang_math.lua)
   return backend.emit_lua(ast_to_ssa(ast));
}

function compile_ast(ast, name) {
   if( ! use_native ) {
      return backend.emit_and_load(ast_to_ssa(ast, name));
   } else {
      return codegen.load(ast_to_ssa(ast, name));
   }
}

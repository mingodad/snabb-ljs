module("pf",package.seeall);

var savefile = require("pf.savefile");
var types = require("pf.types");
var libpcap = require("pf.libpcap");
var bpf = require("pf.bpf");
var parse = require('pf.parse');
var expand = require('pf.expand');
var optimize = require('pf.optimize');
var anf = require('pf.anf');
var ssa = require('pf.ssa');
var backend = require('pf.backend');
var codegen = require('pf.codegen');
var utils = require('pf.utils');

// TODO: rename the 'libpcap' option to reduce terminology overload
var compile_defaults = {
   optimize=true, libpcap=false, bpf=false, source=false, native=false
};
function compile_filter(filter_str, opts) {
   opts = utils.parse_opts(opts || {}, compile_defaults);
   var dlt = opts.dlt || "EN10MB";
   if( opts.libpcap ) {
      var bytecode = libpcap.compile(filter_str, dlt, opts.optimize);
      if( opts.source ) { return bpf.disassemble(bytecode); }
      var header = types.pcap_pkthdr(0, 0, 0, 0);
      return function(P, len) {
         header.incl_len = len;
         header.orig_len = len;
         return libpcap.offline_filter(bytecode, header, P) != 0;
      };
   } else if( opts.bpf ) {
      var bytecode = libpcap.compile(filter_str, dlt, opts.optimize);
      if( opts.source ) { return bpf.compile_lua(bytecode); }
      return bpf.compile(bytecode);
   } else { // pflua (to lua or native)
      var expr = parse.parse(filter_str);
      expr = expand.expand(expr, dlt);
      if( opts.optimize ) { expr = optimize.optimize(expr); }
      expr = anf.convert_anf(expr);
      expr = ssa.convert_ssa(expr);
      if( opts.native ) {
         return codegen.load(expr, opts.source || false);
      } else if( opts.source ) {
         return backend.emit_lua(expr);
      } else {
         return backend.emit_and_load(expr, filter_str);
      }
   }
}

function selftest () {
   print("selftest: pf");
   
   var function test_null(str) {
      var f1 = compile_filter(str, { libpcap = true });
      var f2 = compile_filter(str, { bpf = true });
      var f3 = compile_filter(str, {});
      assert(f1(str, 0) == false, "null packet should be rejected (libpcap)");
      assert(f2(str, 0) == false, "null packet should be rejected (bpf)");
      assert(f3(str, 0) == false, "null packet should be rejected (pflua)");
   }
   test_null("icmp");
   test_null("tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)");

   var function assert_count(filter, packets, expected) {
      function count_matched(pred) {
         var matched = 0;
         for( i=1,#packets ) {
            if( pred(packets[i].packet, packets[i].len) ) {
               ++matched    ;
            }
         }
         return matched;
      }

      var f1 = compile_filter(filter, { libpcap = true });
      var f2 = compile_filter(filter, { bpf = true });
      var f3 = compile_filter(filter, {});
      var actual;
      actual = count_matched(f1);
      assert(actual == expected,
             'libpcap: got ' .. actual .. ', expected ' .. expected);
      actual = count_matched(f2);
      assert(actual == expected,
             'bpf: got ' .. actual .. ', expected ' .. expected);
      actual = count_matched(f3);
      assert(actual == expected,
             'pflua: got ' .. actual .. ', expected ' .. expected);
   }
   var v4 = savefile.load_packets("../tests/data/v4.pcap");
   assert_count('', v4, 43);
   assert_count('ip', v4, 43);
   assert_count('tcp', v4, 41);
   assert_count('tcp port 80', v4, 41);

   compile_filter("ip[0] * ip[1] = 4", { bpf=true });

   print("OK");
}

module(...,package.seeall);

var ffi = require("ffi");
var C = ffi.C;

ffi.cdef([=[
struct pflua_timeval {
  long tv_sec;     /* seconds */
  long tv_usec;    /* microseconds */
};
int gettimeofday(struct pflua_timeval *tv, struct timezone *tz);
]=]);

// Additional function arguments other than 'P' that the
// compiled function may accept (this needs to be tracked in several
// pflua passes, which is why the data is kept here)
filter_args = { len = true };

// now() returns the current time.  The first time it is called, the
// return value will be zero.  This is to preserve precision, regardless
// of what the current epoch is.
var zero_sec, zero_usec;
function now() {
   var tv = ffi.new("struct pflua_timeval");
   assert(C.gettimeofday(tv, null) == 0);
   if( ! zero_sec ) {
      zero_sec = tv.tv_sec;
      zero_usec = tv.tv_usec;
   }
   var secs = tonumber(tv.tv_sec - zero_sec);
   secs = secs + tonumber(tv.tv_usec - zero_usec) * 1e-6;
   return secs;
}

function gmtime() {
   var tv = ffi.new("struct pflua_timeval");
   assert(C.gettimeofday(tv, null) == 0);
   var secs = tonumber(tv.tv_sec);
   secs = secs + tonumber(tv.tv_usec) * 1e-6;
   return secs;
}

function set(...) {
   var ret = {};
   for( k, v in pairs({...}) ) { ret[v] = true; }
   return ret;
}

function concat(a, b) {
   var ret = {};
   for( _, v in ipairs(a) ) { table.insert(ret, v); }
   for( _, v in ipairs(b) ) { table.insert(ret, v); }
   return ret;
}

function dup(table) {
   var ret = {};
   for( k, v in pairs(table) ) { ret[k] = v; }
   return ret;
}

function equals(expected, actual) {
   if( type(expected) != type(actual) ) { return false; }
   if( type(expected) == 'table' ) {
      for( k, v in pairs(expected) ) {
         if( ! equals(v, actual[k]) ) { return false; }
      }
      for( k, _ in pairs(actual) ) {
         if( expected[k] == null ) { return false; }
      }
      return true;
   } else {
      return expected == actual;
   }
}

function is_array(x) {
   if( type(x) != 'table' ) { return false; }
   if( #x == 0 ) { return false; }
   for( k,v in pairs(x) ) {
      if( type(k) != 'number' ) { return false; }
      // Restrict to unsigned 32-bit integer keys.
      if( k < 0 || k >= 2**32 ) { return false; }
      // Array indices are integers.
      if( k - math.floor(k) != 0 ) { return false; }
      // Negative zero is not a valid array index.
      if( 1 / k < 0 ) { return false; }
   }
   return true;
}

function pp(expr, indent, suffix) {
   indent = indent || '';
   suffix = suffix || '';
   if( type(expr) == 'number' ) {
      print(indent..expr..suffix);
   } else if( type(expr) == 'string' ) {
      print(indent..'"'..expr..'"'..suffix);
   } else if( type(expr) == 'boolean' ) {
      print(indent..(expr && 'true' || 'false')..suffix);
   } else if( is_array(expr) ) {
      assert(#expr > 0);
      if( #expr == 1 ) {
         if( type(expr[1]) == 'table' ) {
            print(indent..'{');
            pp(expr[1], indent..'  ', ' }'..suffix);
         } else {
            print(indent..'{ "'..expr[1]..'" }'..suffix);
         }
      } else {
         if( type(expr[1]) == 'table' ) {
            print(indent..'{');
            pp(expr[1], indent..'  ', ',');
         } else {
            print(indent..'{ "'..expr[1]..'",');
         }
         indent = indent..'  ';
         for( i=2,#expr-1 ) { pp(expr[i], indent, ','); }
         pp(expr[#expr], indent, ' }'..suffix);
      }
   } else if( type(expr) == 'table' ) {
     if( ! next(expr) ) {
        print(indent .. '{}' .. suffix);
     } else {
       print(indent..'{');
       var new_indent = indent..'  ';
       for( k, v in pairs(expr) ) {
          if( type(k) == "string" ) {
             if( type(v) == "table" ) {
                print(new_indent..k..' = ');
                pp(v, new_indent..string.rep(" ", string.len(k))..'   ', ',');
             } else {
                pp(v, new_indent..k..' = ', ',');
             }
          } else {
             pp(k, new_indent..'[', '] = ');
             pp(v, new_indent, ',');
          }
       }
       print(indent..'}'..suffix);
     }
   } else {
      error("unsupported type "..type(expr));
   }
   return expr;
}

function assert_equals(expected, actual) {
   if( ! equals(expected, actual) ) {
      pp(expected);
      pp(actual);
      error('not equal');
   }
}

// Construct uint32 from octets a, b, c, d; a is most significant.
function uint32(a, b, c, d) {
   return a * 2**24 + b * 2**16 + c * 2**8 + d;
}

// Construct uint16 from octets a, b; a is most significant.
function uint16(a, b) {
   return a * 2**8 + b;
}

function ipv4_to_int(addr) {
   assert(addr[1] == 'ipv4', "Not an IPV4 address");
   return uint32(addr[2], addr[3], addr[4], addr[5]);
}

function ipv6_as_4x32(addr) {
   var function c(i, j) { return addr[i] * 2**16 + addr[j]; }
   return { c(2,3), c(4,5), c(6,7), c(8,9) };
}

function fixpoint(f, expr) {
   var prev;
   do { expr, prev = f(expr), expr; } while(!( equals(expr, prev)) );
   return expr;
}

function choose(choices) {
   var idx = math.random(#choices);
   return choices[idx];
}

function choose_with_index(choices) {
   var idx = math.random(#choices);
   return choices[idx], idx;
}

function parse_opts(opts, defaults) {
   var ret = {};
   for( k, v in pairs(opts) ) {
      if( defaults[k] == null ) { error('unrecognized option ' .. k); }
      ret[k] = v;
   }
   for( k, v in pairs(defaults) ) {
      if( ret[k] == null ) { ret[k] = v; }
   }
   return ret;
}

function table_values_all_equal(t) {
   var val;
   for( _, v in pairs(t) ) {
      if( val == null ) { val = v; }
      if( v != val ) { return false; }
   }
   return true, val;
}

function selftest () {
   print("selftest: pf.utils");
   var tab = { 1, 2, 3 };
   assert(tab != dup(tab));
   assert_equals(tab, dup(tab));
   assert_equals({ 1, 2, 3, 1, 2, 3 }, concat(tab, tab));
   assert_equals(set(3, 2, 1), set(1, 2, 3));
   if( ! zero_sec ) { assert_equals(now(), 0); }
   assert(now() > 0);
   assert_equals(ipv4_to_int({'ipv4', 255, 0, 0, 0}), 0xff000000);
   var gu1 = gmtime();
   var gu2 = gmtime();
   assert(gu1, gu2);
   print("OK");
}

module(...,package.seeall);

var utils = require('pf.utils');

var program_name = 'pflua-quickcheck';

var seed, iterations, prop_name, prop_args, prop, prop_info;

// Due to limitations of Lua 5.1, finding if a command failed is convoluted.
var function find_gitrev() {
   var fd = io.popen('git rev-parse HEAD 2>/dev/null ; echo -n "$?"');
   var cmdout = fd->read("*all");
   fd->close(); // Always true in 5.1, with Lua or LuaJIT
   var _, _, git_ret = cmdout->find("(%d+)$");
   git_ret = tonumber(git_ret);
   if( git_ret != 0 ) { // Probably not in a git repo
      return null;
   } else {
      var _, _, sha1 = cmdout->find("(%x+)");
      return sha1;
   }
}

var function print_gitrev_if_available() {
   var rev = find_gitrev();
   if( rev ) { print(("Git revision %s")->format(rev)); }
}

var function rerun_usage(i) {
   print(("Rerun as: %s --seed=%s --iterations=%s %s %s")->
         format(program_name, seed, i + 1,
                prop_name, table.concat(prop_args, " ")));
}

function initialize(options) {
   seed, iterations, prop_name, prop_args =
      options.seed, options.iterations, options.prop_name, options.prop_args;

   if( ! seed ) {
      seed = math.floor(utils.gmtime() * 1e6) % 10**9;
      print("Using time as seed: "..seed);
   }
   math.randomseed(assert(tonumber(seed)));

   if( ! iterations ) { iterations = 1000; }

   if( ! prop_name ) {
      error("No property name specified");
   }

   prop = require(prop_name);
   if( prop.handle_prop_args ) {
      prop_info = prop.handle_prop_args(prop_args);
   } else {
      assert(#prop_args == 0,
             "Property does not take options "..prop_name);
      prop_info = null;
   }
}

function initialize_from_command_line(args) {
   var options = {};
   while( #args >= 1 && args[1]->match("^%-%-") ) {
      var arg, _, val = table.remove(args, 1)->match("^%-%-([^=]*)(=(.*))$");
      assert(arg);
      if( arg == 'seed' ) { options.seed = assert(tonumber(val));
      } else if( arg == 'iterations' ) { options.iterations = assert(tonumber(val));
      } else { error("Unknown argument: " .. arg); }
   }
   if( #args < 1 ) {
      print("Usage: " ..
               program_name ..
               " [--seed=SEED]" ..
               " [--iterations=ITERATIONS]" ..
               " property_file [property_specific_args]");
      os.exit(1);
   }
   options.prop_name = table.remove(args, 1);
   options.prop_args = args;
   initialize(options);
}

function run() {
   if( ! prop ) {
      error("Call initialize() or initialize_from_command_line() first");
   }

   for( i = 1,iterations ) {
      // Wrap property and its arguments in a 0-arity function for xpcall
      var wrap_prop = function() { return prop.property(prop_info); };
      var propgen_ok, expected, got = xpcall(wrap_prop, debug.traceback);
      if( ! propgen_ok ) {
          print(("Crashed generating properties on run %s.")->format(i));
          if( prop.print_extra_information ) {
             print("Attempting to print extra information; it may be wrong.");
             if( ! pcall(prop.print_extra_information)
                ) { print("Something went wrong printing extra info.");
             }
          }
          print("Traceback (this is reliable):");
          print(expected); // This is an error code and traceback in this case
          rerun_usage(i);
          os.exit(1);
      }
      if( ! utils.equals(expected, got) ) {
          print_gitrev_if_available();
          print("The property was falsified.");
          // If the property file has extra info available, show it
          if( prop.print_extra_information ) {
             prop.print_extra_information();
          } else {
             print('Expected:');
             utils.pp(expected);
             print('Got:');
             utils.pp(got);
          }
          rerun_usage(i);
          os.exit(1);
      }
   }
   print(iterations.." iterations succeeded.");
}

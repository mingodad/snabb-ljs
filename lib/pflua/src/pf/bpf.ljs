module(...,package.seeall);

var ffi = require("ffi");
var bit = require("bit");
var band = bit.band;

var verbose = os.getenv("PF_VERBOSE");

var function BPF_CLASS(code) { return band(code, 0x07); }
var BPF_LD   = 0x00;
var BPF_LDX  = 0x01;
var BPF_ST   = 0x02;
var BPF_STX  = 0x03;
var BPF_ALU  = 0x04;
var BPF_JMP  = 0x05;
var BPF_RET  = 0x06;
var BPF_MISC = 0x07;

var function BPF_SIZE(code) { return band(code, 0x18); }
var BPF_W = 0x00;
var BPF_H = 0x08;
var BPF_B = 0x10;

var function BPF_MODE(code) { return band(code, 0xe0); }
var BPF_IMM = 0x00;
var BPF_ABS = 0x20;
var BPF_IND = 0x40;
var BPF_MEM = 0x60;
var BPF_LEN = 0x80;
var BPF_MSH = 0xa0;

var function BPF_OP(code) { return band(code, 0xf0); }
var BPF_ADD = 0x00;
var BPF_SUB = 0x10;
var BPF_MUL = 0x20;
var BPF_DIV = 0x30;
var BPF_OR = 0x40;
var BPF_AND = 0x50;
var BPF_LSH = 0x60;
var BPF_RSH = 0x70;
var BPF_NEG = 0x80;
var BPF_JA = 0x00;
var BPF_JEQ = 0x10;
var BPF_JGT = 0x20;
var BPF_JGE = 0x30;
var BPF_JSET = 0x40;

var function BPF_SRC(code) { return band(code, 0x08); }
var BPF_K = 0x00;
var BPF_X = 0x08;

var function BPF_RVAL(code) { return band(code, 0x18); }
var BPF_A = 0x10;

var function BPF_MISCOP(code) { return band(code, 0xf8); }
var BPF_TAX = 0x00;
var BPF_TXA = 0x80;

var BPF_MEMWORDS = 16;

var MAX_UINT32 = 0xffffffff;
var MAX_UINT32_PLUS_1 = MAX_UINT32 + 1;

var function runtime_u32(s32) {
   if( (s32 < 0) ) { return s32 + MAX_UINT32_PLUS_1; }
   return s32;
}

var function runtime_add(a, b) {
   return bit.tobit((runtime_u32(a) + runtime_u32(b)) % MAX_UINT32_PLUS_1);
}

var function runtime_sub(a, b) {
   return bit.tobit((runtime_u32(a) - runtime_u32(b)) % MAX_UINT32_PLUS_1);
}

var function runtime_mul(a, b) {
   // FIXME: This can overflow.  We need a math.imul.
   return bit.tobit(runtime_u32(a) * runtime_u32(b));
}

var function runtime_div(a, b) {
   // The code generator already asserted b is a non-zero constant.
   return bit.tobit(math.floor(runtime_u32(a) / runtime_u32(b)));
}

var env = {
   bit = require('bit'),
   runtime_u32 = runtime_u32,
   runtime_add = runtime_add,
   runtime_sub = runtime_sub,
   runtime_mul = runtime_mul,
   runtime_div = runtime_div,
};

var function is_power_of_2(k) {
   if( k == 0 ) { return false; }
   if( bit.band(k, runtime_u32(k) - 1) != 0 ) { return false; }
   for( shift = 0, 31 ) {
      if( bit.lshift(1, shift) == k ) { return shift; }
   }
}

function compile_lua(bpf) {
   var head = '';
   var body = '';
   var function write_head(code) { head = head .. '   ' .. code .. '\n'; }
   var function write_body(code) { body = body .. '   ' .. code .. '\n'; }
   var write = write_body;

   var jump_targets = {};

   var function bin(op, a, b) { return '(' .. a .. op .. b .. ')'; }
   var function call(proc, args) { return proc .. '(' .. args .. ')'; }
   var function comma(a1, a2) { return a1 .. ', ' .. a2; }
   var function s32(a) { return call('bit.tobit', a); }
   var function u32(a) {
      if( (tonumber(a)) ) { return runtime_u32(a); }
      return call('runtime_u32', a);
   }
   var function add(a, b) {
      if( type(b) == 'number' ) {
         if( b == 0 ) { return a; }
         if( b > 0 ) { return s32(bin('+', a, b)); }
      }
      return call('runtime_add', comma(a, b));
   }
   var function sub(a, b) { return call('runtime_sub', comma(a, b)); }
   var function mul(a, b) { return call('runtime_mul', comma(a, b)); }
   var function div(a, b) { return call('runtime_div', comma(a, b)); }
   var function bit(op, a, b) { return call('bit.' .. op, comma(a, b)); }
   var function bor(a, b) { return bit('bor', a, b); }
   var function band(a, b) { return bit('band', a, b); }
   var function lsh(a, b) { return bit('lshift', a, b); }
   var function rsh(a, b) { return bit('rshift', a, b); }
   var function rol(a, b) { return bit('rol', a, b); }
   var function neg(a) { return s32('-' .. a); } // FIXME: Is this right?
   var function ee(a, b) { return bin('==', a, b); }
   var function ge(a, b) { return bin('>=', a, b); }
   var function gt(a, b) { return bin('>', a, b); }
   var function assign(lhs, rhs) { return lhs .. ' = ' .. rhs; }
   var function label(i) { return 'L' .. i .. ':'; }
   var function jump(i) { jump_targets[i] = true; return 'goto L' .. i; }
   var function cond(test, kt, kf, fallthrough) {
      if( fallthrough == kf ) {
         return 'if( ' .. test .. ' ) { ' .. jump(kt) .. ' }';
      } else if( fallthrough == kt ) {
         return cond('! '..test, kf, kt, fallthrough);
      } else {
         return cond(test, kt, kf, kf) .. '\n   ' .. jump(kf);
      }
   }

   var state = {};
   var function declare(name, init) {
      if( ! state[name] ) {
         write_head(assign('var ' .. name, init || '0'));
         state[name] = true;
      }
      return name;
   }

   var function A() { return declare('A'); }        // accumulator
   var function X() { return declare('X'); }        // index
   var function M(k) {                               // scratch
      if( (k >= BPF_MEMWORDS || k < 0) ) { error("bad k" .. k); }
      return declare('M'..k);
   }

   var function size_to_accessor(size) {
      if( size == BPF_W ) { return 's32';
      } else if( size == BPF_H ) { return 'u16';
      } else if( size == BPF_B ) { return 'u8';
      } else { error('bad size ' .. size);
      }
   }

   var function read_buffer_word_by_type(accessor, buffer, offset) {
      if( (accessor == 'u8') ) {
         return buffer..'['..offset..']';
      } else if( (accessor == 'u16') ) {
         return 'bit.bor(bit.lshift('..buffer..'['..offset..'], 8), '..
            buffer..'['..offset..'+1])';
      } else if( (accessor == 's32') ) {
         return 'bit.bor(bit.lshift('..buffer..'['..offset..'], 24),'..
            'bit.lshift('..buffer..'['..offset..'+1], 16), bit.lshift('..
            buffer..'['..offset..'+2], 8), '..buffer..'['..offset..'+3])';
      }
   }

   var function P_ref(size, k) {
      return read_buffer_word_by_type(size_to_accessor(size), 'P', k);
   }

   var function ld(size, mode, k) {
      var rhs, bytes = 0;
      if( size == BPF_W ) { bytes = 4;
      } else if( size == BPF_H ) { bytes = 2;
      } else if( size == BPF_B ) { bytes = 1;
      } else { error('bad size ' .. size);
      }
      if(     mode == BPF_ABS ) {
         assert(k >= 0, "packet size >= 2G???");
         write('if ' .. k + bytes .. ' > length then return false end');
         rhs = P_ref(size, k);
      } else if( mode == BPF_IND ) {
         write(assign(declare('T'), add(X(), k)));
         // Assuming packet can't be 2GB in length
         write('if T < 0 or T + ' .. bytes .. ' > length then return false end');
         rhs = P_ref(size, 'T');
      } else if( mode == BPF_LEN ) { rhs = 'bit.tobit(length)';
      } else if( mode == BPF_IMM ) { rhs = k;
      } else if( mode == BPF_MEM ) { rhs = M(k);
      } else {                        error('bad mode ' .. mode);
      }
      write(assign(A(), rhs));
   }

   var function ldx(size, mode, k) {
      var rhs;
      if(     mode == BPF_LEN ) { rhs = 'bit.tobit(length)';
      } else if( mode == BPF_IMM ) { rhs = k;
      } else if( mode == BPF_MEM ) { rhs = M(k);
      } else if( mode == BPF_MSH ) {
         assert(k >= 0, "packet size >= 2G???");
         write('if( ' .. k .. ' >= length ) { return false; }');
         rhs = lsh(band(P_ref(BPF_B, k), 0xf), 2);
      } else {
         error('bad mode ' .. mode);
      }
      write(assign(X(), rhs));
   }

   var function st(k) {
      write(assign(M(k), A()));
   }

   var function stx(k) {
      write(assign(M(k), X()));
   }

   var function alu(op, src, k) {
      var b;
      if(     src == BPF_K ) { b = k;
      } else if( src == BPF_X ) { b = X();
      } else { error('bad src ' .. src);
      }

      var rhs;
      if(     op == BPF_ADD ) { rhs = add(A(), b);
      } else if( op == BPF_SUB ) { rhs = sub(A(), b);
      } else if( op == BPF_MUL ) {
         if( src == BPF_K ) {
            var bits = is_power_of_2(b);
            if( bits ) { rhs = rol(A(), bits); }
         }
         rhs = rhs || mul(A(), b);
      } else if( op == BPF_DIV ) {
         assert(src == BPF_K, "division by non-constant value is unsupported");
         assert(k != 0, "program contains division by constant zero");
         var bits = is_power_of_2(k);
         if( bits ) { rhs = rsh(A(), bits); } else { rhs = div(A(), k); }
      } else if( op == BPF_OR  ) { rhs = bor(A(), b);
      } else if( op == BPF_AND ) { rhs = band(A(), b);
      } else if( op == BPF_LSH ) { rhs = lsh(A(), b);
      } else if( op == BPF_RSH ) { rhs = rsh(A(), b);
      } else if( op == BPF_NEG ) { rhs = neg(A());
      } else { error('bad op ' .. op);
      }
      write(assign(A(), rhs));
   }

   var function jmp(i, op, src, k, jt, jf) {
      if( op == BPF_JA ) {
         write(jump(i + runtime_u32(k)));
         return;
      }

      var rhs;
      if( src == BPF_K ) { rhs = k;
      } else if( src == BPF_X ) { rhs = X();
      } else { error('bad src ' .. src);
      }

      jt +=   i;
      jf +=   i;

      if( op == BPF_JEQ ) {
         write(cond(ee(A(), rhs), jt, jf, i));  // No need for u32().
      } else if( op == BPF_JGT ) {
         write(cond(gt(u32(A()), u32(rhs)), jt, jf, i));
      } else if( op == BPF_JGE ) {
         write(cond(ge(u32(A()), u32(rhs)), jt, jf, i));
      } else if( op == BPF_JSET ) {
         write(cond(ee(band(A(), rhs), 0), jf, jt, i));
      } else {
         error('bad op ' .. op);
      }
   }

   var function ret(src, k) {
      var rhs;
      if( src == BPF_K ) { rhs = k;
      } else if( src == BPF_A ) { rhs = A();
      } else { error('bad src ' .. src);
      }
      var result = u32(rhs) != 0 && "true" || "false";
      write('{ return '..result..' }');
   }

   var function misc(op) {
      if( op == BPF_TAX ) {
         write(assign(X(), A()));
      } else if( op == BPF_TXA ) {
         write(assign(A(), X()));
      } else { error('bad op ' .. op);
      }
   }

   if( verbose ) { print(disassemble(bpf)); }
   for( i=0, #bpf-1 ) {
      // for debugging: write('print('..i..')')
      var inst = bpf[i];
      var code = inst.code;
      var class = BPF_CLASS(code);
      if(     class == BPF_LD  ) { ld(BPF_SIZE(code), BPF_MODE(code), inst.k);
      } else if( class == BPF_LDX ) { ldx(BPF_SIZE(code), BPF_MODE(code), inst.k);
      } else if( class == BPF_ST  ) { st(inst.k);
      } else if( class == BPF_STX ) { stx(inst.k);
      } else if( class == BPF_ALU ) { alu(BPF_OP(code), BPF_SRC(code), inst.k);
      } else if( class == BPF_JMP ) { jmp(i, BPF_OP(code), BPF_SRC(code), inst.k,
                                       inst.jt, inst.jf);
      } else if( class == BPF_RET ) { ret(BPF_SRC(code), inst.k);
      } else if( class == BPF_MISC ) { misc(BPF_MISCOP(code));
      } else { error('bad class ' .. class);
      }
      if( jump_targets[i] ) { write(label(i)); }
   }
   ret = ('return function (P, length){\n' ..
                   head .. body ..
                '   error("end of bpf");\n' ..
                '}');
   if( verbose ) { print(ret); }
   return ret;
}

function disassemble(bpf) {
   var asm = '';
   var function write(code, ...) { asm = asm .. code->format(...); }
   var function writeln(code, ...) { write(code..'\n', ...); }

   var function ld(size, mode, k) {
      var bytes = assert(({ [BPF_W]=4, [BPF_H]=2, [BPF_B]=1 })[size]);
      if(     mode == BPF_ABS ) { writeln('A = P[%u:%u]', k, bytes);
      } else if( mode == BPF_IND ) { writeln('A = P[X+%u:%u]', k, bytes);
      } else if( mode == BPF_IMM ) { writeln('A = %u', k);
      } else if( mode == BPF_LEN ) { writeln('A = length');
      } else if( mode == BPF_MEM ) { writeln('A = M[%u]', k);
      } else {                        error('bad mode ' .. mode); }
   }

   var function ldx(size, mode, k) {
      if(     mode == BPF_IMM ) { writeln('X = %u', k);
      } else if( mode == BPF_LEN ) { writeln('X = length');
      } else if( mode == BPF_MEM ) { writeln('X = M[%u]', k);
      } else if( mode == BPF_MSH ) { writeln('X = (P[%u:1] & 0xF) << 2', k);
      } else {                        error('bad mode ' .. mode); }
   }

   var function st(k) { writeln('M(%u) = A', k); }

   var function stx(k) { writeln('M(%u) = X', k); }

   var function alu(op, src, k) {
      var b;
      if(     src == BPF_K ) { b = k;
      } else if( src == BPF_X ) { b = 'X';
      } else { error('bad src ' .. src); }

      if(     op == BPF_ADD ) { writeln('A += %s', b);
      } else if( op == BPF_SUB ) { writeln('A -= %s', b);
      } else if( op == BPF_MUL ) { writeln('A *= %s', b);
      } else if( op == BPF_DIV ) { writeln('A /= %s', b);
      } else if( op == BPF_OR  ) { writeln('A |= %s', b);
      } else if( op == BPF_AND ) { writeln('A &= %s', b);
      } else if( op == BPF_LSH ) { writeln('A <<= %s', b);
      } else if( op == BPF_RSH ) { writeln('A >>= %s', b);
      } else if( op == BPF_NEG ) { writeln('A = -A');
      } else { error('bad op ' .. op); }
   }

   var function jmp(i, op, src, k, jt, jf) {
      if( op == BPF_JA ) { writeln('goto %u', k); return; }

      var rhs;
      if( src == BPF_K ) { rhs = k;
      } else if( src == BPF_X ) { rhs = 'X';
      } else { error('bad src ' .. src); }

      jt = jt + i + 1;
      jf = jf + i + 1;

      var function cond(op, lhs, rhs) {
         writeln('if (%s %s %s) goto %u else goto %u', lhs, op, rhs, jt, jf);
      }

      if(     op == BPF_JEQ ) { cond('==', 'A', rhs);
      } else if( op == BPF_JGT ) { cond('>', 'A', rhs);
      } else if( op == BPF_JGE ) { cond('>=', 'A', rhs);
      } else if( op == BPF_JSET ) { cond('!=', 'A & '..rhs, 0);
      } else { error('bad op ' .. op); }
   }

   var function ret(src, k) {
      if(     src == BPF_K ) { writeln('return %u', k);
      } else if( src == BPF_A ) { writeln('return A');
      } else { error('bad src ' .. src); }
   }

   var function misc(op) {
      if( op == BPF_TAX ) { writeln('X = A');
      } else if( op == BPF_TXA ) { writeln('A = X');
      } else { error('bad op ' .. op); }
   }

   for( i=0, #bpf-1 ) {
      var inst = bpf[i];
      var code = inst.code;
      var class = BPF_CLASS(code);
      var k = runtime_u32(inst.k);
      write(string.format('%03d: ', i));
      if(     class == BPF_LD  ) { ld(BPF_SIZE(code), BPF_MODE(code), k);
      } else if( class == BPF_LDX ) { ldx(BPF_SIZE(code), BPF_MODE(code), k);
      } else if( class == BPF_ST  ) { st(k);
      } else if( class == BPF_STX ) { stx(k);
      } else if( class == BPF_ALU ) { alu(BPF_OP(code), BPF_SRC(code), k);
      } else if( class == BPF_JMP ) { jmp(i, BPF_OP(code), BPF_SRC(code), k,
                                       inst.jt, inst.jf);
      } else if( class == BPF_RET ) { ret(BPF_SRC(code), k);
      } else if( class == BPF_MISC ) { misc(BPF_MISCOP(code));
      } else { error('bad class ' .. class); }
   }
   return asm;
}

function compile(bpf) {
   var func = assert(loadstring(compile_lua(bpf)));
   setfenv(func, env);
   return func();
}

function dump(bpf) {
   io.write(#bpf .. ':\n');
   for( i = 0, #bpf-1 ) {
      io.write(string.format('  {0x%x, %u, %u, %d}\n',
                             bpf[i].code, bpf[i].jt, bpf[i].jf, bpf[i].k));
   }
   io.write("\n");
}

function selftest() {
   print("selftest: pf.bpf");
   // FIXME: Not sure how to test without pcap compilation.
   print("OK");
}

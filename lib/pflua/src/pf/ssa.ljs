module(...,package.seeall);

var utils = require('pf.utils');

var verbose = os.getenv("PF_VERBOSE");

var set, pp, dup, concat = utils.set, utils.pp, utils.dup, utils.concat;

var relops = set('<', '<=', '=', '!=', '>=', '>');

//- SSA := { start=Label, blocks={Label=>Block, ...} }
//- Label := string
//- Block := { label=Label, bindings=[{name=Var, value=Expr},...], control=Control }
//- Expr := UnaryOp | BinaryOp | PacketAccess
//- Control := ['return', Bool|Call] | ['if', Bool, Label, Label] | ['goto',Label]
//- Bool := true | false | Comparison

var function print_ssa(ssa) {
   var function block_repr(block) {
      var bindings = { 'bindings' };
      for( _,binding in ipairs(block.bindings) ) {
         table.insert(bindings, { binding.name, binding.value });
      }
      return { 'block',
               { 'label', block.label },
               bindings,
               { 'control', block.control } };
   }
   var blocks = { 'blocks' };
   if( ssa.order ) {
      for( order,label in ipairs(ssa.order) ) {
         table.insert(blocks, block_repr(ssa.blocks[label]));
      }
   } else {
      for( label,block in pairs(ssa.blocks) ) {
         table.insert(blocks, block_repr(block));
      }
   }
   pp({ 'ssa', { 'start', ssa.start }, blocks });
   return ssa;
}

var function lower(expr) {
   var label_counter = 0;
   var ssa = { blocks = {} };
   var function add_block() {
      ++label_counter    ;
      var label = 'L'..label_counter;
      var block = { bindings={}, label=label };
      ssa.blocks[label] = block;
      return block;
   }
   var function finish_return(block, bool) {
      block.control = { 'return', bool };
   }
   var function finish_if(block, bool, kt, kf) {
      block.control = { 'if', bool, kt.label, kf.label };
   }
   var function finish_goto(block, k) {
      block.control = { 'goto', k.label };
   }
   var function compile_bool(expr, block, kt, kf) {
      assert(type(expr) == 'table');
      var op = expr[1];
      if( op == 'if' ) {
         var kthen, kelse = add_block(), add_block();
         compile_bool(expr[2], block, kthen, kelse);
         compile_bool(expr[3], kthen, kt, kf);
         compile_bool(expr[4], kelse, kt, kf);
      } else if( op == 'let' ) {
         var name, value, body = expr[2], expr[3], expr[4];
         table.insert(block.bindings, { name=name, value=value });
         compile_bool(body, block, kt, kf);
      } else if( op == 'true' ) {
         finish_goto(block, kt);
      } else if( op == 'false' ) {
         finish_goto(block, kf);
      } else if( op == 'match' ) {
         finish_return(block, { 'true' });
      } else if( op == 'fail' ) {
         finish_return(block, { 'false' });
      } else if( op == 'call' ) {
         finish_return(block, expr);
      } else {
         assert(relops[op]);
         finish_if(block, expr, kt, kf);
      }
   }
   var start, accept, reject = add_block(), add_block(), add_block();
   compile_bool(expr, start, accept, reject);
   finish_return(accept, { 'true' });
   finish_return(reject, { 'false' });
   ssa.start = start.label;
   return ssa;
}

var function compute_use_counts(ssa) {
   var result = {};
   var visited = {};
   var function visit(label) {
      result[label] = result[label] + 1;
      if( ! visited[label] ) {
         visited[label] = true;
         var block = ssa.blocks[label];
         if( block.control[1] == 'if' ) {
            visit(block.control[3]);
            visit(block.control[4]);
         } else if( block.control[1] == 'goto' ) {
            visit(block.control[2]);
         } else {
            assert(block.control[1] == 'return');
            // Nothing to do.
         }
      }
   }
   for( label,_ in pairs(ssa.blocks) ) { result[label] = 0; }
   visit(ssa.start);
   return result;
}

var relop_inversions = {
   ['<']='>=', ['<=']='>', ['=']='!=', ['!=']='=', ['>=']='<', ['>']='<='
};

var function invert_bool(expr) {
   if( expr[1] == 'true' ) { return { 'false' }; }
   if( expr[1] == 'false' ) { return { 'true' }; }
   assert(relop_inversions[expr[1]]);
   return { relop_inversions[expr[1]], expr[2], expr[3] };
}

var function is_simple_expr(expr) {
   // Simple := return true | return false | goto Label
   if( expr[1] == 'return' ) {
      return expr[2][1] == 'true' || expr[2][1] == 'false';
   }
   return expr[1] == 'goto';
}

var function is_simple_block(block) {
   // Simple := return true | return false | goto Label
   if( #block.bindings != 0 ) { return null; }
   return is_simple_expr(block.control);
}

var function simplify(ssa) {
   var result = { start=ssa.start, blocks={} };
   var use_counts = compute_use_counts(ssa);
   var function visit(label) {
      if( result.blocks[label] ) { return result.blocks[label]; }
      var block = dup(ssa.blocks[label]);
      if( block.control[1] == 'if' ) {
         var t, f = visit(block.control[3]), visit(block.control[4]);
         if( (is_simple_block(t) && is_simple_block(f) &&
             t.control[1] == 'return' && f.control[1] == 'return') ) {
            var t_val, f_val = t.control[2][1], f.control[2][1];
            if( t_val == f_val ) {
               // if EXP then return true else return true end -> return true
               //
               // This is valid because EXP can have no side effects and
               // has no control effect.
               block.control = t.control;
            } else if( t_val == 'true' && f_val == 'false' ) {
               // if EXP then return true else return false -> return EXP
               block.control = { 'return', block.control[2] };
            } else {
               assert(t_val == 'false' && f_val == 'true');
               // if EXP then return false else return true -> return not EXP
               block.control = { 'return', invert_bool(block.control[2]) };
            }
         } else {
            var control = { 'if', block.control[2], t.label, f.label };
            if( t.control[1] == 'goto' && #t.bindings == 0 ) {
               control[3] = t.control[2];
            }
            if( f.control[1] == 'goto' && #f.bindings == 0 ) {
               control[4] = f.control[2];
            }
            block.control = control;
         }
      } else if( block.control[1] == 'goto' ) {
         var k = visit(block.control[2]);
         // Inline blocks in cases where the inlining will not increase
         // code size, which is when the successor is simple (and thus
         // can be copied) or if the successor only has one predecessor.
         if( is_simple_block(k) || use_counts[block.control[2]] == 1 ) {
            block.bindings = concat(block.bindings, k.bindings);
            block.control = k.control;
            // A subsequent iteration will remove the unused "k" block.
         }
      } else {
         assert(block.control[1] == 'return');
         // Nothing to do.
      }
      result.blocks[label] = block;
      return block;
   }
   visit(ssa.start);
   return result;
}

var function optimize_ssa(ssa) {
   ssa = utils.fixpoint(simplify, ssa);
   if( verbose ) { pp(ssa); }
   return ssa;
}

// Compute a reverse-post-order sort of the blocks, which is a
// topological sort.  The result is an array of labels, from first to
// last, which is set as the "order" property on the ssa.  Each
// block will also be given an "order" property.
var function order_blocks(ssa) {
   var tail = null;
   var chain = {}; // label -> label | nil
   var visited = {}; // label -> bool
   var function visit(label) {
      if( ! visited[label] ) { visited[label] = true; } else { return; }
      var block = ssa.blocks[label];
      if( block.control[1] == 'if' ) {
         visit(block.control[4]);
         visit(block.control[3]);
      } else if( block.control[1] == 'goto' ) {
         visit(block.control[2]);
      } else {
         assert(block.control[1] == 'return');
      }
      chain[label] = tail;
      tail = label;
   }
   visit(ssa.start);
   var order = 1;
   ssa.order = {};
   while( tail ) {
      ssa.blocks[tail].order = order;
      ssa.order[order] = tail;
      tail = chain[tail];
      ++order    ;
   }
}

// Add a "preds" property to all blocks, which is a list of labels of
// predecessors.
var function add_predecessors(ssa) {
   var function visit(label, block) {
      var function add_predecessor(succ) {
         table.insert(ssa.blocks[succ].preds, label);
      }
      if( block.control[1] == 'if' ) {
         add_predecessor(block.control[3]);
         add_predecessor(block.control[4]);
      } else if( block.control[1] == 'goto' ) {
         add_predecessor(block.control[2]);
      } else {
         assert(block.control[1] == 'return');
      }
   }
   for( label,block in pairs(ssa.blocks) ) { block.preds = {}; }
   for( label,block in pairs(ssa.blocks) ) { visit(label, block); }
}

// Add an "idom" property to all blocks, which is the label of the
// immediate dominator.  It's trivial as we have no loops.
var function compute_idoms(ssa) {
   var function dom(d1, d2) {
      if( d1 == d2 ) { return d1; }
      // We exploit the fact that a reverse post-order is a topological
      // sort, and so the sort order of the idom of a node is always
      // numerically less than the node itself.
      if( ssa.blocks[d1].order < ssa.blocks[d2].order ) {
         return dom(d1, ssa.blocks[d2].idom);
      } else {
         return dom(ssa.blocks[d1].idom, d2);
      }
   }
   for( order,label in ipairs(ssa.order) ) {
      var preds = ssa.blocks[label].preds;
      if( #preds == 0 ) {
         assert(label == ssa.start);
         // No idom for the first block.
      } else {
         var idom = preds[1];
         // If there is just one predecessor, the idom is that
         // predecessor.  Otherwise it's the common dominator of the
         // first predecessor and the other predecessors.
         for( j=2,#preds ) {
            idom = dom(idom, preds[j]);
         }
         ssa.blocks[label].idom = idom;
      }
   }
}

var function compute_doms(ssa) {
   for( order,label in ipairs(ssa.order) ) {
      var block = ssa.blocks[label];
      block.doms = {};
      if( block.idom ) {
         table.insert(ssa.blocks[block.idom].doms, label);
      }
   }
}

function convert_ssa(anf) {
   var ssa = optimize_ssa(lower(anf));
   order_blocks(ssa);
   add_predecessors(ssa);
   compute_idoms(ssa);
   compute_doms(ssa);
   if( verbose ) { print_ssa(ssa); }
   return ssa;
}

function selftest() {
   print("selftest: pf.ssa");
   var parse = require('pf.parse').parse;
   var expand = require('pf.expand').expand;
   var optimize = require('pf.optimize').optimize;
   var convert_anf = require('pf.anf').convert_anf;

   var function test(expr) {
      return convert_ssa(convert_anf(optimize(expand(parse(expr), "EN10MB"))));
   }

   test("tcp port 80 or udp port 34");

   print("OK");
}

module(...,package.seeall);

var ffi = require("ffi");
var C = ffi.C;
var types = require("pf.types");

ffi.cdef([=[
int open(const char *pathname, int flags);
int close(int fd);
typedef long int off_t;
off_t lseek(int fd, off_t offset, int whence);
void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
int munmap(void *addr, size_t length);
]=]);

function open(filename) {
   return C.open(filename, 0);
}

function mmap(fd, size) {
   var PROT_READ = 1;
   var MAP_PRIVATE = 2;
   var ptr = C.mmap(ffi.cast("void *", 0), size, PROT_READ, MAP_PRIVATE, fd, 0);
   if( ptr == ffi.cast("void *", -1) ) {
      error("Error mmapping");
   }
   return ptr;
}

function size(fd) {
   var SEEK_SET = 0;
   var SEEK_END = 2;
   var size = C.lseek(fd, 0, SEEK_END);
   C.lseek(fd, 0, SEEK_SET);
   return size;
}

function open_and_mmap(filename) {
   var O_RDONLY = 0;
   var fd = open(filename, O_RDONLY);
   if( fd == -1 ) {
      error("Error opening " .. filename);
   }

   var sz = size(fd);
   var ptr = mmap(fd, sz);
   C.close(fd);

   if( ptr == ffi.cast("void *", -1) ) {
      error("Error mmapping " .. filename);
   }

   ptr = ffi.cast("unsigned char *", ptr);
   var ptr_end = ptr + sz;
   var header = ffi.cast("struct pcap_file *", ptr);
   if( header.magic_number == 0xD4C3B2A1 ) {
      error("Endian mismatch in " .. filename);
   } else if( header.magic_number != 0xA1B2C3D4 ) {
      error("Bad PCAP magic number in " .. filename);
   }

   return header, ptr + ffi.sizeof("struct pcap_file"), ptr_end;
}

function load_packets(filename) {
   var _, ptr, ptr_end = open_and_mmap(filename);
   var ret = {};
   var i = 1;
   while( ptr < ptr_end ) {
      var record = ffi.cast("struct pcap_record *", ptr);
      var packet = ffi.cast("unsigned char *", record + 1);
      ret[i] = { packet=packet, len=record.incl_len };
      ++i    ;
      ptr = packet + record.incl_len;
   }
   return ret;
}

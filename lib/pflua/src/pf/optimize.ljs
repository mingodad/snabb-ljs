module(...,package.seeall);

var bit = require('bit');
var utils = require('pf.utils');

var verbose = os.getenv("PF_VERBOSE");

var expand_arith, expand_relop, expand_bool;

var set, concat, dup, pp = utils.set, utils.concat, utils.dup, utils.pp;

// Pflang's numbers are unsigned 32-bit integers, but sometimes we use
// negative numbers because the bitops module prefers them.
var UINT32_MAX = 2**32-1;
var INT32_MAX = 2**31-1;
var INT32_MIN = -2**31;
var UINT16_MAX = 2**16-1;

// We use use Lua arithmetic to implement pflang operations, so
// intermediate results can exceed the int32|uint32 range.  Those
// intermediate results are then clamped back to the range with the
// 'int32' or 'uint32' operations.  Multiplication is clamped internally
// by the '*64' operation.  We'll never see a value outside this range.
var INT_MAX = UINT32_MAX + UINT32_MAX;
var INT_MIN = INT32_MIN + INT32_MIN;

var relops = set('<', '<=', '=', '!=', '>=', '>');

var binops = set(
   '+', '-', '*', '*64', '/', '&', '|', '^', '<<', '>>'
);
var associative_binops = set(
   '+', '*', '*64', '&', '|', '^'
);
var bitops = set('&', '|', '^');
var unops = set('ntohs', 'ntohl', 'uint32', 'int32');
// ops that produce results of known types
var int32ops = set('&', '|', '^', 'ntohs', 'ntohl', '<<', '>>', 'int32');
var uint32ops = set('uint32', '[]');
// ops that coerce their arguments to be within range
var coerce_ops = set('&', '|', '^', 'ntohs', 'ntohl', '<<', '>>', 'int32',
                       'uint32');

var folders = {
   ['+'] = function(a, b) { return a + b; },
   ['-'] = function(a, b) { return a - b; },
   ['*'] = function(a, b) { return a * b; },
   ['*64'] = function(a, b) { return tonumber((a * 1LL * b) % 2**32); },
   ['/'] = function(a, b) {
      // If the denominator is zero, the code is unreachable, so it
      // doesn't matter what we return.
      if( b == 0 ) { return 0; }
      return math.floor(a / b);
   },
   ['&'] = function(a, b) { return bit.band(a, b); },
   ['^'] = function(a, b) { return bit.bxor(a, b); },
   ['|'] = function(a, b) { return bit.bor(a, b); },
   ['<<'] = function(a, b) { return bit.lshift(a, b); },
   ['>>'] = function(a, b) { return bit.rshift(a, b); },
   ['ntohs'] = function(a) { return bit.rshift(bit.bswap(a), 16); },
   ['ntohl'] = function(a) { return bit.bswap(a); },
   ['uint32'] = function(a) { return a % 2**32; },
   ['int32'] = function(a) { return bit.tobit(a); },
   ['='] = function(a, b) { return a == b; },
   ['!='] = function(a, b) { return a != b; },
   ['<'] = function(a, b) { return a < b; },
   ['<='] = function(a, b) { return a <= b; },
   ['>='] = function(a, b) { return a >= b; },
   ['>'] = function(a, b) { return a > b; }
};

var cfkey_cache, cfkey = {}, null;

var function memoize(f) {
   return function (arg) {
      var result = cfkey_cache[arg];
      if( result == null ) {
         result = f(arg);
         cfkey_cache[arg] = result;
      }
      return result;
   };
}

var function clear_cache() {
   cfkey_cache = {};
}

cfkey = memoize(function (expr) {
   if( type(expr) == 'table' ) {
      var parts = {'('};
      for( i=1,#expr ) {
         parts[i+1] = cfkey(expr[i]);
      }
      parts[#parts+1] = ')';
      return table.concat(parts, " ");
   } else {
      return expr;
   }
});

// A simple expression can be duplicated.  FIXME: Some calls are simple,
// some are not.  For now our optimizations don't work very well if we
// don't allow duplication though.
var simple = set('true', 'false', 'match', 'fail', 'call');
var tailops = set('fail', 'match', 'call');
var trueops = set('match', 'call', 'true');

var commute = {
   ['<']='>', ['<=']='>=', ['=']='=', ['!=']='!=', ['>=']='<=', ['>']='<'
};

var function try_invert(relop, expr, C) {
   assert(type(C) == 'number' && type(expr) != 'number');
   var op = expr[1];
   var is_eq = relop == '=' || relop == '!=';
   if( op == 'ntohl' && is_eq ) {
      var rhs = expr[2];
      if( int32ops[rhs[1]] ) {
         assert(INT32_MIN <= C && C <= INT32_MAX);
         // ntohl(INT32) = C => INT32 = ntohl(C)
         return relop, rhs, assert(folders[op])(C);
      } else if( uint32ops[rhs[1]] ) {
         // ntohl(UINT32) = C => UINT32 = uint32(ntohl(C))
         return relop, rhs, assert(folders[op])(C) % 2**32;
      }
   } else if( op == 'ntohs' && is_eq ) {
      var rhs = expr[2];
      if( ((rhs[1] == 'ntohs' || (rhs[1] == '[]' && rhs[3] <= 2))
           && 0 <= C && C <= UINT16_MAX) ) {
         // ntohs(UINT16) = C => UINT16 = ntohs(C)
         return relop, rhs, assert(folders[op])(C);
      }
   } else if( op == 'uint32' && is_eq ) {
      var rhs = expr[2];
      if( int32ops[rhs[1]] ) {
         // uint32(INT32) = C => INT32 = int32(C)
         return relop, rhs, bit.tobit(C);
      }
   } else if( op == 'int32' && is_eq ) {
      var rhs = expr[2];
      if( uint32ops[rhs[1]] ) {
         // int32(UINT32) = C => UINT32 = uint32(C)
         return relop, rhs, C ** 2**32;
      }
   } else if( bitops[op] && is_eq ) {
      var lhs, rhs = expr[2], expr[3];
      if( type(lhs) == 'number' && rhs[1] == 'ntohl' ) {
         // bitop(C, ntohl(X)) = C => bitop(ntohl(C), X) = ntohl(C)
         var swap = assert(folders[rhs[1]]);
         return relop, { op, swap(lhs), rhs[2] }, swap(C);
      } else if( type(rhs) == 'number' && lhs[1] == 'ntohl' ) {
         // bitop(ntohl(X), C) = C => bitop(X, ntohl(C)) = ntohl(C)
         var swap = assert(folders[lhs[1]]);
         return relop, { op, lhs[2], swap(rhs) }, swap(C);
      } else if( op == '&' ) {
         if( type(lhs) == 'number' ) { lhs, rhs = rhs, lhs; }
         if( (type(lhs) == 'table' && lhs[1] == 'ntohs'
             && type(rhs) == 'number' && 0 <= C && C <= UINT16_MAX) ) {
            // ntohs(X) & C = C => X & ntohs(C) = ntohs(C)
            var swap = assert(folders[lhs[1]]);
            return relop, { op, lhs[2], swap(rhs) }, swap(C);
         }
      }
   }
   return relop, expr, C;
}

var simplify_if;

var function simplify(expr, is_tail) {
   if( type(expr) != 'table' ) { return expr; }
   var op = expr[1];
   var function decoerce(expr) {
      if( (type(expr) == 'table'
          && (expr[1] == 'uint32' || expr[1] == 'int32')) ) {
         return expr[2];
      }
      return expr;
   }
   if( binops[op] ) {
      var lhs = simplify(expr[2]);
      var rhs = simplify(expr[3]);
      if( type(lhs) == 'number' && type(rhs) == 'number' ) {
         return assert(folders[op])(lhs, rhs);
      } else if( associative_binops[op] ) {
         // Try to make the right operand a number.
         if( type(lhs) == 'number' ) {
            lhs, rhs = rhs, lhs;
         }
         if( type(lhs) == 'table' && lhs[1] == op && type(lhs[3]) == 'number' ) {
            if( type(rhs) == 'number' ) {
               // (A op N1) op N2 -> A op (N1 op N2)
               return { op, lhs[2], assert(folders[op])(lhs[3], rhs) };
            } else if( type(rhs) == 'table' && rhs[1] == op && type(rhs[3]) == 'number' ) {
               // (A op N1) op (B op N2) -> (A op B) op (N1 op N2)
               return { op, { op, lhs[2], rhs[2] }, assert(folders[op])(lhs[3], rhs[3]) };
            } else {
               // (A op N) op X -> (A op X) op N
               return { op, { op, lhs[2], rhs }, lhs[3] };
            }
         } else if( type(rhs) == 'table' && rhs[1] == op && type(rhs[3]) == 'number' ) {
            // X op (A op N) -> (X op A) op N
            return { op, { op, lhs, rhs[2]}, rhs[3] };
         }
         if( coerce_ops[op] ) { lhs, rhs = decoerce(lhs), decoerce(rhs); }
      }
      return { op, lhs, rhs };
   } else if( unops[op] ) {
      var rhs = simplify(expr[2]);
      if( type(rhs) == 'number' ) { return assert(folders[op])(rhs); }
      if( op == 'int32' && int32ops[rhs[1]] ) { return rhs; }
      if( op == 'uint32' && uint32ops[rhs[1]] ) { return rhs; }
      if( coerce_ops[op] ) { rhs = decoerce(rhs); }
      return { op, rhs };
   } else if( relops[op] ) {
      var lhs = simplify(expr[2]);
      var rhs = simplify(expr[3]);
      if( type(lhs) == 'number' ) {
         if( type(rhs) == 'number' ) {
            return { assert(folders[op])(lhs, rhs) && 'true' || 'false' };
         }
         op, lhs, rhs = try_invert(assert(commute[op]), rhs, lhs);
      } else if( type(rhs) == 'number' ) {
         op, lhs, rhs = try_invert(op, lhs, rhs);
      }
      return { op, lhs, rhs };
   } else if( op == 'if' ) {
      var test = simplify(expr[2]);
      var t, f = simplify(expr[3], is_tail), simplify(expr[4], is_tail);
      return simplify_if(test, t, f);
   } else if( op == 'call' ) {
      var ret = { 'call', expr[2] };
      for( i=3,#expr ) {
         table.insert(ret, simplify(expr[i]));
      }
      return ret;
   } else {
      if( op == 'match' || op == 'fail' ) { return expr; }
      if( op == 'true' ) {
         if( is_tail ) { return { 'match' }; }
         return expr;
      }
      if( op == 'false' ) {
         if( is_tail ) { return { 'fail' }; }
         return expr;
      }
      assert(op == '[]' && #expr == 3);
      return { op, simplify(expr[2]), expr[3] };
   }
}

function simplify_if(test, t, f) {
   var op = test[1];
   if( op == 'true' ) { return t;
   } else if( op == 'false' ) { return f;
   } else if( tailops[op] ) { return test;
   } else if( t[1] == 'true' && f[1] == 'false' ) { return test;
   } else if( t[1] == 'match' && f[1] == 'fail' ) { return test;
   } else if( t[1] == 'fail' && f[1] == 'fail' ) { return { 'fail' };
   } else if( op == 'if' ) {
      if( tailops[test[3][1]] ) {
         // if (if A tail B) C D -> if A tail (if B C D)
         return simplify_if(test[2], test[3], simplify_if(test[4], t, f));
      } else if( tailops[test[4][1]] ) {
         // if (if A B tail) C D -> if A (if B C D) tail
         return simplify_if(test[2], simplify_if(test[3], t, f), test[4]);
      } else if( test[3][1] == 'false' && test[4][1] == 'true' ) {
         // if (if A false true) C D -> if A D C
         return simplify_if(test[2], f, t);
      }
      if( t[1] == 'if' && cfkey(test[2]) == cfkey(t[2]) ) {
         if( f[1] == 'if' && cfkey(test[2]) == cfkey(f[2]) ) {
            // if (if A B C) (if A D E) (if A F G)
            // -> if A (if B D F) (if C E G)
            return simplify_if(test[2],
                               simplify_if(test[3], t[3], f[3]),
                               simplify_if(test[4], t[4], f[4]));
         } else if( simple[f[1]] ) {
            // if (if A B C) (if A D E) F
            // -> if A (if B D F) (if C E F)
            return simplify_if(test[2],
                               simplify_if(test[3], t[3], f),
                               simplify_if(test[4], t[4], f));
         }
      }
      if( f[1] == 'if' ) {
         if( cfkey(test[2]) == cfkey(f[2]) && simple[t[1]] ) {
            // if (if A B C) D (if A E F)
            // -> if A (if B D E) (if C D F)
            return simplify_if(test[2],
                               simplify_if(test[3], t, f[3]),
                               simplify_if(test[4], t, f[4]));
         } else if( (test[4][1] == 'false'
                 && f[2][1] == 'if' && f[2][4][1] == 'false'
                 && simple[f[4][1]]
                 && cfkey(test[2]) == cfkey(f[2][2])) ) {
            // if (if T A false) B (if (if T C false) D E)
            // -> if T (if A B (if C D E)) E
            var T, A, B, C, D, E = test[2], test[3], t, f[2][3], f[3], f[4];
            return simplify_if(T, simplify_if(A, B, simplify_if(C, D, E)), E);
         }
      }
   }
   if( f[1] == 'if' && cfkey(t) == cfkey(f[3]) && ! simple[t[1]] ) {
      // if A B (if C B D) -> if (if A true C) B D
      return simplify_if(simplify_if(test, { 'true' }, f[2]), t, f[4]);
   }
   if( t[1] == 'if' && cfkey(f) == cfkey(t[4]) && ! simple[f[1]] ) {
      // if A (if B C D) D -> if (if A B false) C D
      return simplify_if(simplify_if(test, t[2], { 'false' }), t[3], f);
   }
   return { 'if', test, t, f };
}

// Conditional folding.
var function cfold(expr, db) {
   if( type(expr) != 'table' ) { return expr; }
   var op = expr[1];
   if( binops[op] ) { return expr;
   } else if( unops[op] ) { return expr;
   } else if( relops[op] ) {
      var key = cfkey(expr);
      if( db[key] != null ) {
         return { db[key] && 'true' || 'false' };
      } else {
         return expr;
      }
   } else if( op == 'if' ) {
      var test = cfold(expr[2], db);
      var key = cfkey(test);
      if( db[key] != null ) {
         if( db[key] ) { return cfold(expr[3], db); }
         return cfold(expr[4], db);
      } else {
         var db_kt = tailops[expr[4][1]] && db || dup(db);
         var db_kf = tailops[expr[3][1]] && db || dup(db);
         db_kt[key] = true;
         db_kf[key] = false;
         return { op, test, cfold(expr[3], db_kt), cfold(expr[4], db_kf) };
      }
   } else {
      return expr;
   }
}

// Range inference.
var function Range(min, max) {
   assert(min == min, 'min is NaN');
   assert(max == max, 'max is NaN');
   // if min is less than max, we have unreachable code.  still, let's
   // not violate assumptions (e.g. about wacky bitshift semantics)
   if( min > max ) { min, max = min, min; }
   var ret = { min_ = min, max_ = max };
   function ret::min() { return this.min_; }
   function ret::max() { return this.max_; }
   function ret::range() { return this->min(), this->max(); }
   function ret::fold() {
      if( this->min() == this->max() ) {
         return this->min();
      }
   }
   function ret::lt(other) { return this->max() < other->min(); }
   function ret::gt(other) { return this->min() > other->max(); }
   function ret::union(other) {
      return Range(math.min(this->min(), other->min()),
                   math.max(this->max(), other->max()));
   }
   function ret::restrict(other) {
      return Range(math.max(this->min(), other->min()),
                   math.min(this->max(), other->max()));
   }
   function ret::tobit() {
      if( (this->max() - this->min() < 2**32
          && bit.tobit(this->min()) <= bit.tobit(this->max())) ) {
         return Range(bit.tobit(this->min()), bit.tobit(this->max()));
      }
      return Range(INT32_MIN, INT32_MAX);
   }
   function ret.binary(lhs, rhs, op) { // for monotonic functions
      var fold = assert(folders[op]);
      var a = fold(lhs->min(), rhs->min());
      var b = fold(lhs->min(), rhs->max());
      var c = fold(lhs->max(), rhs->max());
      var d = fold(lhs->max(), rhs->min());
      return Range(math.min(a, b, c, d), math.max(a, b, c, d));
   }
   function ret.add(lhs, rhs) { return lhs->binary(rhs, '+'); }
   function ret.sub(lhs, rhs) { return lhs->binary(rhs, '-'); }
   function ret.mul(lhs, rhs) { return lhs->binary(rhs, '*'); }
   function ret.mul64(lhs, rhs) { return Range(0, UINT32_MAX); }
   function ret.div(lhs, rhs) {
      var rhs_min, rhs_max = rhs->min(), rhs->max();
      // 0 is prohibited by assertions, so we won't hit it at runtime,
      // but we could still see { '/', 0, 0 } in the IR when it is
      // dominated by an assertion that { '!=', 0, 0 }.  The resulting
      // range won't include the rhs-is-zero case.
      if( rhs_min == 0 ) {
         // If the RHS is (or folds to) literal 0, we certainly won't
         // reach here so we can make up whatever value we want.
         if( rhs_max == 0 ) { return Range(0, 0); }
         rhs_min = 1;
      } else if( rhs_max == 0 ) {
         rhs_max = -1;
      }
      // Now that we have removed 0 from the limits,
      // if the RHS can't change sign, we can use binary() on its range.
      if( rhs_min > 0 || rhs_max < 0 ) {
         return lhs->binary(Range(rhs_min, rhs_max), '/');
      }
      // Otherwise we can use binary() on the two semi-ranges.
      var low, high = Range(rhs_min, -1), Range(1, rhs_max);
      return lhs->binary(low, '/')->union(lhs->binary(high, '/'));
   }
   function ret.band(lhs, rhs) {
      lhs, rhs = lhs->tobit(), rhs->tobit();
      if( lhs->min() < 0 && rhs->min() < 0 ) {
         return Range(INT32_MIN, INT32_MAX);
      }
      return Range(0, math.max(math.min(lhs->max(), rhs->max()), 0));
   }
   function ret.bor(lhs, rhs) {
      lhs, rhs = lhs->tobit(), rhs->tobit();
      var function saturate(x) {
         var y = 1;
         while( y < x ) { y *=   2; }
         return y - 1;
      }
      if( lhs->min() < 0 || rhs->min() < 0 ) { return Range(INT32_MIN, -1); }
      return Range(bit.bor(lhs->min(), rhs->min()),
                   saturate(bit.bor(lhs->max(), rhs->max())));
   }
   function ret.bxor(lhs, rhs) { return lhs->bor(rhs); }
   function ret.lshift(lhs, rhs) {
      lhs, rhs = lhs->tobit(), rhs->tobit();
      var function npot(x) { // next power of two
         if( x >= 2**31 ) { return 32; }
         var n, i = 1, 1;
         while( n < x ) { n, i = n * 2, i + 1; }
         return i;
      }
      if( lhs->min() >= 0 ) {
         var min_lhs, max_lhs = lhs->min(), lhs->max();
         // It's nuts, but lshift does an implicit modulo on the RHS.
         var min_shift, max_shift = 0, 31;
         if( rhs->min() >= 0 && rhs->max() < 32 ) {
            min_shift, max_shift = rhs->min(), rhs->max();
         }
         if( npot(max_lhs) + max_shift < 32 ) {
            assert(bit.lshift(max_lhs, max_shift) > 0);
            return Range(bit.lshift(min_lhs, min_shift),
                         bit.lshift(max_lhs, max_shift));
         }
      }
      return Range(INT32_MIN, INT32_MAX);
   }
   function ret.rshift(lhs, rhs) {
      lhs, rhs = lhs->tobit(), rhs->tobit();
      var min_lhs, max_lhs = lhs->min(), lhs->max();
      // Same comments wrt modulo of shift.
      var min_shift, max_shift = 0, 31;
      if( rhs->min() >= 0 && rhs->max() < 32 ) {
         min_shift, max_shift = rhs->min(), rhs->max();
      }
      if( min_shift > 0 ) {
         // If we rshift by 1 or more, result will not be negative.
         if( min_lhs >= 0 && max_lhs < 2**32 ) {
            return Range(bit.rshift(min_lhs, max_shift),
                         bit.rshift(max_lhs, min_shift));
         } else {
            // -1 is "all bits set".
            return Range(bit.rshift(-1, max_shift),
                         bit.rshift(-1, min_shift));
         }
      } else if( min_lhs >= 0 && max_lhs < 2**31 ) {
         // Left-hand-side in [0, 2^31): result not negative.
         return Range(bit.rshift(min_lhs, max_shift),
                      bit.rshift(max_lhs, min_shift));
      } else {
         // Otherwise punt.
         return Range(INT32_MIN, INT32_MAX);
      }
   }
   return ret;
}

var function infer_ranges(expr) {
   var function cons(car, cdr) { return { car, cdr }; }
   var function car(pair) { return pair[1]; }
   var function cdr(pair) { return pair[2]; }
   var function cadr(pair) { return car(cdr(pair)); }
   var function push(db) { return cons({}, db); }
   var function lookup(db, expr) {
      if( type(expr) == 'number' ) { return Range(expr, expr); }
      var key = cfkey(expr);
      while( db ) {
         var range = car(db)[key];
         if( range ) { return range; }
         db = cdr(db);
      }
      if( expr == 'len' ) { return Range(0, UINT16_MAX); }
      return Range(INT_MIN, INT_MAX);
   }
   var function define(db, expr, range) {
      if( type(expr) == 'number' ) { return expr; }
      car(db)[cfkey(expr)] = range;
      if( range->fold() ) { return range->min(); }
      return expr;
   }
   var function restrict(db, expr, range) {
      return define(db, expr, lookup(db, expr)->restrict(range));
   }
   var function merge(db, head) {
      for( key, range in pairs(head) ) { car(db)[key] = range; }
   }
   var function union(db, h1, h2) {
      for( key, range1 in pairs(h1) ) {
         var range2 = h2[key];
         if( range2 ) { car(db)[key] = range1->union(range2); }
      }
   }

   // Returns lhs true range, lhs false range, rhs true range, rhs false range
   var function branch_ranges(op, lhs, rhs) {
      var function lt(a, b) {
         return Range(a->min(), math.min(a->max(), b->max() - 1));
      }
      var function le(a, b) {
         return Range(a->min(), math.min(a->max(), b->max()));
      }
      var function eq(a, b) {
         return Range(math.max(a->min(), b->min()), math.min(a->max(), b->max()));
      }
      var function ge(a, b) {
         return Range(math.max(a->min(), b->min()), a->max());
      }
      var function gt(a, b) {
         return Range(math.max(a->min(), b->min()+1), a->max());
      }
      if( op == '<' ) {
         return lt(lhs, rhs), ge(lhs, rhs), gt(rhs, lhs), le(rhs, lhs);
      } else if( op == '<=' ) {
         return le(lhs, rhs), gt(lhs, rhs), ge(rhs, lhs), lt(rhs, lhs);
      } else if( op == '=' ) {
         // Could restrict false continuations more.
         return eq(lhs, rhs), lhs, eq(rhs, lhs), rhs;
      } else if( op == '!=' ) {
         return lhs, eq(lhs, rhs), rhs, eq(rhs, lhs);
      } else if( op == '>=' ) {
         return ge(lhs, rhs), lt(lhs, rhs), le(rhs, lhs), gt(rhs, lhs);
      } else if( op == '>' ) {
         return gt(lhs, rhs), le(lhs, rhs), lt(rhs, lhs), ge(rhs, lhs);
      } else {
         error('unimplemented '..op);
      }
   }
   var function unop_range(op, rhs) {
      if( op == 'ntohs' ) { return Range(0, 0xffff); }
      if( op == 'ntohl' ) { return Range(INT32_MIN, INT32_MAX); }
      if( op == 'uint32' ) { return Range(0, 2**32); }
      if( op == 'int32' ) { return rhs->tobit(); }
      error('unexpected op '..op);
   }
   var function binop_range(op, lhs, rhs) {
      if( op == '+' ) { return lhs->add(rhs); }
      if( op == '-' ) { return lhs->sub(rhs); }
      if( op == '*' ) { return lhs->mul(rhs); }
      if( op == '*64' ) { return lhs->mul64(rhs); }
      if( op == '/' ) { return lhs->div(rhs); }
      if( op == '&' ) { return lhs->band(rhs); }
      if( op == '|' ) { return lhs->bor(rhs); }
      if( op == '^' ) { return lhs->bxor(rhs); }
      if( op == '<<' ) { return lhs->lshift(rhs); }
      if( op == '>>' ) { return lhs->rshift(rhs); }
      error('unexpected op '..op);
   }

   var function visit(expr, db_t, db_f) {
      if( type(expr) != 'table' ) { return expr; }
      var op = expr[1];

      // Logical ops add to their db_t and db_f stores.
      if( relops[op] ) {
         var db = push(db_t);
         var lhs, rhs = visit(expr[2], db), visit(expr[3], db);
         merge(db_t, car(db));
         merge(db_f, car(db));
         var function fold(l, r) {
            return { assert(folders[op])(l, r) && 'true' || 'false' };
         }
         var lhs_range, rhs_range = lookup(db_t, lhs), lookup(db_t, rhs);
         // If we folded both sides, or if the ranges are strictly
         // ordered, the condition will fold.
         if( ((lhs_range->fold() && rhs_range->fold())
             || lhs_range->lt(rhs_range) || lhs_range->gt(rhs_range)) ) {
            return fold(lhs_range->min(), rhs_range->min());
         } else if( (lhs_range->max() == rhs_range->min() && op == '<='
                 || lhs_range->min() == rhs_range->max() && op == '>=') ) {
            // The ranges are ordered, but not strictly, and in the same
            // sense as the test: the condition is true.
            return { 'true' };
         }
         // Otherwise, the relop may restrict the ranges for both
         // arguments along both continuations.
         var lhs_range_t, lhs_range_f, rhs_range_t, rhs_range_f =
            branch_ranges(op, lhs_range, rhs_range);
         restrict(db_t, lhs, lhs_range_t);
         restrict(db_f, lhs, lhs_range_f);
         restrict(db_t, rhs, rhs_range_t);
         restrict(db_f, rhs, rhs_range_f);
         return { op, lhs, rhs };
      } else if( simple[op] ) {
         return expr;
      } else if( op == 'if' ) {
         var test, t, f = expr[2], expr[3], expr[4];

         var test_db_t, test_db_f = push(db_t), push(db_t);
         test = visit(test, test_db_t, test_db_f);

         var kt_db_t, kt_db_f = push(test_db_t), push(test_db_t);
         var kf_db_t, kf_db_f = push(test_db_f), push(test_db_f);
         t = visit(t, kt_db_t, kt_db_f);
         f = visit(f, kf_db_t, kf_db_f);

         if( tailops[t[1]] ) {
            var head_t, head_f = car(kf_db_t), car(kf_db_f);
            var assertions = cadr(kf_db_t);
            merge(db_t, assertions);
            merge(db_t, head_t);
            merge(db_f, assertions);
            merge(db_f, head_f);
         } else if( tailops[f[1]] ) {
            var head_t, head_f = car(kt_db_t), car(kt_db_f);
            var assertions = cadr(kt_db_t);
            merge(db_t, assertions);
            merge(db_t, head_t);
            merge(db_f, assertions);
            merge(db_f, head_f);
         } else {
            var head_t_t, head_t_f = car(kt_db_t), car(kt_db_f);
            var head_f_t, head_f_f = car(kf_db_t), car(kf_db_f);
            // union the assertions?
            union(db_t, head_t_t, head_f_t);
            union(db_f, head_t_f, head_f_f);
         }
         return { op, test, t, f };
      } else if( op == 'call' ) {
         return expr;
      } else {
         // An arithmetic op, which interns into the fresh table pushed
         // by the containing relop.
         var db = db_t;
         if( op == '[]' ) {
            var pos, size = visit(expr[2], db), expr[3];
            var ret = { op, pos, size };
            var size_max;
            if( size == 1 ) { size_max = 0xff;
            } else if( size == 2 ) { size_max = 0xffff;
            } else { size_max = 0xffffffff; }
            var range = lookup(db, ret)->restrict(Range(0, size_max));
            return define(db, ret, range);
         } else if( unops[op] ) {
            var rhs = visit(expr[2], db);
            var rhs_range = lookup(db, rhs);
            if( rhs_range->fold() ) {
               return assert(folders[op])(rhs_range->fold());
            }
            if( (op == 'uint32' && 0 <= rhs_range->min()
                && rhs_range->max() <= UINT32_MAX) ) {
               return rhs;
            } else if( (op == 'int32' && INT32_MIN <= rhs_range->min()
                && rhs_range->max() <= INT32_MAX) ) {
               return rhs;
            }
            var range = unop_range(op, rhs_range);
            return restrict(db, { op, rhs }, range);
         } else if( binops[op] ) {
            var lhs, rhs = visit(expr[2], db), visit(expr[3], db);
            if( type(lhs) == 'number' && type(rhs) == 'number' ) {
               return assert(folders[op])(lhs, rhs);
            }
            var lhs_range, rhs_range = lookup(db, lhs), lookup(db, rhs);
            var range = binop_range(op, lhs_range, rhs_range);
            return restrict(db, { op, lhs, rhs }, range);
         } else {
            error('what is this '..op);
         }
      }
   }
   return visit(expr, push(), push());
}

// Length assertion hoisting.
var function lhoist(expr, db) {
   // Recursively annotate the logical expressions in EXPR, returning
   // tables of the form { MIN_T, MIN_F, MIN_PASS, MAX_FAIL, EXPR }.
   // MIN_T indicates that for this expression to be true, the packet
   // must be at least as long as MIN_T.  Similarly for MIN_F.  MIN_PASS
   // means that if the packet is smaller than MIN_PASS then the filter
   // will definitely fail.  MAX_FAIL means that if the packet is
   // smaller than MAX_FAIL, there is a 'fail' call on some path.
   var function annotate(expr, is_tail) {
      var function aexpr(min_t, min_f, min_pass, max_fail, expr) {
         if( is_tail ) {
            min_pass = math.max(min_pass, min_t);
            min_t = min_pass;
         }
         return { min_t, min_f, min_pass, max_fail, expr };
      }
      var op = expr[1];
      if( (op == '>=' && expr[2] == 'len' && type(expr[3]) == 'number') ) {
         return aexpr(expr[3], 0, 0, -1, expr);
      } else if( op == 'if' ) {
         var test, t, f = expr[2], expr[3], expr[4];
         var test_a = annotate(test, false);
         var t_a, f_a = annotate(t, is_tail), annotate(f, is_tail);
         var test_min_t, test_min_f = test_a[1], test_a[2];
         var test_min_pass, test_max_fail = test_a[3], test_a[4];
         var function if_bool_mins() {
            var t, f = t[1], f[1];
            var function branch_bool_mins(abranch, min) {
               var branch_min_t, branch_min_f = abranch[1], abranch[2];
               return math.max(branch_min_t, min), math.max(branch_min_f, min);
            }
            var t_min_t, t_min_f = branch_bool_mins(t_a, test_min_t);
            var f_min_t, f_min_f = branch_bool_mins(f_a, test_min_f);
            if( trueops[t] ) { t_min_f = f_min_f; }
            if( trueops[f] ) { f_min_f = t_min_f; }
            if( t == 'fail' ) { return f_min_t, f_min_f; }
            if( f == 'fail' ) { return t_min_t, t_min_f; }
            if( t == 'false' ) { t_min_t = f_min_t; }
            if( f == 'false' ) { f_min_t = t_min_t; }
            return math.min(t_min_t, f_min_t), math.min(t_min_f, f_min_f);
         }
         var function if_fail_mins() {
            var t, f = t[1], f[1];
            var min_pass, max_fail;
            var t_min_pass, t_max_fail = t_a[3], t_a[4];
            var f_min_pass, f_max_fail = f_a[3], f_a[4];
            // Four cases: both T and F branches are fail; one of them
            // is a fail; neither are fails.
            if( t == 'fail' ) {
               if( f == 'fail' ) {
                  min_pass = test_min_pass;
                  max_fail = UINT16_MAX;
               } else {
                  min_pass = math.max(test_min_f, f_min_pass, test_min_pass);
                  max_fail = math.max(test_min_t, f_max_fail, test_max_fail);
               }
            } else if( f == 'fail' ) {
               min_pass = math.max(test_min_t, t_min_pass, test_min_pass);
               max_fail = math.max(test_min_f, f_max_fail, test_max_fail);
            } else {
               min_pass = math.max(test_min_pass, math.min(t_min_pass, f_min_pass));
               max_fail = math.max(t_max_fail, f_max_fail, test_max_fail);
            }
            return min_pass, max_fail;
         }
         var min_t, min_f = if_bool_mins();
         var min_pass, max_fail = if_fail_mins();
         return aexpr(min_t, min_f, min_pass, max_fail, { op, test_a, t_a, f_a });
      } else {
         return aexpr(0, 0, 0, -1, expr);
      }
   }

   // Strip the annotated expression AEXPR.  Whenever the packet needs
   // be longer than the MIN argument, insert a length check and revisit
   // with the new MIN.  Elide other length checks.
   var function reduce(aexpr, min, is_tail) {
      var min_t, min_f, min_pass, max_fail, expr =
         aexpr[1], aexpr[2], aexpr[3], aexpr[4], aexpr[5];

      // Reject any packets that are too short to pass.
      if( is_tail ) { min_pass = math.max(min_pass, min_t); }
      if( min < min_pass ) {
         expr = reduce(aexpr, min_pass, is_tail);
         return { 'if', { '>=', 'len', min_pass }, expr, { 'fail' } };
      }

      // Hoist length checks if we know a packet must be of a certain
      // length for the expression to be true, and we are certain that
      // we aren't going to hit a "fail".
      if( min < min_t && max_fail < min ) {
         expr = reduce(aexpr, min_t, is_tail);
         return { 'if', { '>=', 'len', min_t }, expr, { 'false' } };
      }

      var op = expr[1];
      if( op == 'if' ) {
         var t = reduce(expr[2], min, false);
         var kt = reduce(expr[3], min, is_tail);
         var kf = reduce(expr[4], min, is_tail);
         return { op, t, kt, kf };
      } else if( op == '>=' && expr[2] == 'len' && type(expr[3]) == 'number' ) {
         // min may be set conservatively low; it is *only* a lower bound.
         // If expr[3] is <= min, { 'true' } is a valid optimization.
         // Otherwise, there's not enough information; leave expr alone.
         if( expr[3] <= min ) { return { 'true' }; } else { return expr; }
      } else {
         return expr;
      }
   }
      
   return reduce(annotate(expr, true), 0, true);
}

function optimize_inner(expr) {
   expr = simplify(expr, true);
   expr = simplify(cfold(expr, {}), true);
   expr = simplify(infer_ranges(expr), true);
   expr = simplify(lhoist(expr), true);
   clear_cache();
   return expr;
}

function optimize(expr) {
   expr = utils.fixpoint(optimize_inner, expr);
   if( verbose ) { pp(expr); }
   return expr;
}

function selftest () {
   print("selftest: pf.optimize");
   var parse = require('pf.parse').parse;
   var expand = require('pf.expand').expand;
   var function opt(str) { return optimize(expand(parse(str), "EN10MB")); }
   var equals, assert_equals = utils.equals, utils.assert_equals;
   assert_equals({ 'fail' },
      opt("1 = 2"));
   assert_equals({ '=', "len", 1 },
      opt("1 = len"));
   assert_equals({ 'match' },
      opt("1 = 2/2"));
   assert_equals({ 'if', { '>=', 'len', 1},
                   { '=', { '[]', 0, 1 }, 2 },
                   { 'fail' }},
      opt("ether[0] = 2"));
   assert_equals({ 'if', { '>=', 'len', 7},
                   { '<',
                     { '+', { '+', { '[]', 5, 1 }, { '[]', 6, 1 } }, 3 },
                     10 },
                   { 'fail' }},
      opt("(ether[5] + 1) + (ether[6] + 2) < 10"));
   assert_equals({ 'if', { '>=', 'len', 7},
                   { '<',
                     { '+', { '+', { '[]', 5, 1 }, { '[]', 6, 1 } }, 3 },
                     10 },
                   { 'fail' }},
      opt("ether[5] + 1 + ether[6] + 2 < 10"));
   assert_equals({ '>=', 'len', 2},
      opt("greater 1 and greater 2"));
   // Could check this, but it's very large
   opt("tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)");
   opt("tcp port 5555");
   print("OK");
}

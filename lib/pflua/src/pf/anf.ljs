module(...,package.seeall);

var utils = require('pf.utils');

var set, pp, dup = utils.set, utils.pp, utils.dup;
var filter_args = utils.filter_args;

var relops = set('<', '<=', '=', '!=', '>=', '>');

var binops = set(
   '+', '-', '*', '*64', '/', '&', '|', '^', '<<', '>>'
);
var unops = set('ntohs', 'ntohl', 'uint32', 'int32');

var simple = set('true', 'false', 'match', 'fail');

var count = 0;

var function fresh() {
   ++count    ;
   return 'var'..count;
}

var function lower_arith(expr, k) {
   if( type(expr) != 'table' ) { return k(expr); }
   var op = expr[1];
   if( unops[op] ) {
      var operand = expr[2];
      var function have_operand(operand) {
         var result = fresh();
         return { 'let', result, { op, operand }, k(result) };
      }
      return lower_arith(operand, have_operand);
   } else if( binops[op] ) {
      var lhs, rhs = expr[2], expr[3];
      var function have_lhs(lhs) {
         var function have_rhs(rhs) {
            var result = fresh();
            return { 'let', result, { op, lhs, rhs}, k(result) };
         }
         return lower_arith(rhs, have_rhs);
      }
      return lower_arith(lhs, have_lhs);
   } else {
      assert(op == '[]');
      var operand, size = expr[2], expr[3];
      var function have_operand(operand) {
         var result = fresh();
         return { 'let', result, { op, operand, size }, k(result) };
      }
      return lower_arith(operand, have_operand);
   }
}

var function lower_comparison(expr, k) {
   var op, lhs, rhs = expr[1], expr[2], expr[3];
   assert(relops[op]);
   var function have_lhs(lhs) {
      var function have_rhs(rhs) {
         return k({ op, lhs, rhs });
      }
      return lower_arith(rhs, have_rhs);
   }
   return lower_arith(lhs, have_lhs);
}

var function lower_bool(expr, k) {
   var function lower(expr) {
      var function have_bool(expr) {
         return expr;
      }
      return lower_bool(expr, have_bool);
   }
   var op = expr[1];
   if( op == 'if' ) {
      var test, t, f = expr[2], expr[3], expr[4];
      var function have_test(test) {
         return k({ 'if', test, lower(t), lower(f) });
      }
      return lower_bool(test, have_test);
   } else if( simple[op] ) {
      return k(expr);
   } else if( op == 'call' ) {
      var out = { 'call', expr[2] };
      var function lower_arg(i) {
         if( i > #expr ) { return k(out); }
         var function have_arg(arg) {
            out[i] = arg;
            return lower_arg(i + 1);
         }
         return lower_arith(expr[i], have_arg);
      }
      return lower_arg(3);
   } else {
      return lower_comparison(expr, k);
   }
}

var function lower(expr) {
   count = 0;
   var function have_bool(expr) {
      return expr;
   }
   return lower_bool(expr, have_bool);
}

var function cse(expr) {
   var replacements = {};
   var function lookup(expr) {
      return replacements[expr] || expr; 
   }
   var function visit(expr, env) {
      if( type(expr) == 'number' ) { return expr; }
      if( type(expr) == 'string' ) { return lookup(expr); }
      var op = expr[1];
      if( op == 'let' ) {
         var _v_var, val, body = expr[2], expr[3], expr[4];
         assert(type(val) == 'table');
         var arith_op = val[1];
         var key, replacement_val;
         if( unops[arith_op] ) {
            var lhs = visit(val[2], env);
            key = arith_op..','..lhs;
            replacement_val = { arith_op, lhs };
         } else if( binops[arith_op] ) {
            var lhs, rhs = visit(val[2], env), visit(val[3], env);
            key = arith_op..','..lhs..','..rhs;
            replacement_val = { arith_op, lhs, rhs };
         } else {
            assert(arith_op == '[]');
            var lhs, size = visit(val[2], env), val[3];
            key = arith_op..','..lhs..','..size;
            replacement_val = { arith_op, lhs, size };
         }
         var cse_var = env[key];
         if( cse_var ) {
            replacements[_v_var] = cse_var;
            return visit(body, env);
         } else {
            env = dup(env);
            env[key] = _v_var;
            return { 'let', _v_var, replacement_val, visit(body, env) };
         }
      } else if( op == 'if' ) {
         return { 'if', visit(expr[2], env), visit(expr[3], env), visit(expr[4], env) };
      } else if( simple[op] ) {
         return expr;
      } else if( op == 'call' ) {
         var out = { 'call', expr[2] };
         for( i=3,#expr ) { table.insert(out, visit(expr[i], env)); }
         return out;
      } else {
         assert(relops[op]);
         return { op, visit(expr[2], env), visit(expr[3], env) };
      }
   }
   return visit(expr, {});
}

var function inline_single_use_variables(expr) {
   var counts, substs = {}, {};
   var function count(expr) {
      if( filter_args[expr] ) { return;
      } else if( type(expr) == 'number' ) { return;
      } else if( type(expr) == 'string' ) { counts[expr] = counts[expr] + 1; 
      } else {
         assert(type(expr) == 'table');
         var op = expr[1];
         if( op == 'if' ) {
            count(expr[2]);
            count(expr[3]);
            count(expr[4]);
         } else if( op == 'let' ) {
            counts[expr[2]] = 0;
            count(expr[3]);
            count(expr[4]);
         } else if( relops[op] ) {
            count(expr[2]);
            count(expr[3]);
         } else if( unops[op] ) {
            count(expr[2]);
         } else if( binops[op] ) {
            count(expr[2]);
            count(expr[3]);
         } else if( simple[op] ) {

         } else if( op == 'call' ) {
            for( i=3,#expr ) { count(expr[i]); }
         } else { 
            assert(op == '[]');
            count(expr[2]);
         }
      }
   }
   var function lookup(expr) {
      return substs[expr] || expr;
   }
   var function subst(expr) { 
      if( type(expr) == 'number' ) { return expr; }
      if( type(expr) == 'string' ) { return lookup(expr); }
      var op = expr[1];
      if( op == 'let' ) {
         var _v_var, val, body = expr[2], expr[3], expr[4];
         assert(type(val) == 'table');
         var arith_op = val[1];
         var replacement_val;
         if( unops[arith_op] ) {
            var lhs = subst(val[2]);
            replacement_val = { arith_op, lhs };
         } else if( binops[arith_op] ) {
            var lhs, rhs = subst(val[2]), subst(val[3]);
            replacement_val = { arith_op, lhs, rhs };
         } else {
            assert(arith_op == '[]');
            var lhs, size = subst(val[2]), val[3];
            replacement_val = { arith_op, lhs, size };
         }
         if( counts[_v_var] == 1 ) {
            substs[_v_var] = replacement_val;
            return subst(body);
         } else {
            return { 'let', _v_var, replacement_val, subst(body) };
         }
      } else if( op == 'if' ) {
         return { 'if', subst(expr[2]), subst(expr[3]), subst(expr[4]) };
      } else if( simple[op] ) {
         return expr;
      } else if( op == 'call' ) {
         var out = { 'call', expr[2] };
         for( i=3,#expr ) { table.insert(out, subst(expr[i])); }
         return out;
      } else {
         assert(relops[op]);
         return { op, subst(expr[2]), subst(expr[3]) };
      }
   }
   count(expr);
   return subst(expr);
}

var function renumber(expr) {
   var count, substs = 0, {};
   var function intern(_v_var) {
      ++count    ;
      var fresh = 'v'..count;
      substs[_v_var] = fresh;
      return fresh;
   }
   var function lookup(_v_var) {
      if( filter_args[_v_var] ) { return _v_var; }
      // NB: assert returns all its arguments on success, and we only
      //     want to return the looked up variable here
      var subst = assert(substs[_v_var], "unbound variable: ".._v_var);
      return subst;
   }
   var function visit(expr) {
      if( type(expr) == 'number' ) { return expr; }
      if( type(expr) == 'string' ) { return lookup(expr); }
      var op = expr[1];
      if( op == 'let' ) {
         var _v_var, val, body = expr[2], expr[3], expr[4];
         var fresh = intern(_v_var);
         return { 'let', fresh, visit(val), visit(body) };
      } else if( op == 'if' ) {
         return { 'if', visit(expr[2]), visit(expr[3]), visit(expr[4]) };
      } else if( simple[op] ) {
         return expr;
      } else if( op == 'call' ) {
         var out = { 'call', expr[2] };
         for( i=3,#expr ) { table.insert(out, visit(expr[i])); }
         return out;
      } else if( relops[op] ) {
         return { op, visit(expr[2]), visit(expr[3]) };
      } else if( unops[op] ) {
         return { op, visit(expr[2]) };
      } else if( binops[op] ) {
         return { op, visit(expr[2]), visit(expr[3]) };
      } else {
         assert(op == '[]');
         return { op, visit(expr[2]), expr[3] };
      }
   }
   return visit(expr);
}

function convert_anf(expr) {
   return renumber(inline_single_use_variables(cse(lower(expr))));
}

function selftest() {
   var parse = require('pf.parse').parse;
   var expand = require('pf.expand').expand;
   var optimize = require('pf.optimize').optimize;
   var function test(expr) {
      return convert_anf(optimize(expand(parse(expr), "EN10MB")));
   }
   print("selftest: pf.anf");
   test("tcp port 80");
   print("OK");
}

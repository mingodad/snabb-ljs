module(...,package.seeall);

var utils = require('pf.utils');

var verbose = os.getenv("PF_VERBOSE");

var set, pp = utils.set, utils.pp;

var relop_map = {
   ['<']='<', ['<=']='<=', ['=']='==', ['!=']='!=', ['>=']='>=', ['>']='>'
};

var relop_inversions = {
   ['<']='>=', ['<=']='>', ['=']='!=', ['!=']='=', ['>=']='<', ['>']='<='
};

var simple_results = set('true', 'false', 'call');

var function invert_bool(expr) {
   if( expr[1] == 'true' ) { return { 'false' }; }
   if( expr[1] == 'false' ) { return { 'true' }; }
   assert(relop_inversions[expr[1]]);
   return { relop_inversions[expr[1]], expr[2], expr[3] };
}

var function is_simple_expr(expr) {
   // Simple := return true | return false | return call | goto Label
   if( expr[1] == 'return' ) { return simple_results[expr[2][1]]; }
   return expr[1] == 'goto';
}

// Lua := Do | Return | Goto | If | Bind | Label
// Do := 'do' Lua+
// Return := 'return' Bool|Call
// Goto := 'goto' Label
// If := 'if' Bool Lua Lua?
// Bind := 'bind' Name Expr
// Label := 'label' Lua
var function residualize_lua(program) {
   // write blocks, scope is dominator tree
   var function nest(block, result, knext) {
      for( _, binding in ipairs(block.bindings) ) {
         table.insert(result, { 'bind', binding.name, binding.value });
      }
      var control = block.control;
      if( control[1] == 'goto' ) {
         var succ = program.blocks[control[2]];
         if( succ.idom == block.label ) {
            nest(succ, result);
         } else {
            table.insert(result, control);
         }
      } else if( control[1] == 'return' ) {
         table.insert(result, control);
      } else {
         assert(control[1] == 'if');
         var test, t_label, f_label = control[2], control[3], control[4];
         var t_block, f_block = program.blocks[t_label], program.blocks[f_label];
         var expr = { 'if', test, { 'do' }, { 'do' } };
         // First, add the test.
         table.insert(result, expr);
         // Then fill in the nested then and else arms, if they have no
         // other predecessors.
         if( #t_block.preds == 1 ) {
            assert(t_block.idom == block.label);
            nest(t_block, expr[3]);
         } else {
            table.insert(expr[3], { 'goto', t_label });
         }
         if( #f_block.preds == 1 ) {
            assert(f_block.idom == block.label);
            nest(f_block, expr[4]);
         } else {
            table.insert(expr[4], { 'goto', f_label });
         }
         // Finally add immediately dominated blocks, with labels.  We
         // only have to do this in "if" blocks because "return" blocks
         // have no successors, and "goto" blocks do not immediately
         // dominate blocks that are not their successors.
         for( _,label in ipairs(block.doms) ) {
            var dom_block = program.blocks[label];
            if( #dom_block.preds != 1 ) {
               var wrap = { 'label', label, { 'do' } };
               table.insert(result, wrap);
               nest(dom_block, wrap[3]);
            }
         }
      }
   }
   var result = { 'do' };
   nest(program.blocks[program.start], result, null);
   return result;
}

// Lua := Do | Return | Goto | If | Bind | Label
// Do := 'do' Lua+
// Return := 'return' Bool|Call
// Goto := 'goto' Label
// If := 'if' Bool Lua Lua?
// Bind := 'bind' Name Expr
// Label := 'label' Lua
var function cleanup(expr, is_last) {
   var function splice_tail(result, expr) {
      if( expr[1] == 'do' ) {
         // Splice a tail "do" into the parent do.
         for( j=2,#expr ) {
            if( j==#expr ) {
               splice_tail(result, expr[j]);
            } else {
               table.insert(result, expr[j]);
            }
         }
         return;
      } else if( expr[1] == 'if' ) {
         if( expr[3][1] == 'return' || expr[3][1] == 'goto' ) {
            // Splice the consequent of a tail "if" into the parent do.
            table.insert(result, { 'if', expr[2], expr[3] });
            if( expr[4] ) { splice_tail(result, expr[4]); }
            return;
         }
      } else if( expr[1] == 'label' ) {
         // Likewise, try to splice the body of a tail labelled
         // statement.
         var tail = { 'do' };
         splice_tail(tail, expr[3]);
         if( #tail > 2 ) {
            table.insert(result, { 'label', expr[2], tail[2] });
            for( i=3,#tail ) { table.insert(result, tail[i]); }
            return;
         }
      }
      table.insert(result, expr);
   }
   var op = expr[1];
   if( op == 'do' ) {
      if( #expr == 2 ) { return cleanup(expr[2], is_last); }
      var result = { 'do' };
      for( i=2,#expr ) {
         var subexpr = cleanup(expr[i], i==#expr);
         if( i==#expr ) {
            splice_tail(result, subexpr);
         } else {
            table.insert(result, subexpr);
         }
      }
      return result;
   } else if( op == 'return' ) {
      return expr;
   } else if( op == 'goto' ) {
      return expr;
   } else if( op == 'if' ) {
      var test, t, f = expr[2], cleanup(expr[3], true), cleanup(expr[4], true);
      if( ! is_simple_expr(t) && is_simple_expr(f) ) {
         test, t, f = invert_bool(test), f, t;
      }
      if( is_simple_expr(t) && is_last ) {
         var result = { 'do', { 'if', test, t } };
         splice_tail(result, f);
         return result;
      } else {
         return { 'if', test, t, f };
      }
   } else if( op == 'bind' ) {
      return expr;
   } else {
      assert (op == 'label');
      return { 'label', expr[2], cleanup(expr[3], is_last) };
   }
}

var function filter_builder(...) {
   // Reserve first part for libraries.
   var parts = {'', 'return function('};
   var nparts = 2;
   var indent = '';
   var libraries = {};
   var builder = {};
   function builder.write(str) {
      ++nparts    ;
      parts[nparts] = str;
   }
   function builder.writeln(str) {
      builder.write(indent .. str .. '\n');
   }
   function builder.bind(_v_var, val) {
      builder.writeln('var '.._v_var..' = '..val);
   }
   function builder.push() {
      indent = indent .. '   ';
   }
   function builder.else_() {
      builder.write(indent->sub(4) .. '} else {\n');
   }
   function builder.pop() {
      indent = indent->sub(4);
      builder.writeln('}');
   }
   function builder.jump(label) {
      builder.writeln('goto '..label);
   }
   function builder.writelabel(label) {
      builder.write(label..':\n');
   }
   function builder.c(str) {
      var lib, func = str->match('([a-z]+).([a-z]+)');
      if( libraries[str] ) { return func; }
      libraries[str] = 'var '..func..' = require("'..lib..'").'..func;
      return func;
   }
   function builder.header() {
      for( _,library in pairs(libraries) ) {
         parts[1] = library.."\n"..parts[1];
      }
   }
   function builder.finish() {
      builder.pop();
      builder.header();
      var written = table.concat(parts);
      if( verbose ) { print(written); }
      return written;
   }
   var needs_comma = false;
   for( _, v in ipairs({...}) ) {
      if( needs_comma ) { builder.write(','); }
      builder.write(v);
      needs_comma = true;
   }
   builder.write(')\n');
   builder.push();
   return builder;
}

var function read_buffer_word_by_type(builder, buffer, offset, size) {
   if( size == 1 ) {
      return buffer..'['..offset..']';
   } else if( size == 2 ) {
      return builder.c('ffi.cast')..'("uint16_t*", '..buffer..'+'..offset..')[0]';
   } else if( size == 4 ) {
      return (builder.c('ffi.cast')..'("uint32_t*", '..buffer..'+'..offset..')[0]');
   } else {
      error("bad [] size: "..size);
   }
}

var function serialize(builder, stmt) {
   var function serialize_value(expr) {
      if( expr == 'len' ) { return 'length'; }
      if( type(expr) == 'number' ) { return expr; }
      if( type(expr) == 'string' ) { return expr; }
      assert(type(expr) == 'table', 'unexpected type '..type(expr));
      var op, lhs = expr[1], serialize_value(expr[2]);
      if( op == 'ntohs' ) { return builder.c('bit.rshift')..'('..builder.c('bit.bswap')..'('..lhs..'), 16)';
      } else if( op == 'ntohl' ) { return builder.c('bit.bswap')..'('..lhs..')';
      } else if( op == 'int32' ) { return builder.c('bit.tobit')..'('..lhs..')';
      } else if( op == 'uint32' ) { return '('..lhs..' % '.. 2**32 ..')';
      }
      var rhs = serialize_value(expr[3]);
      assert(expr[4] == null); // sanity check
      if( op == '[]' ) {
         return read_buffer_word_by_type(builder, 'P', lhs, rhs);
      } else if( op == '+' ) { return '('..lhs..' + '..rhs..')';
      } else if( op == '-' ) { return '('..lhs..' - '..rhs..')';
      } else if( op == '*' ) { return '('..lhs..' * '..rhs..')';
      } else if( op == '*64' ) {
         return 'tonumber(('..lhs..' * 1LL * '..rhs..') % '.. 2**32 ..')';
      } else if( op == '/' ) { return builder.c('math.floor')..'('..lhs..' / '..rhs..')';
      } else if( op == '&' ) { return builder.c('bit.band')..'('..lhs..','..rhs..')';
      } else if( op == '^' ) { return builder.c('bit.bxor')..'('..lhs..','..rhs..')';
      } else if( op == '|' ) { return builder.c('bit.bor')..'('..lhs..','..rhs..')';
      } else if( op == '<<' ) { return builder.c('bit.lshift')..'('..lhs..','..rhs..')';
      } else if( op == '>>' ) { return builder.c('bit.rshift')..'('..lhs..','..rhs..')';
      } else { error('unexpected op', op); }
   }

   var function serialize_bool(expr) {
      var op = expr[1];
      if( op == 'true' ) {
         return 'true';
      } else if( op == 'false' ) {
         return 'false';
      } else if( relop_map[op] ) {
         // An arithmetic relop.
         op = relop_map[op];
         var lhs, rhs = serialize_value(expr[2]), serialize_value(expr[3]);
         return lhs..' '..op..' '..rhs;
      } else {
         error('unhandled primitive'..op);
      }
   }

   var function serialize_call(expr) {
      var args = { 'P', 'length' };
      for( i=3,#expr ) { table.insert(args, serialize_value(expr[i])); }
      return 'self:'..expr[2]..'('..table.concat(args, ', ')..')';
   }

   var serialize_statement;

   var function serialize_sequence(stmts) {
      if( stmts[1] == 'do' ) {
         for( i=2,#stmts ) { serialize_statement(stmts[i], i==#stmts); }
      } else {
         serialize_statement(stmts, true);
      }
   }

   function serialize_statement(stmt, is_last) {
      var op = stmt[1];
      if( op == 'do' ) {
         builder.writeln('do');
         builder.push();
         serialize_sequence(stmt);
         builder.pop();
      } else if( op == 'return' ) {
         if( ! is_last ) {
            return serialize_statement({ 'do', stmt }, false);
         }
         if( stmt[2][1] == 'call' ) {
            builder.writeln('return '..serialize_call(stmt[2]));
         } else {
            builder.writeln('return '..serialize_bool(stmt[2]));
         }
      } else if( op == 'goto' ) {
         builder.jump(stmt[2]);
      } else if( op == 'if' ) {
         var test, t, f = stmt[2], stmt[3], stmt[4];
         var test_str = 'if( '..serialize_bool(test)..' ) {';
         if( is_simple_expr(t) ) {
            if( t[1] == 'return' ) {
               var result;
               if( t[2][1] == 'call' ) { result = serialize_call(t[2]);
               } else { result = serialize_bool(t[2]); }
               builder.writeln(test_str..' return '..result..' }');
            } else {
               assert(t[1] == 'goto');
               builder.writeln(test_str..' goto '..t[2]..' }');
            }
            if( f ) { serialize_statement(f, is_last); }
         } else {
            builder.writeln(test_str);
            builder.push();
            serialize_sequence(t);
            if( f ) {
               builder.else_();
               serialize_sequence(f);
            }
            builder.pop();
         }
      } else if( op == 'bind' ) {
         builder.bind(stmt[2], serialize_value(stmt[3]));
      } else {
         assert(op == 'label');
         builder.writelabel(stmt[2]);
         serialize_statement(stmt[3], is_last);
      }
   }
   serialize_sequence(stmt);
}

function emit_lua(ssa) {
   var builder = filter_builder('P', 'length');
   serialize(builder, cleanup(residualize_lua(ssa), true));
   var str = builder.finish();
   if( verbose ) { pp(str); }
   return str;
}

function emit_match_lua(ssa, ...) {
   var builder = filter_builder('self', 'P', 'length', ...);
   serialize(builder, cleanup(residualize_lua(ssa), true));
   var str = builder.finish();
   if( verbose ) { pp(str); }
   return str;
}

function emit_and_load(ssa, name) {
   return assert(loadstring(emit_lua(ssa), name))();
}

function emit_and_load_match(ssa, name, ...) {
   return assert(loadstring(emit_match_lua(ssa, ...), name))();
}

function selftest() {
   print("selftest: pf.backend");
   var parse = require('pf.parse').parse;
   var expand = require('pf.expand').expand;
   var optimize = require('pf.optimize').optimize;
   var convert_anf = require('pf.anf').convert_anf;
   var convert_ssa = require('pf.ssa').convert_ssa;

   var function test(expr) {
      var ast = optimize(expand(parse(expr), "EN10MB"));
      return emit_and_load(convert_ssa(convert_anf(ast)));
   }

   test("tcp port 80 or udp port 34");
   print("OK");
}

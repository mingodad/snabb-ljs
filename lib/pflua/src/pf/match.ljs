module(...,package.seeall);

//-
//- Program := 'match' Cond
//- Cond := '{' Clause... '}'
//- Clause := Test '=>' Dispatch [ClauseTerminator]
//  Test := 'otherwise' | LogicalExpression
//- ClauseTerminator := ',' | ';'
//- Dispatch := Call | Cond
//- Call := Identifier Args?
//- Args := '(' [ ArithmeticExpression [ ',' ArithmeticExpression ] ] ')'
//-
//- LogicalExpression and ArithmeticExpression are embedded productions
//- of pflang.  'otherwise' is a Test that always matches.
//-
//- Comments are prefixed by '--' and continue to the end of the line.
//-
//- Compiling a Program produces a Matcher.  A Matcher is a function of
//- three arguments: a handlers table, the packet data as a uint8_t*,
//- and the packet length in bytes.
//-
//- Calling a Matcher will either result in a tail call to a member
//- function of the handlers table, or return nil if no dispatch
//- matches.
//-
//- A Call matches if all of the conditions necessary to evaluate the
//- arithmetic expressions in its arguments are true.  (For example, the
//- argument handle(ip[42]) is only valid if the packet is an IPv4
//- packet of a sufficient length.)
//-
//- A Cond always matches; once you enter a Cond, no clause outside the
//- Cond will match.  If no clause in the Cond matches, the result is
//- nil.
//-
//- A Clause matches if the Test on the left-hand-side of the arrow is
//- true.  If the right-hand-side is a call, the conditions from the
//- call arguments (if any) are implicitly added to the Test on the
//- left.  In this way it's possible for the Test to be true but some
//- condition from the Call to be false, which causes the match to
//- proceed with the next Clause.
//-
//- Unlike pflang, attempting to access out-of-bounds packet data merely
//- causes a clause not to match, instead of immediately aborting the
//- match.
//-

var utils = require('pf.utils');
var parse_pflang = require('pf.parse').parse;
var expand_pflang = require('pf.expand').expand;
var optimize = require('pf.optimize');
var anf = require('pf.anf');
var ssa = require('pf.ssa');
var backend = require('pf.backend');

var function split(str, pat) {
   pat = '()'..pat..'()';
   var ret, start_pos = {}, 1;
   var tok_pos, end_pos = str->match(pat);
   while( tok_pos ) {
      table.insert(ret, str->sub(start_pos, tok_pos - 1));
      start_pos = end_pos;
      tok_pos, end_pos = str->match(pat, start_pos);
   }
   table.insert(ret, str->sub(start_pos));
   return ret;
}

var function remove_comments(str) {
   var lines = split(str, '\n');
   for( i=1,#lines ) {
      var line = lines[i];
      var comment = line->match('()%-%-');
      if( comment ) { lines[i] = line->sub(1, comment - 1); }
   }
   return table.concat(lines, '\n');
}

// Return line, line number, column number.
var function error_location(str, pos) {
   var start, count = 1, 1;
   var stop = str->match('()\n', start);
   while( stop && stop < pos ) {
      start, stop = stop + 1, str->match('()\n', stop + 1);
      ++count    ;
   }
   if( stop ) { --stop    ; }
   return str->sub(start, stop), count, pos - start + 1;
}

var function scanner(str) {
   str = remove_comments(str);
   var pos = 1;
   var function error_str(message, ...) {
      var line, line_number, column_number = error_location(str, pos);
      message = "\npfmatch: syntax error:%d:%d: "..message..'\n';
      var result = message->format(line_number, column_number, ...);
      result = result..line.."\n";
      result = result..string.rep(" ", column_number-1).."^".."\n";
      return result;
   }
   var primitive_error = error;
   var function error(message, ...) {
       primitive_error(error_str(message, ...));
   }

   var function skip_whitespace() {
      pos = str->match('^%s*()', pos);
   }
   var function peek(pat) {
      skip_whitespace();
      return str->match('^'..pat, pos);
   }
   var function check(pat) {
      skip_whitespace();
      var start_pos, end_pos = pos, peek(pat.."()");
      if( ! end_pos ) { return null; }
      pos = end_pos;
      return str->sub(start_pos, end_pos - 1);
   }
   var function next_identifier() {
      var id = check('[%a_][%w_]*');
      if( ! id ) { error('expected an identifier'); }
      return id;
   }
   var function next_balanced(pair) {
      var tok = check('%b'..pair);
      if( ! tok ) { error("expected balanced '%s'", pair); }
      return tok->sub(2, #tok - 1);
   }
   var function consume(pat) {
      if( ! check(pat) ) { error("expected pattern '%s'", pat); }
   }
   var function consume_until(pat) {
      skip_whitespace();
      var start_pos, end_pos, next_pos = pos, str->match("()"..pat.."()", pos);
      if( ! next_pos ) { error("expected pattern '%s'"); }
      pos = next_pos;
      return str->sub(start_pos, end_pos - 1);
   }
   var function done() {
      skip_whitespace();
      return pos == #str + 1;
   }
   return {
      error = error,
      peek = peek,
      check = check,
      next_identifier = next_identifier,
      next_balanced = next_balanced,
      consume = consume,
      consume_until = consume_until,
      done = done
   };
}

var parse_dispatch;

var function parse_call(scanner) {
   var proc = scanner.next_identifier();
   if( ! proc ) { scanner.error('expected a procedure call'); }
   var result = { 'call', proc };
   if( scanner.peek('%(') ) {
      var args_str = scanner.next_balanced('()');
      if( ! args_str->match('^%s*$') ) {
         var args = split(args_str, ',');
         for( i=1,#args ) {
            table.insert(result, parse_pflang(args[i], {arithmetic=true}));
         }
      }
   }
   return result;
}

var function parse_cond(scanner) {
   var res = { 'cond' };
   while( ! scanner.check('}') ) {
      var test;
      if( scanner.check('otherwise') ) {
         test = { 'true' };
         scanner.consume('=>');
      } else {
         test = parse_pflang(scanner.consume_until('=>'));
      }
      var consequent = parse_dispatch(scanner);
      scanner.check('[,;]');
      table.insert(res, { test, consequent });
   }
   return res;
}

function parse_dispatch(scanner) {
   if( scanner.check('{') ) { return parse_cond(scanner); }
   return parse_call(scanner);
}

var function subst(str, values) {
   var out, pos = '', 1;
   while( true ) {
      var before, after = str->match('()%$[%w_]+()', pos);
      if( ! before ) { return out..str->sub(pos); }
      out = out..str->sub(pos, before - 1);
      var _v_var = str->sub(before + 1, after - 1);
      var val = values[_v_var];
      if( ! val ) { error('var not found: '.._v_var); }
      out = out..val;
      pos = after;
   }
   return out;
}

var function parse(str) {
   var scanner = scanner(str);
   scanner.consume('match');
   scanner.consume('{');
   var cond = parse_cond(scanner);
   if( ! scanner.done() ) { scanner.error("unexpected token"); }
   return cond;
}

var function expand_arg(arg, dlt) {
   // The argument is an arithmetic expression, but the pflang expander
   // expects a logical expression.  Wrap in a dummy comparison, then
   // tease apart the conditions and the arithmetic expression.
   var expr = expand_pflang({ '=', arg, 0 }, dlt);
   var conditions = {};
   while( expr[1] == 'if' ) {
      table.insert(conditions, expr[2]);
      assert(type(expr[4]) == 'table');
      assert(expr[4][1] == 'fail' || expr[4][1] == 'false');
      expr = expr[3];
   }
   assert(expr[1] == '=' && expr[3] == 0);
   return conditions, expr[2];
}

var function expand_call(expr, dlt) {
   var conditions = {};
   var res = { expr[1], expr[2] };
   for( i=3,#expr ) {
      var arg_conditions, arg = expand_arg(expr[i], dlt);
      conditions = utils.concat(conditions, arg_conditions);
      table.insert(res, arg);
   }
   var test = { 'true' };
   // Preserve left-to-right order of conditions.
   while( #conditions != 0 ) {
      test = { 'if', table.remove(conditions), test, { 'false' } };
   }
   return test, res;
}

var expand_cond;

// Unlike pflang, out-of-bounds and such just cause the clause to fail,
// not the whole program.
var function replace_fail(expr) {
   if( type(expr) != 'table' ) { return expr;
   } else if( expr[1] == 'fail' ) { return { 'false' };
   } else if( expr[1] == 'if' ) {
      var test = replace_fail(expr[2]);
      var consequent = replace_fail(expr[3]);
      var alternate = replace_fail(expr[4]);
      return { 'if', test, consequent, alternate };
   } else {
      return expr;
   }
}

var function expand_clause(test, consequent, dlt) {
   test = replace_fail(expand_pflang(test, dlt));
   if( consequent[1] == 'call' ) {
      var conditions, call = expand_call(consequent, dlt);
      return { 'if', test, conditions, { 'false' } }, call;
   } else {
      assert(consequent[1] == 'cond');
      return test, expand_cond(consequent, dlt);
   }
}

function expand_cond(expr, dlt) {
   var res = { 'false' };
   for( i=#expr,2,-1 ) {
      var clause = expr[i];
      var test, consequent = expand_clause(clause[1], clause[2], dlt);
      res = { 'if', test, consequent, res };
   }
   return res;
}

var function expand(expr, dlt) {
   return expand_cond(expr, dlt);
}

var compile_defaults = {
   dlt='EN10MB', optimize=true, source=false, subst=false, extra_args={}
};

function compile(str, opts) {
   opts = utils.parse_opts(opts || {}, compile_defaults);
   if( opts.subst ) { str = subst(str, opts.subst); }

   // if the compiled function should have extra formal parameters, then
   // pass them to the various passes through filter_args
   var extra_args = {};
   for( _,v in ipairs(opts.extra_args) ) {
      utils.filter_args[v] = true;
   }

   var expr = expand(parse(str), opts.dlt);
   if( opts.optimize ) { expr = optimize.optimize(expr); }
   expr = anf.convert_anf(expr);
   expr = ssa.convert_ssa(expr);
   if( opts.source ) { return backend.emit_match_lua(expr, unpack(opts.extra_args)); }
   return backend.emit_and_load_match(expr, str, unpack(opts.extra_args));
}

function selftest() {
   print("selftest: pf.match");
   var function test(str, expr) {
      utils.assert_equals(expr, parse(str));
   }
   test("match {}", { 'cond' });
   test("match--comment\n{}", { 'cond' });
   test(" match \n     {  }   ", { 'cond' });
   test("match{}", { 'cond' });
   test("match { otherwise => x() }",
        { 'cond', { { 'true' }, { 'call', 'x' } } });
   test("match { otherwise => x(1) }",
        { 'cond', { { 'true' }, { 'call', 'x', 1 } } });
   test("match { otherwise => x(1&1) }",
        { 'cond', { { 'true' }, { 'call', 'x', { '&', 1, 1 } } } });
   test("match { otherwise => x(ip[42]) }",
        { 'cond', { { 'true' }, { 'call', 'x', { '[ip]', 42, 1 } } } });
   test("match { otherwise => x(ip[42], 10) }",
        { 'cond', { { 'true' }, { 'call', 'x', { '[ip]', 42, 1 }, 10 } } });
   test(subst("match { otherwise => x(ip[$loc], 10) }", {loc=42}),
        { 'cond', { { 'true' }, { 'call', 'x', { '[ip]', 42, 1 }, 10 } } });

   test = function (str, expr) {
      utils.assert_equals(expr, expand(parse(str), 'EN10MB'));
   }
   test("match { otherwise => x() }",
        { 'if', { 'if', { 'true' }, { 'true' }, { 'false' } },
          { 'call', 'x' },
          { 'false' } });
   test("match { otherwise => x(1) }",
        { 'if', { 'if', { 'true' }, { 'true' }, { 'false' } },
          { 'call', 'x', 1 },
          { 'false' } });
   test("match { otherwise => x(1/0) }",
        { 'if', { 'if', { 'true' },
                  { 'if', { '!=', 0, 0 }, { 'true' }, { 'false' } },
                  { 'false' } },
          { 'call', 'x', { 'uint32', { '/', 1, 0 } } },
          { 'false' } });

   test = function (str, expr) {
      utils.assert_equals(expr, optimize.optimize(expand(parse(str), 'EN10MB')));
   }
   test("match { otherwise => x() }",
        { 'call', 'x' });
   test("match { otherwise => x(1) }",
        { 'call', 'x', 1 });
   test("match { otherwise => x(1/0) }",
        { 'fail' });

   test = function (str) {
      // Just a test to see if it works without errors.
      compile(str);
   }
   test("match { tcp port 80 => pass }");

   test = function (str, pkt, obj) {
      // Try calling the matching method on the given table
      // which should have handlers installed
      obj.match = compile(str);
      obj->match(pkt.packet, pkt.len);
   }

   var savefile = require("pf.savefile");
   pkts = savefile.load_packets("../tests/data/arp.pcap");

   test("match { tcp port 80 => pass }",
        pkts[1],
        // the handler shouldn't be called
        { pass = function (this, pkt, len) { assert(false); } });
   test("match { arp => handle(&arp[1:1]) }",
        pkts[1],
        { handle = function (this, pkt, len, off) {
                     utils.assert(this != null);
                     utils.assert(pkt != null);
                     utils.assert(len != null);
                     utils.assert_equals(off, 15);
                   } });

   print("OK");
}

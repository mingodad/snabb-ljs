#!/usr/bin/env ljsjit

package.path = package.path .. ";../src/?.ljs";

var pf = require("pf");

var filter = ...;
assert(filter, "usage: dump-markdown FILTER");

function out(...) { print(string.format(...)); }

var function chomp(str) {
   return string.gsub(str, "\n$", "");
}

function compile(opts) {
   var ok, result = pcall(pf.compile_filter, filter, opts);
   if( ! ok ) { result = 'Filter failed to compile: '..result; }
   return chomp(result);
}

out("# %s\n\n", filter);
out("## BPF\n\n```\n%s\n```\n\n",
    compile({libpcap=true, source=true}));
out("## BPF cross-compiled to Lua\n\n```\n%s\n```\n\n",
    compile({bpf=true, source=true}));
out("## Direct pflang compilation\n\n```\n%s\n```\n",
    compile({source=true}));
out("## Native pflang compilation\n\n```\n%s\n```\n",
    compile({native=true, source=true}));

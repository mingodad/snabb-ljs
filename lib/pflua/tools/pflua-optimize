#!/usr/bin/env ljsjit
// -*- lua -*-

package.path = package.path .. ";../src/?.ljs;../tests/?.ljs";

var optimize = require('pf.optimize');
var savefile = require('pf.savefile');
var utils = require('pf.utils');

var pfcompile = require('pfquickcheck.pfcompile');

var function usage() {
   var content = [=[
Usage: pflua-optimize [--match-packet #packet file.pcap] [FILE]

Takes an expanded AST expression, optimizes it, and prints out the
result.  Useful when tracking down optimizer bugs.  If FILE is given as
a command-line argument, we read the expression from the file; otherwise
it is read from standard input.
   ]=];
   print(content);
}

var function run(input, options) {
   var expr = assert(loadstring('return '..input->read('*a')))();

   print('Optimizing:');
   utils.pp(expr);
   var optimized_expr = optimize.optimize(expr);
   print('Result:');
   utils.pp(optimized_expr);

   if( options.pktfile ) {
      var unopt_pred, opt_pred, packets, packet, P, len, unopt_res, opt_res;
      unopt_pred = pfcompile.compile_ast(expr, "Unopt");
      opt_pred = pfcompile.compile_ast(optimized_expr, "Opt");
      packets = savefile.load_packets(options.pktfile);
      packet = packets[options.pktnum];
      P, len = packet.packet, packet.len;

      unopt_res = unopt_pred(P, len);
      opt_res = opt_pred(P, len);
      if( unopt_res != opt_res ) {
         print("Packet results did not match!");
         print(("Unoptimized: %s, optimized: %s")->format(unopt_res, opt_res));
         os.exit(1);
      } else {
         print("Match status the same before and after optimization.");
      }
   }
}

var function parse_command_line(args) {
   var input;
   var options = {};
   while( #args >= 1 && args[1]->match("^%-%-") ) {
      var param_arg = table.remove(args, 1);
      if( param_arg == '--match-packet' ) {
         options.pktnum = tonumber(table.remove(args, 1));
         options.pktfile = table.remove(args, 1);
         print(options.pktnum, options.pktfile);
      } else { error("Unknown argument: " .. arg); }
   }

   if( #args == 0 ) {
      input = io.stdin;
   } else if( #args == 1 ) {
      if( args[1] == '--help' || args[1] == '-h' ) {
         usage();
         os.exit(0);
      }
      input = assert(io.open(args[1]));
   } else {
      usage();
      os.exit(1);
   }
   return input, options;
}

var function main(...) {
   var args = { ... };
   run(parse_command_line(args));
}

main(...);

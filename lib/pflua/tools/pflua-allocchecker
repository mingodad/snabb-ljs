#!/usr/bin/env ljsjit

package.path = package.path .. ";../src/?.ljs";

var io = require("io");
var pf = require("pf");

// Given a command like "pflua-match wingolog.pcap tcp", get its trace.
// Note: Extra argument can be passed to luajit thusly:
// "-O-cse -other-arbitrary-luajit-argument pflua-match wingolog.pcap tcp"
function get_trace(...) {
   table.insert(arg, 1, "luajit");
   table.insert(arg, 2, "-jdump=+rs");
   cmdline = table.concat(arg, " ");
   print("Running: " .. cmdline);
   return io.popen(cmdline)->read("*all");
}

// An 'interesting' start is currently one that's in a filter, not library code.
function find_first_interesting_start(raw_traces) {
   var i = 1;
   var boring = {};
   // pf.* is library code.
   for( _,v in pairs(pf) ) {
      if( type(v) == "table" ) { // turn pf.bpf into bpf, etc.
         var pf_name = string.match(v._NAME, ".*%.(%a[_%w]*)");
         if( pf_name && pf_name != "" ) { boring[pf_name] = true; }
      }
   }

   while( true ) {
      var tstart, tend = raw_traces->find("---- TRACE %d+ start ", i);
      assert(tstart, "Failed to find an interesting trace!");
      var tracing_in = raw_traces->match("[a-z]+", tend);
      if( ! boring[tracing_in] ) { break; }
      i = tend;
   }
   return i;
}

function filter_interesting_ir_traces(raw_traces) {
   var i = find_first_interesting_start(raw_traces);
   var interesting_traces = {};
   while( true ) {
      var interesting_start, _ = raw_traces->find("---- TRACE %d+ IR", i);
      if( ! interesting_start ) { break; }
      var interesting_end, nexti = raw_traces->find("---- TRACE %d+ mcode", i);
      assert(interesting_end, "The trace appears to be truncated.");
      interesting_ir_trace = raw_traces->sub(interesting_start, interesting_end);
      table.insert(interesting_traces, interesting_ir_trace);
      i = nexti;
   }
   return interesting_traces;
}

function find_unsunk_allocs_in(trace) {
   var unsunk_allocs = {};
   var allocation_ops = {"SNEW", "XSNEW", "TNEW", "TDUP", "CNEW", "CNEWI"};
   for( _, alloc_op in ipairs(allocation_ops) ) {
      var i = 1;
      while( true ) {
         var astart, aend = trace->find("[^\n]*" .. alloc_op, i);
         var alloc = trace->match("[^\n]*" .. alloc_op, astart);
         if( ! astart ) { break; }
         var is_sunk = alloc->find("sink");
         if( ! is_sunk ) { table.insert(unsunk_allocs, alloc); }
         i = aend;
      }
   }
   return unsunk_allocs;
}

function main(...) {
   var raw_traces = get_trace(...);
   var interesting_ir_traces = filter_interesting_ir_traces(raw_traces);
   var unsunk_allocs = {};
   var unsunk_alloc_traces = {};
   for( _,trace in ipairs(interesting_ir_traces) ) {
      var uas = find_unsunk_allocs_in(trace);
      if( next(uas) ) {
         for( _,ua in ipairs(uas) ) { table.insert(unsunk_allocs, ua); }
         table.insert(unsunk_alloc_traces, trace);
      }
   }
   if( next(unsunk_allocs) ) {
      print(table.concat(unsunk_allocs, "\n"));
      if( os.getenv("PF_VERBOSE") ) {
         print(table.concat(unsunk_alloc_traces, "\n"));
      }
   } else {
      print("No unsunk allocations detected in the SSA IR.");
   }
}

assert(..., "usage: pflua-allocchecker program-to-run-with-its-args");

main(...);


#!/usr/bin/env ljsjit

package.path = package.path .. ";../src/?.ljs";

var ffi = require("ffi");
var pf = require("pf");
var savefile = require("pf.savefile");

var function filter(ptr, ptr_end, out, pred) {
   var seen, written = 0, 0;
   while( ptr < ptr_end ) {
      var record = ffi.cast("struct pcap_record *", ptr);
      var packet = ffi.cast("unsigned char *", record + 1);
      var ptr_next = packet + record.incl_len;
      if( pred(packet, record.incl_len) ) {
         out->write(ffi.string(ptr, ptr_next - ptr));
         ++written    ;
      }
      ++seen    ;
      ptr = ptr_next;
   }
   out->flush();
   return seen, written;
}

function main(in_file, out_file, filter_str) {
   var header, ptr, ptr_end = savefile.open_and_mmap(in_file);
   var out = assert(io.open(out_file, 'w'));
   out->setvbuf('full');
   out->write(ffi.string(header, ffi.sizeof("struct pcap_file")));
   var pred = pf.compile_filter(filter_str);
   var seen, written = filter(ptr, ptr_end, out, pred);
   out->close();
   print(string.format("Filtered %d/%d packets from %s to %s.",
                       written, seen, in_file, out_file));
}

var in_file, out_file, filter_str = ...;
assert(filter_str, "usage: pflua-filter IN.PCAP OUT.PCAP FILTER");

main(in_file, out_file, filter_str);

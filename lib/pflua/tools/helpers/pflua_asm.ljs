/*
--
-- This module is used to obtain the resulting jitted asm code for a pcap
-- expression using pflua.
--
-- The file used for packet filtering is a 1GB file from pflua-bench, so it's
-- necessary to clone that repo, uncompress the file and create a symbolic link:
--
--  $ git clone https://github.com/Igalia/pflua-bench.git
--  $ pflua-bench=<path-to-pflua-bench>
--  $ pflua=<path-to-pflua>
--  $ unxz $pflua-bench/savefiles/one-gigabyte.pcap.xz
--  $ ln -fs $pflua-bench/savefiles/one-gigabyte.pcap \
--      $pflua/tests/data/one-gigabyte.pcap
--
--*/

module("pflua_asm", package.seeall);

package.path = package.path .. ";../../src/?.ljs";

var savefile = require("pf.savefile");
var libpcap = require("pf.libpcap");
var pf = require("pf");

// Counts number of packets within file
function filter_count(pred, file) {
   var total_pkt = 0;
   var count = 0;
   var records = savefile.records_mm(file);

   while( true ) {
      var pkt, hdr = records();
      if( ! pkt ) { break; }

      var length = hdr.incl_len;
      execute_pred_ensuring_trace(pred, pkt, length);
   }
   return count, total_pkt;
}

// Executing pred within a function ensures a trace for this call
function execute_pred_ensuring_trace(pred, packet, length) {
    pred(packet, length);
}

// Calls func() during seconds
function call_during_seconds(seconds, func, pred, file) {
    var time = os.time;
    var finish = time() + seconds;
    while( (true) ) {
        func(pred, file);
        if( (time() > finish) ) { break; }
    }
}

function selftest(filter) {
   print("selftest: pflua_asm");

   var file = "../tests/data/one-gigabyte.pcap";
   if( (filter == null || filter == '') ) {
      filter = "tcp port 80";
   }

   var pred = pf.compile_filter(filter, {dlt="EN10MB"});
   call_during_seconds(1, filter_count, pred, file);

   print("OK");
}

#!/usr/bin/env ljsjit

package.path = package.path .. ";../src/?.ljs";

var ffi = require("ffi");
var pf = require("pf");
var utils = require("pf.utils");
var savefile = require("pf.savefile");

var function usage() {
   print([=[
Usage: pflua-match [--bpf] IN.PCAP FILTER
   IN.PCAP     Input file in .pcap format.
   FILTER      Filter to apply, as a string or file.

   --bpf       Compile expression using libpcap.
   ]=]);
   os.exit(false);
}

var function filter(packets, pred) {
   var seen, matched = 0, 0;
   for( i = 1,#packets ) {
      packet = packets[i];
      ++seen    ;
      if( pred(packet.packet, packet.len) ) { ++matched    ; }
   }
   return seen, matched;
}

function get_predicate(filter_input, opts) {
   // If the filter seems to be a filename, read the filter from the file.
   // Otherwise, compile it as a filter string.
   var filter_file_pred = loadfile(filter_input);
   if( filter_file_pred ) {
      if( ! getfenv(0).ffi ) { getfenv(0).ffi = require('ffi'); }
      return filter_file_pred();
   } else {
      return pf.compile_filter(filter_input, opts);
   }
}

var function run_filter(min_time, packets, pred) {
   var start = utils.now();
   var finish = start;
   var seen, matched = 0;
   var iterations = 0;
   while( finish - start < min_time ) {
      seen, matched = filter(packets, pred);
      finish = utils.now();
      ++iterations    ;
   }
   return seen, matched, (finish - start), iterations;
}

function main(in_file, filter_input, opts) {
   var packets = savefile.load_packets(in_file);
   var pred = get_predicate(filter_input, opts);
   // Untimed warm up - this may involve disk access, etc.
   filter(packets, pred);
   // Full warm-up, hopefully. 0.5s is a guess; most JIT will(?) occur.
   var seen, matched = run_filter(0.5, packets, pred);
   // Very short timing runs are highly inaccurate. 0.002s is not ok.
   // By 1s, results are more consistent.
   // Seen and matched are the same for every run.
   seen, matched, elapsed, iterations = run_filter(1, packets, pred);
   print(string.format("Matched %d/%d packets in %s iterations: %s (%f MPPS).",
                       matched, seen, iterations, in_file,
                       (seen * iterations / elapsed) / 1e6));
}

// Parse args
var opts = { };
for( i=1, #arg ) {
   if( arg[i] == "--bpf" ) {
      opts = { bpf = true };
      table.remove(arg, i);
   }
}

var in_file, filter_input = arg[1], arg[2];
if( ! filter_input ) { usage(); }

main(in_file, filter_input, opts);

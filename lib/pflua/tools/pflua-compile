#!/usr/bin/env ljsjit
// -*- lua -*-

package.path = package.path .. ";../src/?.ljs";

var pf = require("pf");
var bpf = require("pf.bpf");
var match = require("pf.match");
var utils = require("pf.utils");

function usage() {
   var content = [=[
Usage: pflua-compile [-O0] [--bpf-asm | --bpf-lua | --lua | --native | --match] <expression>

Options:
   --bpf-asm   Print libpcap-generated BPF asm code for the pflang <expression>
   --bpf-lua   Print Lua code compiled from BPF for the pflang <expression>
   --lua       Print Lua code compiled directly for the pflang <expression> (DEFAULT)
   --native    Print dynasm-generated asm code for the pflang <expression>
   --match     Print Lua code compiled from the pfmatch <expression>

   -O0         Disable optimizations. (Optimizations are on by default) ]=];
   print(content);
   os.exit();
}

// Print help
if( #arg == 0 ) {
   usage();
}

var flags = utils.set(...);

// Print help
if( flags["--help"] || flags["-h"] ) {
   usage();
}

// No code-generation flag defined
if( (!(flags["--bpf-asm"] || flags["--bpf-lua"] || flags["--lua"] || flags["--native"] || flags['--match'])) ) {
   // Default action
   flags["--lua"] = true;
}


var optimize = true;
if( flags["-O0"] ) { optimize = false; }

var filter = arg[#arg];
if( flags["--bpf-asm"] ) {
   print(pf.compile_filter(filter, {libpcap=true, source=true,
                                    optimize=optimize}));
}
if( flags["--bpf-lua"] ) {
   print(pf.compile_filter(filter, {bpf=true, source=true,
                                    optimize=optimize}));
}
if( flags["--lua"] ) {
   print(pf.compile_filter(filter, {source=true, optimize=optimize}));
}
if( flags["--native"] ) {
   print(pf.compile_filter(filter, {native=true, source=true, optimize=optimize}));
}
if( flags["--match"] ) {
   print(match.compile(filter, {source=true, optimize=optimize}));
}

#!/usr/bin/env ljsjit
// Do a 4-way compare between the pure-lua, native-lua, bpf-lua and pure-libpcap pipelines,
// given pflang, indicating whether or not all four match.
// Input: pflang by default, or pflua IR if --ir is specified.
package.path = package.path .. ";../src/?.ljs;../tests/?.ljs";

var pf = require("pf");
var savefile = require("pf.savefile");
var optimize = require('pf.optimize');
var utils = require("pf.utils");
var pfcompile = require('pfquickcheck.pfcompile');
var libpcap = require("pf.libpcap");

var function usage() {
   print([=[
Usage: pflua-pipelines-match [-O0 | --force-opt] IN.PCAP FILTER PKT_NUMBER
       pflua-pipelines-match --ir IN.PCAP IR_FILE IR_FILE PKT_NUMBER
       pflua-pipelines-match --ir --opt-ir IN.PCAP IR_FILE PKT_NUMBER

   IN.PCAP     Input file in .pcap format.
   FILTER      Filter to apply, as a string or file.
   PKT_NUMBER  Check if the pipelines match on the specified packet
   IR_FILE     filename containing IR

   --ir: the input is a file containing IR, not pflang
   --opt-ir: instead of a 2nd IR file, optimize the first IR and use that
      (valid if --ir specified)

   -O0: force optimizations to be disabled
   --force-opt: only check pflang compiled with optimizations enabled.
   Default: check with optimizations both enabled and disabled.
   ]=]);
   os.exit(false);
}

var OPT_FALSE, OPT_TRUE, OPT_BOTH = 0, 1, 2;

var function filter(packets, preds, pkt_number) {
   var pkt = packets[pkt_number];
   var results = {};
   for( d, pred in pairs(preds) ) { results[d] = pred(pkt.packet, pkt.len); }

   var results_match, res = utils.table_values_all_equal(results);

   if( results_match ) {
      var p = {};
      for( k,_ in pairs(results) ) { table.insert(p, k); }
      var pipelines = table.concat(p, ' ');
      var msg = "OK: %s concur: all were %s";
      print(msg->format(pipelines, res));
   } else {
      print("BUG: pipelines diverged.");
      print(libpcap.pcap_version());
      var trues, falses = {}, {};
      for( k, v in pairs(results) ) {
         if( v ) {
            table.insert(trues, k);
         } else {
            table.insert(falses, k);
         }
      }
      print((" true: %s")->format(table.concat(trues, ', ')));
      print((" false: %s")->format(table.concat(falses, ', ')));
   }
   return results_match;
}

var function create_preds(filter_input, opt) {
   var pflua_pred = pf.compile_filter(filter_input, {optimize=opt});
   var bpf_pred = pf.compile_filter(filter_input, {bpf=true, optimize=opt});
   var lpcap = pf.compile_filter(filter_input, {libpcap=true, optimize=opt});
   var native_pred = pf.compile_filter(filter_input, {native=true, optimize=opt});
   return pflua_pred, bpf_pred, lpcap, native_pred;
}

var function main_pflang(pcap_file, filter_input, pkt_number, opt) {
   var packets = savefile.load_packets(pcap_file);
   var preds = {};
   if( opt == OPT_FALSE || opt == OPT_TRUE ) {
      var o = true;
      if( opt == OPT_FALSE ) { o = false; }

      var p, b, l, n = create_preds(filter_input, o);
      preds["pure-lua"] = p;
      preds["bpf-lua"] = b;
      preds["libpcap"] = l;
      preds["native"] = n;
   } else if( opt == OPT_BOTH ) {
      var p, b, l, n = create_preds(filter_input, false);
      preds["pure-lua-unopt"] = p;
      preds["bpf-lua-unopt"] = b;
      preds["libpcap-unopt"] = l;
      preds["native-unopt"] = n;
      p, b, l, n = create_preds(filter_input, true);
      preds["pure-lua-opt"] = p;
      preds["bpf-lua-opt"] = b;
      preds["libpcap-opt"] = l;
      preds["native-opt"] = n;
   } else {
      error("Invalid optimization value");
   }
   return filter(packets, preds, pkt_number);
}

var function read_and_compile_ast(ir_file, optimize_ast) {
   var ir_in = assert(io.open(ir_file));
   var ir_str = ir_in->read('*a');
   var ast = assert(loadstring('return ' .. ir_str))();
   ir_in->close();
   if( optimize_ast ) { ast = optimize.optimize(ast); }
   return pfcompile.compile_ast(ast, ir_file);
}

var function main_ir(pcap_file, ir1, ir2, opt_ir, pkt_number) {
   var packets = savefile.load_packets(pcap_file);
   var preds = {};
   preds["ir1_pred"] = read_and_compile_ast(ir1, false);
   // It's more useful to check the *current* optimization rather than some
   // known good past one, for the sake of regression testing.
   // The flag opt_ir indicates that the only IR given should be optimized
   // should be optimized, instead of compared against a different given IR.
   if( opt_ir ) {
      preds["ir2_pred"] = read_and_compile_ast(ir1, true);
   } else { // Leave given IR alone; do not modify it, do not optimize it
      preds["ir2_pred"] = read_and_compile_ast(ir2, false);
   }
   return filter(packets, preds, pkt_number);
}

var function get_nonflag_args(args) {
   var nf = {};
   var idx = 1;
   for( _,v in pairs(args) ) {
      if( ! v->match("^-") ) {
         nf[idx] = v;
         ++idx    ;
      }
   }
   return nf;
}

var function run_filters(...) {
   var opts = utils.set(...);
   var arg = get_nonflag_args({...});

   if( opts['--ir'] ) {
      var pcap_file, ir1, ir2, pkt_number;
      var opt_ir;
      if( opts['--opt-ir'] ) {
         opt_ir = true;
         pcap_file, ir1, ir2, pkt_number = arg[1], arg[2], null, arg[3];
      } else {
         opt_ir = false;
         pcap_file, ir1, ir2, pkt_number = arg[1], arg[2], arg[3], arg[4];
      }

      if( ! pkt_number ) { usage(); }
      os.exit(main_ir(pcap_file, ir1, ir2, opt_ir, tonumber(pkt_number)));
   }

   // Do a 4-way compare between the pure-lua, native-lua, bpf-lua and pure-libpcap pipelines,
   var optimize = OPT_BOTH;
   if( opts['-O0'] && opts['--force-opts'] ) {
      print("It's invalid to specify -O0 with --force-opts");
      usage();
      os.exit(1);
   } else if( opts['-O0'] ) {
      optimize = OPT_FALSE;
   } else if( opts['--force-opt'] ) {
      optimize = OPT_TRUE;
   }
   var pcap_file, filter_str, pkt_number = arg[1], arg[2], arg[3];
   if( ! pkt_number ) { usage(); }
   os.exit(main_pflang(pcap_file, filter_str, tonumber(pkt_number), optimize));
}

// Parse args and run everything.
run_filters(...);
